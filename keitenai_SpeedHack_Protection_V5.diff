Index: conf/battle_athena.conf
===================================================================
--- conf/battle_athena.conf	(revision 8)
+++ conf/battle_athena.conf	(working copy)
@@ -59,3 +59,6 @@
 
 //Your custom config goes here.
 import: conf/import/battle_conf.txt
+
+import: conf/keitenai/skill_delay.conf
+import: conf/keitenai/skill_delay_castle.conf
Index: conf/keitenai/skill_delay.conf
===================================================================
--- conf/keitenai/skill_delay.conf	(nonexistent)
+++ conf/keitenai/skill_delay.conf	(working copy)
@@ -0,0 +1,945 @@
+//------------------------------------------------------------------
+// Enable/Disable Keitenai skill delay system.
+// no = OFF
+// yes = ON
+//------------------------------------------------------------------
+KEITENAI_DELAY_SYSTEM: yes
+
+//------------------------------------------------------------------
+// Display delay in seconds.
+//------------------------------------------------------------------
+SHOW_SKILL_DELAY: yes
+
+//------------------------------------------------------------------
+// Adjustment of packet flooding / spamming detection.
+// Higher value will increase the system's sensitiviy.
+// WARNING: Setting this value higher than default(100) will
+//			most likely detect normal skill spamming as flooding.
+//			While lower than default(100) will be less sensitive.
+//------------------------------------------------------------------
+PACKET_FLOOD_SENSITIVITY: 100
+
+//------------------------------------------------------------------
+// Skill delay settings
+// Value is in milliseconds (1000 = 1 second)
+//------------------------------------------------------------------
+// Note that this delay setting still depends on the 'skill_cast_db'
+// delay settings. This will not decrease the skill delay that has
+// been set in 'skill_cast_db' although this setting can increase
+// the delay if value is higher than 'skill_cast_db' delay
+//------------------------------------------------------------------
+
+// Default delay for non-listed skill
+K_DEFAULT: 200
+
+//=================
+// Swordman
+//=================
+SM_BASH: 210
+SM_MAGNUM: 200
+
+//=================
+// Mage
+//=================
+MG_NAPALMBEAT: 200
+MG_SOULSTRIKE: 200
+MG_COLDBOLT: 350
+MG_FROSTDIVER: 200
+MG_STONECURSE: 200
+MG_FIREBALL: 200
+MG_FIREWALL: 200
+MG_FIREBOLT: 350
+MG_LIGHTNINGBOLT: 350
+MG_THUNDERSTORM: 200
+
+//=================
+// Acolyte
+//=================
+AL_HEAL: 200
+AL_DECAGI: 200
+AL_CRUCIS: 200
+AL_HOLYLIGHT: 350
+
+//=================
+// Merchant
+//=================
+MC_MAMMONITE: 200
+MC_CARTREVOLUTION: 200
+
+//=================
+// Archer
+//=================
+AC_DOUBLE: 200
+AC_SHOWER: 200
+AC_CHARGEARROW: 200
+
+//=================
+// Thief
+//=================
+TF_POISON: 200
+TF_BACKSLIDING: 200
+
+//=================
+// Knight
+//=================
+KN_PIERCE: 200
+KN_BRANDISHSPEAR: 200
+KN_SPEARSTAB: 200
+KN_SPEARBOOMERANG: 200
+KN_BOWLINGBASH: 500
+KN_CHARGEATK: 200
+
+//=================
+// Priest
+//=================
+PR_LEXDIVINA: 200
+PR_TURNUNDEAD: 200
+PR_LEXAETERNA: 200
+PR_MAGNUS: 200
+PR_REDEMPTIO: 200
+
+//=================
+// Wizard
+//=================
+WZ_FIREPILLAR: 200
+WZ_SIGHTRASHER: 200
+WZ_FIREIVY: 200
+WZ_METEOR: 200
+WZ_JUPITEL: 350
+WZ_VERMILION: 200
+WZ_WATERBALL: 200
+WZ_ICEWALL: 200
+WZ_FROSTNOVA: 200
+WZ_STORMGUST: 200
+WZ_EARTHSPIKE: 200
+WZ_HEAVENDRIVE: 200
+WZ_QUAGMIRE: 200
+WZ_ESTIMATION: 200
+WZ_SIGHTBLASTER: 200
+
+//=================
+// Blacksmith
+//=================
+BS_HAMMERFALL: 200
+
+//=================
+// Hunter
+//=================
+HT_BLITZBEAT: 200
+HT_PHANTASMIC: 200
+
+//=================
+// Assassin
+//=================
+AS_SONICBLOW: 1000
+AS_GRIMTOOTH: 200
+AS_VENOMKNIFE: 200
+
+//=================
+// Rogue
+//=================
+RG_BACKSTAP: 200
+RG_RAID: 200
+RG_GRAFFITI: 200
+RG_FLAGGRAFFITI: 200
+RG_COMPULSION: 200
+RG_PLAGIARISM: 200
+RG_CLOSECONFINE: 200
+
+//=================
+// Alchemist
+//=================
+AM_DEMONSTRATION: 200
+AM_ACIDTERROR: 200
+AM_POTIONPITCHER: 200
+AM_CANNIBALIZE: 200
+AM_SPHEREMINE: 200
+AM_FLAMECONTROL: 200
+AM_DRILLMASTER: 200
+
+//=================
+// Crusader
+//=================
+CR_SHIELDBOOMERANG: 200
+CR_HOLYCROSS: 200
+CR_GRANDCROSS: 350
+
+//=================
+// Monk
+//=================
+MO_CALLSPIRITS: 200
+MO_ABSORBSPIRITS: 200
+MO_BODYRELOCATION: 350
+MO_INVESTIGATE: 200
+MO_FINGEROFFENSIVE: 200
+MO_EXPLOSIONSPIRITS: 200
+MO_EXTREMITYFIST: 10000
+MO_CHAINCOMBO: 200
+MO_COMBOFINISH: 200
+MO_KITRANSLATION: 200
+MO_BALKYOUNG: 200
+
+//=================
+// Sage
+//=================
+SA_CASTCANCEL: 200
+SA_SPELLBREAKER: 200
+SA_DISPELL: 380
+SA_ABRACADABRA: 200
+SA_MONOCELL: 200
+SA_CLASSCHANGE: 200
+SA_SUMMONMONSTER: 200
+SA_REVERSEORCISH: 200
+SA_DEATH: 200
+SA_FORTUNE: 200
+SA_TAMINGMONSTER: 200
+SA_QUESTION: 200
+SA_GRAVITY: 200
+SA_LEVELUP: 200
+SA_INSTANTDEATH: 200
+SA_FULLRECOVERY: 200
+SA_COMA: 200
+
+//=================
+// Bard & Dancer
+//=================
+BD_ADAPTATION: 200
+BD_ENCORE: 200
+BD_LULLABY: 200
+BD_RICHMANKIM: 200
+
+//=================
+// Bard
+//=================
+BA_MUSICALSTRIKE: 200
+BA_DISSONANCE: 200
+BA_FROSTJOKER: 200
+BA_WHISTLE: 200
+BA_ASSASSINCROSS: 200
+BA_POEMBRAGI: 200
+BA_APPLEIDUN: 200
+BA_PANGVOICE: 200
+
+//=================
+// Dancer
+//=================
+DC_THROWARROW: 200
+DC_UGLYDANCE: 200
+DC_SCREAM: 200
+DC_HUMMING: 200
+DC_DONTFORGETME: 200
+DC_FORTUNEKISS: 200
+DC_SERVICEFORYOU: 200
+DC_WINKCHARM: 200
+
+//=================
+// 
+//=================
+LK_SPIRALPIERCE: 200
+LK_HEADCRUSH: 200
+LK_JOINTBEAT: 200
+LK_FURY: 200
+
+//=================
+// High Wizard
+//=================
+HW_MAGICCRASHER: 200
+HW_NAPALMVULCAN: 200
+HW_GANBANTEIN: 200
+HW_GRAVITATION: 200
+
+//=================
+// Paladin
+//=================
+PA_PRESSURE: 200
+PA_SHIELDCHAIN: 200
+
+//=================
+// Champion
+//=================
+CH_PALMSTRIKE: 200
+CH_TIGERFIST: 200
+CH_CHAINCRUSH: 200
+CH_SOULCOLLECT: 200
+
+//=================
+// Professor
+//=================
+PF_SOULCHANGE: 200
+PF_SOULBURN: 200
+PF_DOUBLECASTING: 200
+
+//=================
+// Asassin Cross
+//=================
+ASC_BREAKER: 200
+ASC_METEORASSAULT: 200
+
+//=================
+// Sniper
+//=================
+SN_FALCONASSAULT: 200
+SN_SHARPSHOOTING: 500
+
+//=================
+// Creator
+//=================
+CR_ALCHEMY: 200
+CR_SYNTHESISPOTION: 200
+CR_SLIMPITCHER: 200
+CR_FULLPROTECTION: 200
+CR_ACIDDEMONSTRATION: 200
+
+//=================
+// Clown & Gypsy
+//=================
+CG_ARROWVULCAN: 1000
+CG_MOONLIT: 200
+CG_MARIONETTE: 200
+CG_HERMODE: 200
+CG_TAROTCARD: 200
+CG_SPECIALSINGER: 200
+
+//=================
+// Professor
+//=================
+PF_MINDBREAKER: 200
+PF_SPIDERWEB: 200
+
+//=================
+// Taekwon
+//=================
+TK_STORMKICK: 200
+TK_DOWNKICK: 200
+TK_TURNKICK: 200
+TK_JUMPKICK: 200
+TK_POWER: 200
+TK_HIGHJUMP: 200
+
+//=================
+// Soul Linker
+//=================
+SL_KAIZEL: 200
+SL_KAAHI: 200
+SL_KAUPE: 200
+SL_KAITE: 200
+SL_KAINA: 200
+SL_STIN: 200
+SL_STUN: 200
+SL_SMA: 200
+SL_SWOO: 200
+SL_SKE: 200
+SL_SKA: 200
+SL_HIGH: 200
+
+//=================
+// Stalker
+//=================
+ST_FULLSTRIP: 200
+
+//=================
+// High Priest
+//=================
+HP_MANARECHARGE: 200
+
+//=================
+// Whitesmith
+//=================
+WS_CARTTERMINATION: 200
+
+//=================
+// Gunslinger
+//=================
+GS_TRIPLEACTION: 200
+GS_BULLSEYE: 200
+GS_MADNESSCANCEL: 200
+GS_INCREASING: 200
+GS_MAGICALBULLET: 200
+GS_CRACKER: 200
+GS_SINGLEACTION: 200
+GS_CHAINACTION: 200
+GS_TRACKING: 200
+GS_DISARM: 200
+GS_PIERCINGSHOT: 200
+GS_RAPIDSHOWER: 200
+GS_DESPERADO: 350
+GS_GATLINGFEVER: 200
+GS_DUST: 200
+GS_FULLBUSTER: 200
+GS_SPREADATTACK: 200
+GS_GROUNDDRIFT: 200
+
+//=================
+// Ninja
+//=================
+NJ_TOBIDOUGU: 200
+NJ_SYURIKEN: 200
+NJ_KUNAI: 200
+NJ_HUUMA: 200
+NJ_ZENYNAGE: 200
+NJ_TATAMIGAESHI: 200
+NJ_KASUMIKIRI: 200
+NJ_SHADOWJUMP: 200
+NJ_KIRIKAGE: 200
+NJ_UTSUSEMI: 200
+NJ_BUNSINJYUTSU: 200
+NJ_NINPOU: 200
+NJ_KOUENKA: 230
+NJ_KAENSIN: 200
+NJ_BAKUENRYU: 200
+NJ_HYOUSENSOU: 230
+NJ_SUITON: 200
+NJ_HYOUSYOURAKU: 200
+NJ_HUUJIN: 200
+NJ_RAIGEKISAI: 200
+NJ_KAMAITACHI: 200
+NJ_NEN: 200
+NJ_ISSEN: 200
+
+//=================
+// RK Rune Knight
+//=================
+RK_SONICWAVE: 200
+RK_DEATHBOUND: 200
+RK_HUNDREDSPEAR: 200
+RK_WINDCUTTER: 200
+RK_IGNITIONBREAK: 200
+RK_DRAGONBREATH: 1200
+RK_CRUSHSTRIKE: 200
+RK_STORMBLAST: 200
+RK_PHANTOMTHRUST: 200
+RK_DRAGONBREATH_WATER: 1200
+RK_LUXANIMA: 200
+
+//=================
+// WL Warlock
+//=================
+WL_WHITEIMPRISON: 200
+WL_SOULEXPANSION: 200
+WL_FROSTMISTY: 200
+WL_JACKFROST: 200
+WL_MARSHOFABYSS: 200
+WL_RADIUS: 200
+WL_STASIS: 200
+WL_DRAINLIFE: 200
+WL_CRIMSONROCK: 200
+WL_HELLINFERNO: 200
+WL_COMET: 200
+WL_CHAINLIGHTNING: 1000
+WL_EARTHSTRAIN: 200
+WL_TETRAVORTEX: 200
+WL_RELEASE: 200
+WL_READING_SB: 200
+WL_FREEZE_SP: 200
+WL_TELEKINESIS_INTENSE: 200
+
+//=================
+// GC Guillotine Cross
+//=================
+GC_CROSSIMPACT: 1000
+GC_WEAPONCRUSH: 200
+GC_ROLLINGCUTTER: 200
+GC_CROSSRIPPERSLASHER: 200
+GC_DARKCROW: 200
+
+//=================
+// AB Arch Bishop
+//=================
+AB_JUDEX: 200
+AB_ADORAMUS: 200
+AB_CHEAL: 200
+AB_EPICLESIS: 200
+AB_PRAEFATIO: 200
+AB_EUCHARISTICA: 200
+AB_RENOVATIO: 200
+AB_HIGHNESSHEAL: 200
+AB_CLEARANCE: 200
+AB_EXPIATIO: 200
+AB_DUPLELIGHT: 200
+AB_DUPLELIGHT_MELEE: 200
+AB_DUPLELIGHT_MAGIC: 200
+AB_SILENTIUM: 200
+AB_OFFERTORIUM: 200
+AB_SECRAMENT: 200
+AB_VITUPERATUM: 200
+AB_CONVENIO: 200
+
+//=================
+// RA Ranger
+//=================
+RA_ARROWSTORM: 310
+RA_AIMEDBOLT: 200
+RA_AIMEDBOLT: 200
+RA_WUGSTRIKE: 200
+RA_WUGBITE: 200
+RA_UNLIMIT: 200
+
+//=================
+// NC Mechanic
+//=================
+NC_BOOSTKNUCKLE: 200
+NC_PILEBUNKER: 200
+NC_VULCANARM: 200
+NC_FLAMELAUNCHER: 200
+NC_COLDSLOWER: 200
+NC_ARMSCANNON: 200
+NC_ACCELERATION: 200
+NC_F_SIDESLIDE: 200
+NC_B_SIDESLIDE: 200
+NC_MAINFRAME: 200
+NC_SHAPESHIFT: 200
+NC_INFRAREDSCAN: 200
+NC_ANALYZE: 200
+NC_MAGNETICFIELD: 200
+NC_NEUTRALBARRIER: 200
+NC_STEALTHFIELD: 200
+NC_AXEBOOMERANG: 200
+NC_POWERSWING: 200
+NC_AXETORNADO: 200
+NC_SILVERSNIPER: 200
+NC_MAGICDECOY: 200
+NC_DISJOINT: 200
+NC_MAGMA_ERUPTION: 200
+
+//=================
+// SC Shadow Chaser
+//=================
+SC_FATALMENACE: 200
+SC_TRIANGLESHOT: 200
+SC_INVISIBILITY: 200
+SC_ENERVATION: 200
+SC_GROOMY: 200
+SC_IGNORANCE: 200
+SC_LAZINESS: 200
+SC_UNLUCKY: 200
+SC_WEAKNESS: 200
+SC_STRIPACCESSARY: 200
+SC_MANHOLE: 200
+SC_DIMENSIONDOOR: 200
+SC_CHAOSPANIC: 200
+SC_MAELSTROM: 200
+SC_BLOODYLUST: 200
+SC_FEINTBOMB: 200
+SC_ESCAPE: 200
+
+//=================
+// LG Royal Guard
+//=================
+LG_CANNONSPEAR: 300
+LG_BANISHINGPOINT: 200
+LG_TRAMPLE: 200
+LG_PINPOINTATTACK: 200
+LG_RAGEBURST: 200
+LG_EXEEDBREAK: 200
+LG_OVERBRAND: 200
+LG_BANDING: 200
+LG_MOONSLASHER: 200
+LG_RAYOFGENESIS: 200
+LG_PIETY: 200
+LG_EARTHDRIVE: 200
+LG_HESPERUSLIT: 200
+LG_OVERBRAND_BRANDISH: 200
+
+//=================
+// SR Sura
+//=================
+SR_DRAGONCOMBO: 200
+SR_SKYNETBLOW: 200
+SR_EARTHSHAKER: 200
+SR_FALLENEMPIRE: 200
+SR_TIGERCANNON: 200
+SR_HELLGATE: 200
+SR_RAMPAGEBLASTER: 200
+SR_CRESCENTELBOW: 200
+SR_CURSEDCIRCLE: 200
+SR_LIGHTNINGWALK: 200
+SR_KNUCKLEARROW: 200
+SR_WINDMILL: 200
+SR_RAISINGDRAGON: 200
+SR_GENTLETOUCH: 200
+SR_ASSIMILATEPOWER: 200
+SR_POWERVELOCITY: 200
+SR_CRESCENTELBOW_AUTOSPELL: 200
+SR_GATEOFHELL: 200
+SR_GENTLETOUCH_QUIET: 200
+SR_GENTLETOUCH_CURE: 200
+SR_GENTLETOUCH_ENERGYGAIN: 200
+SR_GENTLETOUCH_CHANGE: 200
+SR_GENTLETOUCH_REVITALIZE: 200
+SR_FLASHCOMBO: 200
+SR_HOWLINGOFLION: 200
+SR_RIDEINLIGHTNING: 200
+
+//=================
+// WA Wanderer
+//=================
+WA_SWING_DANCE: 200
+WA_SYMPHONY_OF_LOVER: 200
+WA_MOONLIT_SERENADE: 200
+
+//=================
+// MI Minstrel
+//=================
+MI_RUSH_WINDMILL: 200
+MI_ECHOSONG: 200
+MI_HARMONIZE: 200
+
+//=================
+// WM Wanderer/Minstrel
+//=================
+WM_LESSON: 200
+WM_METALICSOUND: 200
+WM_REVERBERATION: 200
+WM_REVERBERATION_MELEE: 200
+WM_REVERBERATION_MAGIC: 200
+WM_DOMINION_IMPULSE: 200
+WM_SEVERE_RAINSTORM: 200
+WM_POEMOFNETHERWORLD: 200
+WM_VOICEOFSIREN: 200
+WM_DEADHILLHERE: 200
+WM_LULLABY_DEEPSLEEP: 200
+WM_SIRCLEOFNATURE: 200
+WM_RANDOMIZESPELL: 200
+WM_GLOOMYDAY: 200
+WM_GREAT_ECHO: 200
+WM_SONG_OF_MANA: 200
+WM_DANCE_WITH_WUG: 200
+WM_SOUND_OF_DESTRUCTION: 200
+WM_SATURDAY_NIGHT_FEVER: 200
+WM_LERADS_DEW: 200
+WM_MELODYOFSINK: 200
+WM_BEYOND_OF_WARCRY: 200
+WM_UNLIMITED_HUMMING_VOICE: 200
+WM_FRIGG_SONG: 200
+WM_SEVERE_RAINSTORM_MELEE: 200
+
+//=================
+// SO Sorcerer
+//=================
+SO_FIREWALK: 200
+SO_ELECTRICWALK: 200
+SO_SPELLFIST: 200
+SO_EARTHGRAVE: 200
+SO_DIAMONDDUST: 1000
+SO_POISON_BUSTER: 200
+SO_PSYCHIC_WAVE: 200
+SO_CLOUD_KILL: 200
+SO_STRIKING: 200
+SO_WARMER: 200
+SO_VACUUM_EXTREME: 200
+SO_VARETYR_SPEAR: 200
+SO_ARRULLO: 200
+SO_EL_CONTROL: 200
+SO_EL_ACTION: 200
+SO_EL_ANALYSIS: 200
+SO_EL_SYMPATHY: 200
+SO_EL_CURE: 200
+SO_ELEMENTAL_SHIELD: 200
+
+//=================
+// GN Genetic
+//=================
+GN_CART_TORNADO: 200
+GN_CARTCANNON: 200
+GN_THORNS_TRAP: 200
+GN_BLOOD_SUCKER: 200
+GN_SPORE_EXPLOSION: 200
+GN_WALLOFTHORN: 200
+GN_CRAZYWEED: 200
+GN_DEMONIC_FIRE: 200
+GN_FIRE_EXPANSION: 200
+GN_HELLS_PLANT: 200
+GN_MANDRAGORA: 200
+GN_SLINGITEM: 200
+GN_CHANGEMATERIAL: 200
+GN_SLINGITEM_RANGEMELEEATK: 200
+GN_ILLUSIONDOPING: 200
+
+//=================
+// Rebellion
+//=================
+RL_GLITTERING_GREED: 200
+RL_RICHS_COIN: 200
+RL_MASS_SPIRAL: 200
+RL_BANISHING_BUSTER: 200
+RL_B_TRAP: 200
+RL_S_STORM: 200
+RL_E_CHAIN: 200
+RL_QD_SHOT: 200
+RL_C_MARKER: 200
+RL_FIREDANCE: 200
+RL_H_MINE: 200
+RL_P_ALTER: 200
+RL_FALLEN_ANGEL: 200
+RL_R_TRIP: 200
+RL_D_TAIL: 200
+RL_FIRE_RAIN: 200
+RL_HEAT_BARREL: 200
+RL_AM_BLAST: 200
+RL_SLUGSHOT: 1000
+RL_HAMMER_OF_GOD: 200
+RL_B_FLICKER_ATK: 200
+
+//=================
+// Kagerou & Oboro
+//=================
+KO_YAMIKUMO: 200
+KO_JYUMONJIKIRI: 200
+KO_SETSUDAN: 200
+KO_BAKURETSU: 200
+KO_HAPPOKUNAI: 200
+KO_MUCHANAGE: 200
+KO_HUUMARANKA: 200
+KO_MAKIBISHI: 200
+KO_MEIKYOUSISUI: 200
+KO_ZANZOU: 200
+KO_KYOUGAKU: 200
+KO_JYUSATSU: 200
+KO_KAHU_ENTEN: 200
+KO_HYOUHU_HUBUKI: 200
+KO_KAZEHU_SEIRAN: 200
+KO_DOHU_KOUKAI: 200
+KO_KAIHOU: 200
+KO_ZENKAI: 200
+KO_GENWAKU: 200
+KO_IZAYOI: 200
+
+//=================
+// Kagerou
+//=================
+KG_KAGEHUMI: 200
+KG_KYOMU: 200
+KG_KAGEMUSYA: 200
+
+//=================
+// Oboro
+//=================
+OB_ZANGETSU: 200
+OB_OBOROGENSOU: 200
+OB_AKAITSUKI: 200
+
+//=================
+// ALL 3rd JOBS
+//=================
+ALL_FULL_THROTTLE: 200
+
+//=================
+// Summoner
+//=================
+SU_BITE: 200
+SU_SCRATCH: 200
+SU_STOOP: 200
+SU_LOPE: 200
+SU_SPRITEMABLE: 200
+SU_POWEROFLAND: 200
+SU_SV_STEMSPEAR: 200
+SU_CN_POWDERING: 200
+SU_CN_METEOR: 200
+SU_SV_ROOTTWIST: 200
+SU_POWEROFLIFE: 200
+SU_SCAROFTAROU: 200
+SU_PICKYPECK: 200
+SU_ARCLOUSEDASH: 200
+SU_LUNATICCARROTBEAT: 200
+SU_POWEROFSEA: 200
+SU_TUNABELLY: 200
+SU_TUNAPARTY: 200
+SU_BUNCHOFSHRIMP: 200
+SU_FRESHSHRIMP: 200
+SU_CN_METEOR2: 200
+SU_LUNATICCARROTBEAT2: 200
+SU_SOULATTACK: 200
+SU_POWEROFFLOCK: 200
+SU_SVG_SPIRIT: 200
+SU_HISS: 200
+SU_NYANGGRASS: 200
+SU_GROOMING: 200
+SU_PURRING: 200
+SU_SHRIMPARTY: 200
+SU_SPIRITOFLIFE: 200
+SU_MEOWMEOW: 200
+SU_SPIRITOFLAND: 200
+SU_CHATTERING: 200
+SU_SPIRITOFSEA: 200
+
+//=================
+// Dragon Knight
+//=================
+DK_SERVANTWEAPON: 200
+DK_SERVANT_W_SIGN: 200
+DK_SERVANT_W_PHANTOM: 200
+DK_SERVANT_W_DEMOL: 200
+DK_CHARGINGPIERCE: 200
+DK_HACKANDSLASHER: 200
+DK_DRAGONIC_AURA: 200
+DK_MADNESS_CRUSHER: 200
+DK_VIGOR: 200
+DK_STORMSLASH: 200
+
+//=================
+// Arch Mage
+//=================
+AG_DEADLY_PROJECTION: 200
+AG_DESTRUCTIVE_HURRICANE: 200
+AG_RAIN_OF_CRYSTAL: 200
+AG_MYSTERY_ILLUSION: 200
+AG_VIOLENT_QUAKE: 200
+AG_SOUL_VC_STRIKE: 200
+AG_STRANTUM_TREMOR: 200
+AG_ALL_BLOOM: 200
+AG_CRYSTAL_IMPACT: 200
+AG_TORNADO_STORM: 200
+AG_FLORAL_FLARE_ROAD: 200
+AG_ASTRAL_STRIKE: 200
+AG_CLIMAX: 200
+AG_ROCK_DOWN: 200
+AG_STORM_CANNON: 200
+AG_CRIMSON_ARROW: 200
+AG_FROZEN_SLASH: 200
+
+//=================
+// Inquisitor
+//=================
+IQ_POWERFUL_FAITH: 200
+IQ_FIRM_FAITH: 200
+IQ_WILL_OF_FAITH: 200
+IQ_OLEUM_SANCTUM: 200
+IQ_SINCERE_FAITH: 200
+IQ_MASSIVE_F_BLASTER: 200
+IQ_EXPOSION_BLASTER: 200
+IQ_FIRST_BRAND: 200
+IQ_FIRST_FAITH_POWER: 200
+IQ_JUDGE: 200
+IQ_SECOND_FLAME: 200
+IQ_SECOND_FAITH: 200
+IQ_SECOND_JUDGEMENT: 200
+IQ_THIRD_PUNISH: 200
+IQ_THIRD_FLAME_BOMB: 200
+IQ_THIRD_CONSECRATION: 200
+IQ_THIRD_EXOR_FLAME: 200
+
+//=================
+// Imperial Guard
+//=================
+IG_GUARD_STANCE: 200
+IG_GUARDIAN_SHIELD: 200
+IG_REBOUND_SHIELD: 200
+IG_ATTACK_STANCE: 200
+IG_ULTIMATE_SACRIFICE: 200
+IG_HOLY_SHIELD: 200
+IG_GRAND_JUDGEMENT: 200
+IG_JUDGEMENT_CROSS: 200
+IG_SHIELD_SHOOTING: 200
+IG_OVERSLASH: 200
+IG_CROSS_RAIN: 200
+
+//=================
+// Cardinal
+//=================
+CD_REPARATIO: 200
+CD_MEDIALE_VOTUM: 200
+CD_ARGUTUS_VITA: 200
+CD_ARGUTUS_TELUM: 200
+CD_ARBITRIUM: 200
+CD_PRESENS_ACIES: 200
+CD_EFFLIGO: 200
+CD_COMPETENTIA: 200
+CD_PNEUMATICUS_PROCELLA: 200
+CD_DILECTIO_HEAL: 200
+CD_RELIGIO: 200
+CD_BENEDICTUM: 200
+CD_PETITIO: 200
+CD_FRAMEN: 200
+
+//=================
+// Shadow Cross
+//=================
+SHC_SHADOW_EXCEED: 200
+SHC_DANCING_KNIFE: 200
+SHC_SAVAGE_IMPACT: 200
+SHC_ETERNAL_SLASH: 200
+SHC_POTENT_VENOM: 200
+SHC_SHADOW_STAB: 200
+SHC_IMPACT_CRATER: 200
+SHC_ENCHANTING_SHADOW: 200
+SHC_FATAL_SHADOW_CROW: 200
+
+//=================
+// Meister
+//=================
+MT_AXE_STOMP: 200
+MT_RUSH_QUAKE: 200
+MT_M_MACHINE: 200
+MT_A_MACHINE: 200
+MT_D_MACHINE: 200
+MT_TWOAXEDEF: 200
+MT_ABR_M: 200
+MT_SUMMON_ABR_BATTLE_WARIOR: 200
+MT_SUMMON_ABR_DUAL_CANNON: 200
+MT_SUMMON_ABR_MOTHER_NET: 200
+MT_SUMMON_ABR_INFINITY: 200
+AG_DESTRUCTIVE_HURRICANE_CLIMAX: 200
+
+//=================
+// Abyss Chaser
+//=================
+ABC_STRIP_SHADOW: 200
+ABC_ABYSS_DAGGER: 200
+ABC_UNLUCKY_RUSH: 200
+ABC_CHAIN_REACTION_SHOT: 200
+ABC_FROM_THE_ABYSS: 200
+ABC_ABYSS_SLAYER: 200
+ABC_ABYSS_STRIKE: 200
+ABC_DEFT_STAB: 200
+ABC_ABYSS_SQUARE: 200
+ABC_FRENZY_SHOT: 200
+
+//=================
+// Wind Hawk
+//=================
+WH_NATUREFRIENDLY: 200
+WH_HAWKRUSH: 200
+WH_HAWKBOOMERANG: 200
+WH_GALESTORM: 200
+WH_DEEPBLINDTRAP: 200
+WH_SOLIDTRAP: 200
+WH_SWIFTTRAP: 200
+WH_CRESCIVE_BOLT: 200
+WH_FLAMETRAP: 200
+
+//=================
+// Biolo
+//=================
+BO_ACIDIFIED_ZONE_WATER: 200
+BO_ACIDIFIED_ZONE_GROUND: 200
+BO_ACIDIFIED_ZONE_WIND: 200
+BO_ACIDIFIED_ZONE_FIRE: 200
+BO_WOODEN_THROWROCK: 200
+BO_WOODEN_ATTACK: 200
+BO_HELL_HOWLING: 200
+BO_HELL_DUSTY: 200
+BO_FAIRY_DUSTY: 200
+
+//=====================
+// Troubadour Trouvere
+//=====================
+TR_STAGE_MANNER: 200
+TR_ROSEBLOSSOM: 200
+TR_RHYTHMSHOOTING: 200
+TR_METALIC_FURY: 200
+
+//=====================
+// Elemental Master
+//=====================
+EM_DIAMOND_STORM: 200
+EM_LIGHTNING_LAND: 200
+EM_VENOM_SWAMP: 200
+EM_CONFLAGRATION: 200
+EM_TERRA_DRIVE: 200
+EM_ELEMENTAL_BUSTER: 200
+EM_ELEMENTAL_BUSTER_FIRE: 200
+EM_ELEMENTAL_BUSTER_WATER: 200
+EM_ELEMENTAL_BUSTER_WIND: 200
+EM_ELEMENTAL_BUSTER_GROUND: 200
+EM_ELEMENTAL_BUSTER_POISON: 200
+
Index: conf/keitenai/skill_delay_castle.conf
===================================================================
--- conf/keitenai/skill_delay_castle.conf	(nonexistent)
+++ conf/keitenai/skill_delay_castle.conf	(working copy)
@@ -0,0 +1,923 @@
+//------------------------------------------------------------------
+// Skill delay settings
+// Value is in milliseconds (1000 = 1 second)
+//------------------------------------------------------------------
+// Note that this delay setting still depends on the 'skill_cast_db'
+// delay settings. This will not decrease the skill delay that has
+// been set in 'skill_cast_db' although this setting can increase
+// the delay if value is higher than 'skill_cast_db' delay
+//------------------------------------------------------------------
+
+// Default delay for non-listed skill
+WOE_K_DEFAULT: 200
+
+//=================
+// Swordman
+//=================
+WOE_SM_BASH: 200
+WOE_SM_MAGNUM: 200
+
+//=================
+// Mage
+//=================
+WOE_MG_NAPALMBEAT: 200
+WOE_MG_SOULSTRIKE: 200
+WOE_MG_COLDBOLT: 350
+WOE_MG_FROSTDIVER: 200
+WOE_MG_STONECURSE: 200
+WOE_MG_FIREBALL: 200
+WOE_MG_FIREWALL: 200
+WOE_MG_FIREBOLT: 350
+WOE_MG_LIGHTNINGBOLT: 350
+WOE_MG_THUNDERSTORM: 200
+
+//=================
+// Acolyte
+//=================
+WOE_AL_HEAL: 200
+WOE_AL_DECAGI: 200
+WOE_AL_CRUCIS: 200
+WOE_AL_HOLYLIGHT: 350
+
+//=================
+// Merchant
+//=================
+WOE_MC_MAMMONITE: 200
+WOE_MC_CARTREVOLUTION: 200
+
+//=================
+// Archer
+//=================
+WOE_AC_DOUBLE: 200
+WOE_AC_SHOWER: 200
+WOE_AC_CHARGEARROW: 200
+
+//=================
+// Thief
+//=================
+WOE_TF_POISON: 200
+WOE_TF_BACKSLIDING: 200
+
+//=================
+// Knight
+//=================
+WOE_KN_PIERCE: 200
+WOE_KN_BRANDISHSPEAR: 200
+WOE_KN_SPEARSTAB: 200
+WOE_KN_SPEARBOOMERANG: 200
+WOE_KN_BOWLINGBASH: 500
+WOE_KN_CHARGEATK: 200
+
+//=================
+// Priest
+//=================
+WOE_PR_LEXDIVINA: 200
+WOE_PR_TURNUNDEAD: 200
+WOE_PR_LEXAETERNA: 200
+WOE_PR_MAGNUS: 200
+WOE_PR_REDEMPTIO: 200
+
+//=================
+// Wizard
+//=================
+WOE_WZ_FIREPILLAR: 200
+WOE_WZ_SIGHTRASHER: 200
+WOE_WZ_FIREIVY: 200
+WOE_WZ_METEOR: 200
+WOE_WZ_JUPITEL: 350
+WOE_WZ_VERMILION: 200
+WOE_WZ_WATERBALL: 200
+WOE_WZ_ICEWALL: 200
+WOE_WZ_FROSTNOVA: 200
+WOE_WZ_STORMGUST: 200
+WOE_WZ_EARTHSPIKE: 200
+WOE_WZ_HEAVENDRIVE: 200
+WOE_WZ_QUAGMIRE: 200
+WOE_WZ_ESTIMATION: 200
+WOE_WZ_SIGHTBLASTER: 200
+
+//=================
+// Blacksmith
+//=================
+WOE_BS_HAMMERFALL: 200
+
+//=================
+// Hunter
+//=================
+WOE_HT_BLITZBEAT: 200
+WOE_HT_PHANTASMIC: 200
+
+//=================
+// Assassin
+//=================
+WOE_AS_SONICBLOW: 1000
+WOE_AS_GRIMTOOTH: 200
+WOE_AS_VENOMKNIFE: 200
+
+//=================
+// Rogue
+//=================
+WOE_RG_BACKSTAP: 200
+WOE_RG_RAID: 200
+WOE_RG_GRAFFITI: 200
+WOE_RG_FLAGGRAFFITI: 200
+WOE_RG_COMPULSION: 200
+WOE_RG_PLAGIARISM: 200
+WOE_RG_CLOSECONFINE: 200
+
+//=================
+// Alchemist
+//=================
+WOE_AM_DEMONSTRATION: 200
+WOE_AM_ACIDTERROR: 200
+WOE_AM_POTIONPITCHER: 200
+WOE_AM_CANNIBALIZE: 200
+WOE_AM_SPHEREMINE: 200
+WOE_AM_FLAMECONTROL: 200
+WOE_AM_DRILLMASTER: 200
+
+//=================
+// Crusader
+//=================
+WOE_CR_SHIELDBOOMERANG: 200
+WOE_CR_HOLYCROSS: 200
+WOE_CR_GRANDCROSS: 350
+
+//=================
+// Monk
+//=================
+WOE_MO_CALLSPIRITS: 200
+WOE_MO_ABSORBSPIRITS: 200
+WOE_MO_BODYRELOCATION: 350
+WOE_MO_INVESTIGATE: 200
+WOE_MO_FINGEROFFENSIVE: 200
+WOE_MO_EXPLOSIONSPIRITS: 200
+WOE_MO_EXTREMITYFIST: 200
+WOE_MO_CHAINCOMBO: 200
+WOE_MO_COMBOFINISH: 200
+WOE_MO_KITRANSLATION: 200
+WOE_MO_BALKYOUNG: 200
+
+//=================
+// Sage
+//=================
+WOE_SA_CASTCANCEL: 200
+WOE_SA_SPELLBREAKER: 200
+WOE_SA_DISPELL: 380
+WOE_SA_ABRACADABRA: 200
+WOE_SA_MONOCELL: 200
+WOE_SA_CLASSCHANGE: 200
+WOE_SA_SUMMONMONSTER: 200
+WOE_SA_REVERSEORCISH: 200
+WOE_SA_DEATH: 200
+WOE_SA_FORTUNE: 200
+WOE_SA_TAMINGMONSTER: 200
+WOE_SA_QUESTION: 200
+WOE_SA_GRAVITY: 200
+WOE_SA_LEVELUP: 200
+WOE_SA_INSTANTDEATH: 200
+WOE_SA_FULLRECOVERY: 200
+WOE_SA_COMA: 200
+
+//=================
+// Bard & Dancer
+//=================
+WOE_BD_ADAPTATION: 200
+WOE_BD_ENCORE: 200
+WOE_BD_LULLABY: 200
+WOE_BD_RICHMANKIM: 200
+
+//=================
+// Bard
+//=================
+WOE_BA_MUSICALSTRIKE: 200
+WOE_BA_DISSONANCE: 200
+WOE_BA_FROSTJOKER: 200
+WOE_BA_WHISTLE: 200
+WOE_BA_ASSASSINCROSS: 200
+WOE_BA_POEMBRAGI: 200
+WOE_BA_APPLEIDUN: 200
+WOE_BA_PANGVOICE: 200
+
+//=================
+// Dancer
+//=================
+WOE_DC_THROWARROW: 200
+WOE_DC_UGLYDANCE: 200
+WOE_DC_SCREAM: 200
+WOE_DC_HUMMING: 200
+WOE_DC_DONTFORGETME: 200
+WOE_DC_FORTUNEKISS: 200
+WOE_DC_SERVICEFORYOU: 200
+WOE_DC_WINKCHARM: 200
+
+//=================
+// 
+//=================
+WOE_LK_SPIRALPIERCE: 200
+WOE_LK_HEADCRUSH: 200
+WOE_LK_JOINTBEAT: 200
+WOE_LK_FURY: 200
+
+//=================
+// High Wizard
+//=================
+WOE_HW_MAGICCRASHER: 200
+WOE_HW_NAPALMVULCAN: 200
+WOE_HW_GANBANTEIN: 200
+WOE_HW_GRAVITATION: 200
+
+//=================
+// Paladin
+//=================
+WOE_PA_PRESSURE: 200
+WOE_PA_SHIELDCHAIN: 200
+
+//=================
+// Champion
+//=================
+WOE_CH_PALMSTRIKE: 200
+WOE_CH_TIGERFIST: 200
+WOE_CH_CHAINCRUSH: 200
+WOE_CH_SOULCOLLECT: 200
+
+//=================
+// Professor
+//=================
+WOE_PF_SOULCHANGE: 200
+WOE_PF_SOULBURN: 200
+WOE_PF_DOUBLECASTING: 200
+
+//=================
+// Asassin Cross
+//=================
+WOE_ASC_BREAKER: 200
+WOE_ASC_METEORASSAULT: 200
+
+//=================
+// Sniper
+//=================
+WOE_SN_FALCONASSAULT: 200
+WOE_SN_SHARPSHOOTING: 500
+
+//=================
+// Creator
+//=================
+WOE_CR_ALCHEMY: 200
+WOE_CR_SYNTHESISPOTION: 200
+WOE_CR_SLIMPITCHER: 200
+WOE_CR_FULLPROTECTION: 200
+WOE_CR_ACIDDEMONSTRATION: 200
+
+//=================
+// Clown & Gypsy
+//=================
+WOE_CG_ARROWVULCAN: 1000
+WOE_CG_MOONLIT: 200
+WOE_CG_MARIONETTE: 200
+WOE_CG_HERMODE: 200
+WOE_CG_TAROTCARD: 200
+WOE_CG_SPECIALSINGER: 200
+
+//=================
+// Professor
+//=================
+WOE_PF_MINDBREAKER: 200
+WOE_PF_SPIDERWEB: 200
+
+//=================
+// Taekwon
+//=================
+WOE_TK_STORMKICK: 200
+WOE_TK_DOWNKICK: 200
+WOE_TK_TURNKICK: 200
+WOE_TK_JUMPKICK: 200
+WOE_TK_POWER: 200
+WOE_TK_HIGHJUMP: 200
+
+//=================
+// Soul Linker
+//=================
+WOE_SL_KAIZEL: 200
+WOE_SL_KAAHI: 200
+WOE_SL_KAUPE: 200
+WOE_SL_KAITE: 200
+WOE_SL_KAINA: 200
+WOE_SL_STIN: 200
+WOE_SL_STUN: 200
+WOE_SL_SMA: 200
+WOE_SL_SWOO: 200
+WOE_SL_SKE: 200
+WOE_SL_SKA: 200
+WOE_SL_HIGH: 200
+
+//=================
+// Stalker
+//=================
+WOE_ST_FULLSTRIP: 200
+
+//=================
+// High Priest
+//=================
+WOE_HP_MANARECHARGE: 200
+
+//=================
+// Whitesmith
+//=================
+WOE_WS_CARTTERMINATION: 200
+
+//=================
+// Gunslinger
+//=================
+WOE_GS_TRIPLEACTION: 200
+WOE_GS_BULLSEYE: 200
+WOE_GS_MADNESSCANCEL: 200
+WOE_GS_INCREASING: 200
+WOE_GS_MAGICALBULLET: 200
+WOE_GS_CRACKER: 200
+WOE_GS_SINGLEACTION: 200
+WOE_GS_CHAINACTION: 200
+WOE_GS_TRACKING: 200
+WOE_GS_DISARM: 200
+WOE_GS_PIERCINGSHOT: 200
+WOE_GS_RAPIDSHOWER: 200
+WOE_GS_DESPERADO: 350
+WOE_GS_GATLINGFEVER: 200
+WOE_GS_DUST: 200
+WOE_GS_FULLBUSTER: 200
+WOE_GS_SPREADATTACK: 200
+WOE_GS_GROUNDDRIFT: 200
+
+//=================
+// Ninja
+//=================
+WOE_NJ_TOBIDOUGU: 200
+WOE_NJ_SYURIKEN: 200
+WOE_NJ_KUNAI: 200
+WOE_NJ_HUUMA: 200
+WOE_NJ_ZENYNAGE: 200
+WOE_NJ_TATAMIGAESHI: 200
+WOE_NJ_KASUMIKIRI: 200
+WOE_NJ_SHADOWJUMP: 200
+WOE_NJ_KIRIKAGE: 200
+WOE_NJ_UTSUSEMI: 200
+WOE_NJ_BUNSINJYUTSU: 200
+WOE_NJ_NINPOU: 200
+WOE_NJ_KOUENKA: 230
+WOE_NJ_KAENSIN: 200
+WOE_NJ_BAKUENRYU: 200
+WOE_NJ_HYOUSENSOU: 230
+WOE_NJ_SUITON: 200
+WOE_NJ_HYOUSYOURAKU: 200
+WOE_NJ_HUUJIN: 200
+WOE_NJ_RAIGEKISAI: 200
+WOE_NJ_KAMAITACHI: 200
+WOE_NJ_NEN: 200
+WOE_NJ_ISSEN: 200
+
+//=================
+// RK Rune Knight
+//=================
+WOE_RK_SONICWAVE: 200
+WOE_RK_DEATHBOUND: 200
+WOE_RK_HUNDREDSPEAR: 200
+WOE_RK_WINDCUTTER: 200
+WOE_RK_IGNITIONBREAK: 200
+WOE_RK_DRAGONBREATH: 1200
+WOE_RK_CRUSHSTRIKE: 200
+WOE_RK_STORMBLAST: 200
+WOE_RK_PHANTOMTHRUST: 200
+WOE_RK_DRAGONBREATH_WATER: 1200
+WOE_RK_LUXANIMA: 200
+
+//=================
+// WL Warlock
+//=================
+WOE_WL_WHITEIMPRISON: 200
+WOE_WL_SOULEXPANSION: 200
+WOE_WL_FROSTMISTY: 200
+WOE_WL_JACKFROST: 200
+WOE_WL_MARSHOFABYSS: 200
+WOE_WL_RADIUS: 200
+WOE_WL_STASIS: 200
+WOE_WL_DRAINLIFE: 200
+WOE_WL_CRIMSONROCK: 200
+WOE_WL_HELLINFERNO: 200
+WOE_WL_COMET: 200
+WOE_WL_CHAINLIGHTNING: 1000
+WOE_WL_EARTHSTRAIN: 200
+WOE_WL_TETRAVORTEX: 200
+WOE_WL_RELEASE: 200
+WOE_WL_READING_SB: 200
+WOE_WL_FREEZE_SP: 200
+WOE_WL_TELEKINESIS_INTENSE: 200
+
+//=================
+// GC Guillotine Cross
+//=================
+WOE_GC_CROSSIMPACT: 1000
+WOE_GC_WEAPONCRUSH: 200
+WOE_GC_ROLLINGCUTTER: 200
+WOE_GC_CROSSRIPPERSLASHER: 200
+WOE_GC_DARKCROW: 200
+
+//=================
+// AB Arch Bishop
+//=================
+WOE_AB_JUDEX: 200
+WOE_AB_ADORAMUS: 200
+WOE_AB_CHEAL: 200
+WOE_AB_EPICLESIS: 200
+WOE_AB_PRAEFATIO: 200
+WOE_AB_EUCHARISTICA: 200
+WOE_AB_RENOVATIO: 200
+WOE_AB_HIGHNESSHEAL: 200
+WOE_AB_CLEARANCE: 200
+WOE_AB_EXPIATIO: 200
+WOE_AB_DUPLELIGHT: 200
+WOE_AB_DUPLELIGHT_MELEE: 200
+WOE_AB_DUPLELIGHT_MAGIC: 200
+WOE_AB_SILENTIUM: 200
+WOE_AB_OFFERTORIUM: 200
+WOE_AB_SECRAMENT: 200
+WOE_AB_VITUPERATUM: 200
+WOE_AB_CONVENIO: 200
+
+//=================
+// RA Ranger
+//=================
+WOE_RA_ARROWSTORM: 310
+WOE_RA_AIMEDBOLT: 200
+WOE_RA_AIMEDBOLT: 200
+WOE_RA_WUGSTRIKE: 200
+WOE_RA_WUGBITE: 200
+WOE_RA_UNLIMIT: 200
+
+//=================
+// NC Mechanic
+//=================
+WOE_NC_BOOSTKNUCKLE: 200
+WOE_NC_PILEBUNKER: 200
+WOE_NC_VULCANARM: 200
+WOE_NC_FLAMELAUNCHER: 200
+WOE_NC_COLDSLOWER: 200
+WOE_NC_ARMSCANNON: 200
+WOE_NC_ACCELERATION: 200
+WOE_NC_F_SIDESLIDE: 200
+WOE_NC_B_SIDESLIDE: 200
+WOE_NC_MAINFRAME: 200
+WOE_NC_SHAPESHIFT: 200
+WOE_NC_INFRAREDSCAN: 200
+WOE_NC_ANALYZE: 200
+WOE_NC_MAGNETICFIELD: 200
+WOE_NC_NEUTRALBARRIER: 200
+WOE_NC_STEALTHFIELD: 200
+WOE_NC_AXEBOOMERANG: 200
+WOE_NC_POWERSWING: 200
+WOE_NC_AXETORNADO: 200
+WOE_NC_SILVERSNIPER: 200
+WOE_NC_MAGICDECOY: 200
+WOE_NC_DISJOINT: 200
+WOE_NC_MAGMA_ERUPTION: 200
+
+//=================
+// SC Shadow Chaser
+//=================
+WOE_SC_FATALMENACE: 200
+WOE_SC_TRIANGLESHOT: 200
+WOE_SC_INVISIBILITY: 200
+WOE_SC_ENERVATION: 200
+WOE_SC_GROOMY: 200
+WOE_SC_IGNORANCE: 200
+WOE_SC_LAZINESS: 200
+WOE_SC_UNLUCKY: 200
+WOE_SC_WEAKNESS: 200
+WOE_SC_STRIPACCESSARY: 200
+WOE_SC_MANHOLE: 200
+WOE_SC_DIMENSIONDOOR: 200
+WOE_SC_CHAOSPANIC: 200
+WOE_SC_MAELSTROM: 200
+WOE_SC_BLOODYLUST: 200
+WOE_SC_FEINTBOMB: 200
+WOE_SC_ESCAPE: 200
+
+//=================
+// LG Royal Guard
+//=================
+WOE_LG_CANNONSPEAR: 300
+WOE_LG_BANISHINGPOINT: 200
+WOE_LG_TRAMPLE: 200
+WOE_LG_PINPOINTATTACK: 200
+WOE_LG_RAGEBURST: 200
+WOE_LG_EXEEDBREAK: 200
+WOE_LG_OVERBRAND: 200
+WOE_LG_BANDING: 200
+WOE_LG_MOONSLASHER: 200
+WOE_LG_RAYOFGENESIS: 200
+WOE_LG_PIETY: 200
+WOE_LG_EARTHDRIVE: 200
+WOE_LG_HESPERUSLIT: 200
+WOE_LG_OVERBRAND_BRANDISH: 200
+
+//=================
+// SR Sura
+//=================
+WOE_SR_DRAGONCOMBO: 200
+WOE_SR_SKYNETBLOW: 200
+WOE_SR_EARTHSHAKER: 200
+WOE_SR_FALLENEMPIRE: 200
+WOE_SR_TIGERCANNON: 200
+WOE_SR_HELLGATE: 200
+WOE_SR_RAMPAGEBLASTER: 200
+WOE_SR_CRESCENTELBOW: 200
+WOE_SR_CURSEDCIRCLE: 200
+WOE_SR_LIGHTNINGWALK: 200
+WOE_SR_KNUCKLEARROW: 200
+WOE_SR_WINDMILL: 200
+WOE_SR_RAISINGDRAGON: 200
+WOE_SR_GENTLETOUCH: 200
+WOE_SR_ASSIMILATEPOWER: 200
+WOE_SR_POWERVELOCITY: 200
+WOE_SR_CRESCENTELBOW_AUTOSPELL: 200
+WOE_SR_GATEOFHELL: 200
+WOE_SR_GENTLETOUCH_QUIET: 200
+WOE_SR_GENTLETOUCH_CURE: 200
+WOE_SR_GENTLETOUCH_ENERGYGAIN: 200
+WOE_SR_GENTLETOUCH_CHANGE: 200
+WOE_SR_GENTLETOUCH_REVITALIZE: 200
+WOE_SR_FLASHCOMBO: 200
+WOE_SR_HOWLINGOFLION: 200
+WOE_SR_RIDEINLIGHTNING: 200
+
+//=================
+// WA Wanderer
+//=================
+WOE_WA_SWING_DANCE: 200
+WOE_WA_SYMPHONY_OF_LOVER: 200
+WOE_WA_MOONLIT_SERENADE: 200
+
+//=================
+// MI Minstrel
+//=================
+WOE_MI_RUSH_WINDMILL: 200
+WOE_MI_ECHOSONG: 200
+WOE_MI_HARMONIZE: 200
+
+//=================
+// WM Wanderer/Minstrel
+//=================
+WOE_WM_LESSON: 200
+WOE_WM_METALICSOUND: 200
+WOE_WM_REVERBERATION: 200
+WOE_WM_REVERBERATION_MELEE: 200
+WOE_WM_REVERBERATION_MAGIC: 200
+WOE_WM_DOMINION_IMPULSE: 200
+WOE_WM_SEVERE_RAINSTORM: 200
+WOE_WM_POEMOFNETHERWORLD: 200
+WOE_WM_VOICEOFSIREN: 200
+WOE_WM_DEADHILLHERE: 200
+WOE_WM_LULLABY_DEEPSLEEP: 200
+WOE_WM_SIRCLEOFNATURE: 200
+WOE_WM_RANDOMIZESPELL: 200
+WOE_WM_GLOOMYDAY: 200
+WOE_WM_GREAT_ECHO: 200
+WOE_WM_SONG_OF_MANA: 200
+WOE_WM_DANCE_WITH_WUG: 200
+WOE_WM_SOUND_OF_DESTRUCTION: 200
+WOE_WM_SATURDAY_NIGHT_FEVER: 200
+WOE_WM_LERADS_DEW: 200
+WOE_WM_MELODYOFSINK: 200
+WOE_WM_BEYOND_OF_WARCRY: 200
+WOE_WM_UNLIMITED_HUMMING_VOICE: 200
+WOE_WM_FRIGG_SONG: 200
+WOE_WM_SEVERE_RAINSTORM_MELEE: 200
+
+//=================
+// SO Sorcerer
+//=================
+WOE_SO_FIREWALK: 200
+WOE_SO_ELECTRICWALK: 200
+WOE_SO_SPELLFIST: 200
+WOE_SO_EARTHGRAVE: 200
+WOE_SO_DIAMONDDUST: 1000
+WOE_SO_POISON_BUSTER: 200
+WOE_SO_PSYCHIC_WAVE: 200
+WOE_SO_CLOUD_KILL: 200
+WOE_SO_STRIKING: 200
+WOE_SO_WARMER: 200
+WOE_SO_VACUUM_EXTREME: 200
+WOE_SO_VARETYR_SPEAR: 200
+WOE_SO_ARRULLO: 200
+WOE_SO_EL_CONTROL: 200
+WOE_SO_EL_ACTION: 200
+WOE_SO_EL_ANALYSIS: 200
+WOE_SO_EL_SYMPATHY: 200
+WOE_SO_EL_CURE: 200
+WOE_SO_ELEMENTAL_SHIELD: 200
+
+//=================
+// GN Genetic
+//=================
+WOE_GN_CART_TORNADO: 200
+WOE_GN_CARTCANNON: 200
+WOE_GN_THORNS_TRAP: 200
+WOE_GN_BLOOD_SUCKER: 200
+WOE_GN_SPORE_EXPLOSION: 200
+WOE_GN_WALLOFTHORN: 200
+WOE_GN_CRAZYWEED: 200
+WOE_GN_DEMONIC_FIRE: 200
+WOE_GN_FIRE_EXPANSION: 200
+WOE_GN_HELLS_PLANT: 200
+WOE_GN_MANDRAGORA: 200
+WOE_GN_SLINGITEM: 200
+WOE_GN_CHANGEMATERIAL: 200
+WOE_GN_SLINGITEM_RANGEMELEEATK: 200
+WOE_GN_ILLUSIONDOPING: 200
+
+//=================
+// Rebellion
+//=================
+WOE_RL_GLITTERING_GREED: 200
+WOE_RL_RICHS_COIN: 200
+WOE_RL_MASS_SPIRAL: 200
+WOE_RL_BANISHING_BUSTER: 200
+WOE_RL_B_TRAP: 200
+WOE_RL_S_STORM: 200
+WOE_RL_E_CHAIN: 200
+WOE_RL_QD_SHOT: 200
+WOE_RL_C_MARKER: 200
+WOE_RL_FIREDANCE: 200
+WOE_RL_H_MINE: 200
+WOE_RL_P_ALTER: 200
+WOE_RL_FALLEN_ANGEL: 200
+WOE_RL_R_TRIP: 200
+WOE_RL_D_TAIL: 200
+WOE_RL_FIRE_RAIN: 200
+WOE_RL_HEAT_BARREL: 200
+WOE_RL_AM_BLAST: 200
+WOE_RL_SLUGSHOT: 1000
+WOE_RL_HAMMER_OF_GOD: 200
+WOE_RL_B_FLICKER_ATK: 200
+
+//=================
+// Kagerou & Oboro
+//=================
+WOE_KO_YAMIKUMO: 200
+WOE_KO_JYUMONJIKIRI: 200
+WOE_KO_SETSUDAN: 200
+WOE_KO_BAKURETSU: 200
+WOE_KO_HAPPOKUNAI: 200
+WOE_KO_MUCHANAGE: 200
+WOE_KO_HUUMARANKA: 200
+WOE_KO_MAKIBISHI: 200
+WOE_KO_MEIKYOUSISUI: 200
+WOE_KO_ZANZOU: 200
+WOE_KO_KYOUGAKU: 200
+WOE_KO_JYUSATSU: 200
+WOE_KO_KAHU_ENTEN: 200
+WOE_KO_HYOUHU_HUBUKI: 200
+WOE_KO_KAZEHU_SEIRAN: 200
+WOE_KO_DOHU_KOUKAI: 200
+WOE_KO_KAIHOU: 200
+WOE_KO_ZENKAI: 200
+WOE_KO_GENWAKU: 200
+WOE_KO_IZAYOI: 200
+
+//=================
+// Kagerou
+//=================
+WOE_KG_KAGEHUMI: 200
+WOE_KG_KYOMU: 200
+WOE_KG_KAGEMUSYA: 200
+
+//=================
+// Oboro
+//=================
+WOE_OB_ZANGETSU: 200
+WOE_OB_OBOROGENSOU: 200
+WOE_OB_AKAITSUKI: 200
+
+//=================
+// ALL 3rd JOBS
+//=================
+WOE_ALL_FULL_THROTTLE: 200
+
+//=================
+// Summoner
+//=================
+WOE_SU_BITE: 200
+WOE_SU_SCRATCH: 200
+WOE_SU_STOOP: 200
+WOE_SU_LOPE: 200
+WOE_SU_SPRITEMABLE: 200
+WOE_SU_POWEROFLAND: 200
+WOE_SU_SV_STEMSPEAR: 200
+WOE_SU_CN_POWDERING: 200
+WOE_SU_CN_METEOR: 200
+WOE_SU_SV_ROOTTWIST: 200
+WOE_SU_POWEROFLIFE: 200
+WOE_SU_SCAROFTAROU: 200
+WOE_SU_PICKYPECK: 200
+WOE_SU_ARCLOUSEDASH: 200
+WOE_SU_LUNATICCARROTBEAT: 200
+WOE_SU_POWEROFSEA: 200
+WOE_SU_TUNABELLY: 200
+WOE_SU_TUNAPARTY: 200
+WOE_SU_BUNCHOFSHRIMP: 200
+WOE_SU_FRESHSHRIMP: 200
+WOE_SU_CN_METEOR2: 200
+WOE_SU_LUNATICCARROTBEAT2: 200
+WOE_SU_SOULATTACK: 200
+WOE_SU_POWEROFFLOCK: 200
+WOE_SU_SVG_SPIRIT: 200
+WOE_SU_HISS: 200
+WOE_SU_NYANGGRASS: 200
+WOE_SU_GROOMING: 200
+WOE_SU_PURRING: 200
+WOE_SU_SHRIMPARTY: 200
+WOE_SU_SPIRITOFLIFE: 200
+WOE_SU_MEOWMEOW: 200
+WOE_SU_SPIRITOFLAND: 200
+WOE_SU_CHATTERING: 200
+WOE_SU_SPIRITOFSEA: 200
+
+//=================
+// Dragon Knight
+//=================
+WOE_DK_SERVANTWEAPON: 200
+WOE_DK_SERVANT_W_SIGN: 200
+WOE_DK_SERVANT_W_PHANTOM: 200
+WOE_DK_SERVANT_W_DEMOL: 200
+WOE_DK_CHARGINGPIERCE: 200
+WOE_DK_HACKANDSLASHER: 200
+WOE_DK_DRAGONIC_AURA: 200
+WOE_DK_MADNESS_CRUSHER: 200
+WOE_DK_VIGOR: 200
+WOE_DK_STORMSLASH: 200
+
+//=================
+// Arch Mage
+//=================
+WOE_AG_DEADLY_PROJECTION: 200
+WOE_AG_DESTRUCTIVE_HURRICANE: 200
+WOE_AG_RAIN_OF_CRYSTAL: 200
+WOE_AG_MYSTERY_ILLUSION: 200
+WOE_AG_VIOLENT_QUAKE: 200
+WOE_AG_SOUL_VC_STRIKE: 200
+WOE_AG_STRANTUM_TREMOR: 200
+WOE_AG_ALL_BLOOM: 200
+WOE_AG_CRYSTAL_IMPACT: 200
+WOE_AG_TORNADO_STORM: 200
+WOE_AG_FLORAL_FLARE_ROAD: 200
+WOE_AG_ASTRAL_STRIKE: 200
+WOE_AG_CLIMAX: 200
+WOE_AG_ROCK_DOWN: 200
+WOE_AG_STORM_CANNON: 200
+WOE_AG_CRIMSON_ARROW: 200
+WOE_AG_FROZEN_SLASH: 200
+
+//=================
+// Inquisitor
+//=================
+WOE_IQ_POWERFUL_FAITH: 200
+WOE_IQ_FIRM_FAITH: 200
+WOE_IQ_WILL_OF_FAITH: 200
+WOE_IQ_OLEUM_SANCTUM: 200
+WOE_IQ_SINCERE_FAITH: 200
+WOE_IQ_MASSIVE_F_BLASTER: 200
+WOE_IQ_EXPOSION_BLASTER: 200
+WOE_IQ_FIRST_BRAND: 200
+WOE_IQ_FIRST_FAITH_POWER: 200
+WOE_IQ_JUDGE: 200
+WOE_IQ_SECOND_FLAME: 200
+WOE_IQ_SECOND_FAITH: 200
+WOE_IQ_SECOND_JUDGEMENT: 200
+WOE_IQ_THIRD_PUNISH: 200
+WOE_IQ_THIRD_FLAME_BOMB: 200
+WOE_IQ_THIRD_CONSECRATION: 200
+WOE_IQ_THIRD_EXOR_FLAME: 200
+
+//=================
+// Imperial Guard
+//=================
+WOE_IG_GUARD_STANCE: 200
+WOE_IG_GUARDIAN_SHIELD: 200
+WOE_IG_REBOUND_SHIELD: 200
+WOE_IG_ATTACK_STANCE: 200
+WOE_IG_ULTIMATE_SACRIFICE: 200
+WOE_IG_HOLY_SHIELD: 200
+WOE_IG_GRAND_JUDGEMENT: 200
+WOE_IG_JUDGEMENT_CROSS: 200
+WOE_IG_SHIELD_SHOOTING: 200
+WOE_IG_OVERSLASH: 200
+WOE_IG_CROSS_RAIN: 200
+
+//=================
+// Cardinal
+//=================
+WOE_CD_REPARATIO: 200
+WOE_CD_MEDIALE_VOTUM: 200
+WOE_CD_ARGUTUS_VITA: 200
+WOE_CD_ARGUTUS_TELUM: 200
+WOE_CD_ARBITRIUM: 200
+WOE_CD_PRESENS_ACIES: 200
+WOE_CD_EFFLIGO: 200
+WOE_CD_COMPETENTIA: 200
+WOE_CD_PNEUMATICUS_PROCELLA: 200
+WOE_CD_DILECTIO_HEAL: 200
+WOE_CD_RELIGIO: 200
+WOE_CD_BENEDICTUM: 200
+WOE_CD_PETITIO: 200
+WOE_CD_FRAMEN: 200
+
+//=================
+// Shadow Cross
+//=================
+WOE_SHC_SHADOW_EXCEED: 200
+WOE_SHC_DANCING_KNIFE: 200
+WOE_SHC_SAVAGE_IMPACT: 200
+WOE_SHC_ETERNAL_SLASH: 200
+WOE_SHC_POTENT_VENOM: 200
+WOE_SHC_SHADOW_STAB: 200
+WOE_SHC_IMPACT_CRATER: 200
+WOE_SHC_ENCHANTING_SHADOW: 200
+WOE_SHC_FATAL_SHADOW_CROW: 200
+
+//=================
+// Meister
+//=================
+WOE_MT_AXE_STOMP: 200
+WOE_MT_RUSH_QUAKE: 200
+WOE_MT_M_MACHINE: 200
+WOE_MT_A_MACHINE: 200
+WOE_MT_D_MACHINE: 200
+WOE_MT_TWOAXEDEF: 200
+WOE_MT_ABR_M: 200
+WOE_MT_SUMMON_ABR_BATTLE_WARIOR: 200
+WOE_MT_SUMMON_ABR_DUAL_CANNON: 200
+WOE_MT_SUMMON_ABR_MOTHER_NET: 200
+WOE_MT_SUMMON_ABR_INFINITY: 200
+WOE_AG_DESTRUCTIVE_HURRICANE_CLIMAX: 200
+
+//=================
+// Abyss Chaser
+//=================
+WOE_ABC_STRIP_SHADOW: 200
+WOE_ABC_ABYSS_DAGGER: 200
+WOE_ABC_UNLUCKY_RUSH: 200
+WOE_ABC_CHAIN_REACTION_SHOT: 200
+WOE_ABC_FROM_THE_ABYSS: 200
+WOE_ABC_ABYSS_SLAYER: 200
+WOE_ABC_ABYSS_STRIKE: 200
+WOE_ABC_DEFT_STAB: 200
+WOE_ABC_ABYSS_SQUARE: 200
+WOE_ABC_FRENZY_SHOT: 200
+
+//=================
+// Wind Hawk
+//=================
+WOE_WH_NATUREFRIENDLY: 200
+WOE_WH_HAWKRUSH: 200
+WOE_WH_HAWKBOOMERANG: 200
+WOE_WH_GALESTORM: 200
+WOE_WH_DEEPBLINDTRAP: 200
+WOE_WH_SOLIDTRAP: 200
+WOE_WH_SWIFTTRAP: 200
+WOE_WH_CRESCIVE_BOLT: 200
+WOE_WH_FLAMETRAP: 200
+
+//=================
+// Biolo
+//=================
+WOE_BO_ACIDIFIED_ZONE_WATER: 200
+WOE_BO_ACIDIFIED_ZONE_GROUND: 200
+WOE_BO_ACIDIFIED_ZONE_WIND: 200
+WOE_BO_ACIDIFIED_ZONE_FIRE: 200
+WOE_BO_WOODEN_THROWROCK: 200
+WOE_BO_WOODEN_ATTACK: 200
+WOE_BO_HELL_HOWLING: 200
+WOE_BO_HELL_DUSTY: 200
+WOE_BO_FAIRY_DUSTY: 200
+
+//=====================
+// Troubadour Trouvere
+//=====================
+WOE_TR_STAGE_MANNER: 200
+WOE_TR_ROSEBLOSSOM: 200
+WOE_TR_RHYTHMSHOOTING: 200
+WOE_TR_METALIC_FURY: 200
+
+//=====================
+// Elemental Master
+//=====================
+WOE_EM_DIAMOND_STORM: 200
+WOE_EM_LIGHTNING_LAND: 200
+WOE_EM_VENOM_SWAMP: 200
+WOE_EM_CONFLAGRATION: 200
+WOE_EM_TERRA_DRIVE: 200
+WOE_EM_ELEMENTAL_BUSTER: 200
+WOE_EM_ELEMENTAL_BUSTER_FIRE: 200
+WOE_EM_ELEMENTAL_BUSTER_WATER: 200
+WOE_EM_ELEMENTAL_BUSTER_WIND: 200
+WOE_EM_ELEMENTAL_BUSTER_GROUND: 200
+WOE_EM_ELEMENTAL_BUSTER_POISON: 200
Index: src/custom/battle_config_init.inc
===================================================================
--- src/custom/battle_config_init.inc	(revision 8)
+++ src/custom/battle_config_init.inc	(working copy)
@@ -11,3 +11,1282 @@
  *	 { "name", &battle_config.<variable name>, <default value>, <minimum value>, <maximum value> },
  **/
 
+
+
+/** [keitenai] Spam Hack Protection Settings **/
+	{ "KEITENAI_DELAY_SYSTEM",				&battle_config.KEITENAI_DELAY_SYSTEM,			1,		0,		1,				},
+	{ "PACKET_FLOOD_SENSITIVITY",			&battle_config.MAX_PACKET_COUNTER,				1,		0,		INT_MAX,		},
+	{ "K_DEFAULT",							&battle_config.kd_DEFAULT,						150,	100,	300000,			},
+	{ "SM_BASH",							&battle_config.kd_SM_BASH,						150,	100,	300000,			},
+	{ "SM_MAGNUM",							&battle_config.kd_SM_MAGNUM,					150,	100,	300000,			},
+	{ "MG_NAPALMBEAT",						&battle_config.kd_MG_NAPALMBEAT,				150,	100,	300000,			},
+	{ "MG_SOULSTRIKE",						&battle_config.kd_MG_SOULSTRIKE,				150,	100,	300000,			},
+	{ "MG_COLDBOLT",						&battle_config.kd_MG_COLDBOLT,					150,	100,	300000,			},
+	{ "MG_FROSTDIVER",						&battle_config.kd_MG_FROSTDIVER,				150,	100,	300000,			},
+	{ "MG_STONECURSE",						&battle_config.kd_MG_STONECURSE,				150,	100,	300000,			},
+	{ "MG_FIREBALL",						&battle_config.kd_MG_FIREBALL,					150,	100,	300000,			},
+	{ "MG_FIREWALL",						&battle_config.kd_MG_FIREWALL,					150,	100,	300000,			},
+	{ "MG_FIREBOLT",						&battle_config.kd_MG_FIREBOLT,					150,	100,	300000,			},
+	{ "MG_LIGHTNINGBOLT",					&battle_config.kd_MG_LIGHTNINGBOLT,				150,	100,	300000,			},
+	{ "MG_THUNDERSTORM",					&battle_config.kd_MG_THUNDERSTORM,				150,	100,	300000,			},
+	{ "AL_HEAL",							&battle_config.kd_AL_HEAL,						150,	100,	300000,			},
+	{ "AL_DECAGI",							&battle_config.kd_AL_DECAGI,					150,	100,	300000,			},
+	{ "AL_CRUCIS",							&battle_config.kd_AL_CRUCIS,					150,	100,	300000,			},
+	{ "MC_MAMMONITE",						&battle_config.kd_MC_MAMMONITE,					150,	100,	300000,			},
+	{ "AC_DOUBLE",							&battle_config.kd_AC_DOUBLE,					150,	100,	300000,			},
+	{ "AC_SHOWER",							&battle_config.kd_AC_SHOWER,					150,	100,	300000,			},
+	{ "TF_POISON",							&battle_config.kd_TF_POISON,					150,	100,	300000,			},
+	{ "KN_PIERCE",							&battle_config.kd_KN_PIERCE,					150,	100,	300000,			},
+	{ "KN_BRANDISHSPEAR",					&battle_config.kd_KN_BRANDISHSPEAR,				150,	100,	300000,			},
+	{ "KN_SPEARSTAB",						&battle_config.kd_KN_SPEARSTAB,					150,	100,	300000,			},
+	{ "KN_SPEARBOOMERANG",					&battle_config.kd_KN_SPEARBOOMERANG,			150,	100,	300000,			},
+	{ "KN_BOWLINGBASH",						&battle_config.kd_KN_BOWLINGBASH,				150,	100,	300000,			},
+	{ "PR_LEXDIVINA",						&battle_config.kd_PR_LEXDIVINA,					150,	100,	300000,			},
+	{ "PR_TURNUNDEAD",						&battle_config.kd_PR_TURNUNDEAD,				150,	100,	300000,			},
+	{ "PR_LEXAETERNA",						&battle_config.kd_PR_LEXAETERNA,				150,	100,	300000,			},
+	{ "PR_MAGNUS",							&battle_config.kd_PR_MAGNUS,					150,	100,	300000,			},
+	{ "WZ_FIREPILLAR",						&battle_config.kd_WZ_FIREPILLAR,				150,	100,	300000,			},
+	{ "WZ_SIGHTRASHER",						&battle_config.kd_WZ_SIGHTRASHER,				150,	100,	300000,			},
+	{ "WZ_FIREIVY",							&battle_config.kd_WZ_FIREIVY,					150,	100,	300000,			},
+	{ "WZ_METEOR",							&battle_config.kd_WZ_METEOR,					150,	100,	300000,			},
+	{ "WZ_JUPITEL",							&battle_config.kd_WZ_JUPITEL,					150,	100,	300000,			},
+	{ "WZ_VERMILION",						&battle_config.kd_WZ_VERMILION,					150,	100,	300000,			},
+	{ "WZ_WATERBALL",						&battle_config.kd_WZ_WATERBALL,					150,	100,	300000,			},
+	{ "WZ_ICEWALL",							&battle_config.kd_WZ_ICEWALL,					150,	100,	300000,			},
+	{ "WZ_FROSTNOVA",						&battle_config.kd_WZ_FROSTNOVA,					150,	100,	300000,			},
+	{ "WZ_STORMGUST",						&battle_config.kd_WZ_STORMGUST,					150,	100,	300000,			},
+	{ "WZ_EARTHSPIKE",						&battle_config.kd_WZ_EARTHSPIKE,				150,	100,	300000,			},
+	{ "WZ_HEAVENDRIVE",						&battle_config.kd_WZ_HEAVENDRIVE,				150,	100,	300000,			},
+	{ "WZ_QUAGMIRE",						&battle_config.kd_WZ_QUAGMIRE,					150,	100,	300000,			},
+	{ "WZ_ESTIMATION",						&battle_config.kd_WZ_ESTIMATION,				150,	100,	300000,			},
+	{ "BS_HAMMERFALL",						&battle_config.kd_BS_HAMMERFALL,				150,	100,	300000,			},
+	{ "HT_BLITZBEAT",						&battle_config.kd_HT_BLITZBEAT,					150,	100,	300000,			},
+	{ "AS_SONICBLOW",						&battle_config.kd_AS_SONICBLOW,					150,	100,	300000,			},
+	{ "AS_GRIMTOOTH",						&battle_config.kd_AS_GRIMTOOTH,					150,	100,	300000,			},
+	{ "AC_CHARGEARROW",						&battle_config.kd_AC_CHARGEARROW,				150,	100,	300000,			},
+	{ "TF_BACKSLIDING",						&battle_config.kd_TF_BACKSLIDING,				150,	100,	300000,			},
+	{ "MC_CARTREVOLUTION",					&battle_config.kd_MC_CARTREVOLUTION,			150,	100,	300000,			},
+	{ "AL_HOLYLIGHT",						&battle_config.kd_AL_HOLYLIGHT,					150,	100,	300000,			},
+	{ "RG_BACKSTAP",						&battle_config.kd_RG_BACKSTAP,					150,	100,	300000,			},
+	{ "RG_RAID",							&battle_config.kd_RG_RAID,						150,	100,	300000,			},
+	{ "RG_GRAFFITI",						&battle_config.kd_RG_GRAFFITI,					150,	100,	300000,			},
+	{ "RG_FLAGGRAFFITI",					&battle_config.kd_RG_FLAGGRAFFITI,				150,	100,	300000,			},
+	{ "RG_COMPULSION",						&battle_config.kd_RG_COMPULSION,				150,	100,	300000,			},
+	{ "RG_PLAGIARISM",						&battle_config.kd_RG_PLAGIARISM,				150,	100,	300000,			},
+	{ "AM_DEMONSTRATION",					&battle_config.kd_AM_DEMONSTRATION,				150,	100,	300000,			},
+	{ "AM_ACIDTERROR",						&battle_config.kd_AM_ACIDTERROR,				150,	100,	300000,			},
+	{ "AM_POTIONPITCHER",					&battle_config.kd_AM_POTIONPITCHER,				150,	100,	300000,			},
+	{ "AM_CANNIBALIZE",						&battle_config.kd_AM_CANNIBALIZE,				150,	100,	300000,			},
+	{ "AM_SPHEREMINE",						&battle_config.kd_AM_SPHEREMINE,				150,	100,	300000,			},
+	{ "AM_FLAMECONTROL",					&battle_config.kd_AM_FLAMECONTROL,				150,	100,	300000,			},
+	{ "AM_DRILLMASTER",						&battle_config.kd_AM_DRILLMASTER,				150,	100,	300000,			},
+	{ "CR_SHIELDBOOMERANG",					&battle_config.kd_CR_SHIELDBOOMERANG,			150,	100,	300000,			},
+	{ "CR_HOLYCROSS",						&battle_config.kd_CR_HOLYCROSS,					150,	100,	300000,			},
+	{ "CR_GRANDCROSS",						&battle_config.kd_CR_GRANDCROSS,				150,	100,	300000,			},
+	{ "MO_CALLSPIRITS",						&battle_config.kd_MO_CALLSPIRITS,				150,	100,	300000,			},
+	{ "MO_ABSORBSPIRITS",					&battle_config.kd_MO_ABSORBSPIRITS,				150,	100,	300000,			},
+	{ "MO_BODYRELOCATION",					&battle_config.kd_MO_BODYRELOCATION,			150,	100,	300000,			},
+	{ "MO_INVESTIGATE",						&battle_config.kd_MO_INVESTIGATE,				150,	100,	300000,			},
+	{ "MO_FINGEROFFENSIVE",					&battle_config.kd_MO_FINGEROFFENSIVE,			150,	100,	300000,			},
+	{ "MO_EXPLOSIONSPIRITS",				&battle_config.kd_MO_EXPLOSIONSPIRITS,			150,	100,	300000,			},
+	{ "MO_EXTREMITYFIST",					&battle_config.kd_MO_EXTREMITYFIST,				150,	100,	300000,			},
+	{ "MO_CHAINCOMBO",						&battle_config.kd_MO_CHAINCOMBO,				150,	100,	300000,			},
+	{ "MO_COMBOFINISH",						&battle_config.kd_MO_COMBOFINISH,				150,	100,	300000,			},
+	{ "SA_CASTCANCEL",						&battle_config.kd_SA_CASTCANCEL,				150,	100,	300000,			},
+	{ "SA_SPELLBREAKER",					&battle_config.kd_SA_SPELLBREAKER,				150,	100,	300000,			},
+	{ "SA_DISPELL",							&battle_config.kd_SA_DISPELL,					150,	100,	300000,			},
+	{ "SA_ABRACADABRA",						&battle_config.kd_SA_ABRACADABRA,				150,	100,	300000,			},
+	{ "SA_MONOCELL",						&battle_config.kd_SA_MONOCELL,					150,	100,	300000,			},
+	{ "SA_CLASSCHANGE",						&battle_config.kd_SA_CLASSCHANGE,				150,	100,	300000,			},
+	{ "SA_SUMMONMONSTER",					&battle_config.kd_SA_SUMMONMONSTER,				150,	100,	300000,			},
+	{ "SA_REVERSEORCISH",					&battle_config.kd_SA_REVERSEORCISH,				150,	100,	300000,			},
+	{ "SA_DEATH",							&battle_config.kd_SA_DEATH,						150,	100,	300000,			},
+	{ "SA_FORTUNE",							&battle_config.kd_SA_FORTUNE,					150,	100,	300000,			},
+	{ "SA_TAMINGMONSTER",					&battle_config.kd_SA_TAMINGMONSTER,				150,	100,	300000,			},
+	{ "SA_QUESTION",						&battle_config.kd_SA_QUESTION,					150,	100,	300000,			},
+	{ "SA_GRAVITY",							&battle_config.kd_SA_GRAVITY,					150,	100,	300000,			},
+	{ "SA_LEVELUP",							&battle_config.kd_SA_LEVELUP,					150,	100,	300000,			},
+	{ "SA_INSTANTDEATH",					&battle_config.kd_SA_INSTANTDEATH,				150,	100,	300000,			},
+	{ "SA_FULLRECOVERY",					&battle_config.kd_SA_FULLRECOVERY,				150,	100,	300000,			},
+	{ "SA_COMA",							&battle_config.kd_SA_COMA,						150,	100,	300000,			},
+	{ "BD_ADAPTATION",						&battle_config.kd_BD_ADAPTATION,				150,	100,	300000,			},
+	{ "BD_ENCORE",							&battle_config.kd_BD_ENCORE,					150,	100,	300000,			},
+	{ "BD_LULLABY",							&battle_config.kd_BD_LULLABY,					150,	100,	300000,			},
+	{ "BD_RICHMANKIM",						&battle_config.kd_BD_RICHMANKIM,				150,	100,	300000,			},
+	{ "BA_MUSICALSTRIKE",					&battle_config.kd_BA_MUSICALSTRIKE,				150,	100,	300000,			},
+	{ "BA_DISSONANCE",						&battle_config.kd_BA_DISSONANCE,				150,	100,	300000,			},
+	{ "BA_FROSTJOKER",						&battle_config.kd_BA_FROSTJOKER,				150,	100,	300000,			},
+	{ "BA_WHISTLE",							&battle_config.kd_BA_WHISTLE,					150,	100,	300000,			},
+	{ "BA_ASSASSINCROSS",					&battle_config.kd_BA_ASSASSINCROSS,				150,	100,	300000,			},
+	{ "BA_POEMBRAGI",						&battle_config.kd_BA_POEMBRAGI,					150,	100,	300000,			},
+	{ "BA_APPLEIDUN",						&battle_config.kd_BA_APPLEIDUN,					150,	100,	300000,			},
+	{ "DC_THROWARROW",						&battle_config.kd_DC_THROWARROW,				150,	100,	300000,			},
+	{ "DC_UGLYDANCE",						&battle_config.kd_DC_UGLYDANCE,					150,	100,	300000,			},
+	{ "DC_SCREAM",							&battle_config.kd_DC_SCREAM,					150,	100,	300000,			},
+	{ "DC_HUMMING",							&battle_config.kd_DC_HUMMING,					150,	100,	300000,			},
+	{ "DC_DONTFORGETME",					&battle_config.kd_DC_DONTFORGETME,				150,	100,	300000,			},
+	{ "DC_FORTUNEKISS",						&battle_config.kd_DC_FORTUNEKISS,				150,	100,	300000,			},
+	{ "DC_SERVICEFORYOU",					&battle_config.kd_DC_SERVICEFORYOU,				150,	100,	300000,			},
+	{ "LK_FURY",							&battle_config.kd_LK_FURY,						150,	100,	300000,			},
+	{ "HW_MAGICCRASHER",					&battle_config.kd_HW_MAGICCRASHER,				150,	100,	300000,			},
+	{ "PA_PRESSURE",						&battle_config.kd_PA_PRESSURE,					150,	100,	300000,			},
+	{ "CH_PALMSTRIKE",						&battle_config.kd_CH_PALMSTRIKE,				150,	100,	300000,			},
+	{ "CH_TIGERFIST",						&battle_config.kd_CH_TIGERFIST,					150,	100,	300000,			},
+	{ "CH_CHAINCRUSH",						&battle_config.kd_CH_CHAINCRUSH,				150,	100,	300000,			},
+	{ "PF_SOULCHANGE",						&battle_config.kd_PF_SOULCHANGE,				150,	100,	300000,			},
+	{ "PF_SOULBURN",						&battle_config.kd_PF_SOULBURN,					150,	100,	300000,			},
+	{ "ASC_BREAKER",						&battle_config.kd_ASC_BREAKER,					150,	100,	300000,			},
+	{ "SN_FALCONASSAULT",					&battle_config.kd_SN_FALCONASSAULT,				150,	100,	300000,			},
+	{ "SN_SHARPSHOOTING",					&battle_config.kd_SN_SHARPSHOOTING,				150,	100,	300000,			},
+	{ "CR_ALCHEMY",							&battle_config.kd_CR_ALCHEMY,					150,	100,	300000,			},
+	{ "CR_SYNTHESISPOTION",					&battle_config.kd_CR_SYNTHESISPOTION,			150,	100,	300000,			},
+	{ "CG_ARROWVULCAN",						&battle_config.kd_CG_ARROWVULCAN,				150,	100,	300000,			},
+	{ "CG_MOONLIT",							&battle_config.kd_CG_MOONLIT,					150,	100,	300000,			},
+	{ "CG_MARIONETTE",						&battle_config.kd_CG_MARIONETTE,				150,	100,	300000,			},
+	{ "LK_SPIRALPIERCE",					&battle_config.kd_LK_SPIRALPIERCE,				150,	100,	300000,			},
+	{ "LK_HEADCRUSH",						&battle_config.kd_LK_HEADCRUSH,					150,	100,	300000,			},
+	{ "LK_JOINTBEAT",						&battle_config.kd_LK_JOINTBEAT,					150,	100,	300000,			},
+	{ "HW_NAPALMVULCAN",					&battle_config.kd_HW_NAPALMVULCAN,				150,	100,	300000,			},
+	{ "CH_SOULCOLLECT",						&battle_config.kd_CH_SOULCOLLECT,				150,	100,	300000,			},
+	{ "PF_MINDBREAKER",						&battle_config.kd_PF_MINDBREAKER,				150,	100,	300000,			},
+	{ "PF_SPIDERWEB",						&battle_config.kd_PF_SPIDERWEB,					150,	100,	300000,			},
+	{ "ASC_METEORASSAULT",					&battle_config.kd_ASC_METEORASSAULT,			150,	100,	300000,			},
+	{ "TK_STORMKICK",						&battle_config.kd_TK_STORMKICK,					150,	100,	300000,			},
+	{ "TK_DOWNKICK",						&battle_config.kd_TK_DOWNKICK,					150,	100,	300000,			},
+	{ "TK_TURNKICK",						&battle_config.kd_TK_TURNKICK,					150,	100,	300000,			},
+	{ "TK_JUMPKICK",						&battle_config.kd_TK_JUMPKICK,					150,	100,	300000,			},
+	{ "TK_POWER",							&battle_config.kd_TK_POWER,						150,	100,	300000,			},
+	{ "TK_HIGHJUMP",						&battle_config.kd_TK_HIGHJUMP,					150,	100,	300000,			},
+	{ "SL_KAIZEL",							&battle_config.kd_SL_KAIZEL,					150,	100,	300000,			},
+	{ "SL_KAAHI",							&battle_config.kd_SL_KAAHI,						150,	100,	300000,			},
+	{ "SL_KAUPE",							&battle_config.kd_SL_KAUPE,						150,	100,	300000,			},
+	{ "SL_KAITE",							&battle_config.kd_SL_KAITE,						150,	100,	300000,			},
+	{ "SL_KAINA",							&battle_config.kd_SL_KAINA,						150,	100,	300000,			},
+	{ "SL_STIN",							&battle_config.kd_SL_STIN,						150,	100,	300000,			},
+	{ "SL_STUN",							&battle_config.kd_SL_STUN,						150,	100,	300000,			},
+	{ "SL_SMA",								&battle_config.kd_SL_SMA,						150,	100,	300000,			},
+	{ "SL_SWOO",							&battle_config.kd_SL_SWOO,						150,	100,	300000,			},
+	{ "SL_SKE",								&battle_config.kd_SL_SKE,						150,	100,	300000,			},
+	{ "SL_SKA",								&battle_config.kd_SL_SKA,						150,	100,	300000,			},
+	{ "ST_FULLSTRIP",						&battle_config.kd_ST_FULLSTRIP,					150,	100,	300000,			},
+	{ "CR_SLIMPITCHER",						&battle_config.kd_CR_SLIMPITCHER,				150,	100,	300000,			},
+	{ "CR_FULLPROTECTION",					&battle_config.kd_CR_FULLPROTECTION,			150,	100,	300000,			},
+	{ "PA_SHIELDCHAIN",						&battle_config.kd_PA_SHIELDCHAIN,				150,	100,	300000,			},
+	{ "HP_MANARECHARGE",					&battle_config.kd_HP_MANARECHARGE,				150,	100,	300000,			},
+	{ "PF_DOUBLECASTING",					&battle_config.kd_PF_DOUBLECASTING,				150,	100,	300000,			},
+	{ "HW_GANBANTEIN",						&battle_config.kd_HW_GANBANTEIN,				150,	100,	300000,			},
+	{ "HW_GRAVITATION",						&battle_config.kd_HW_GRAVITATION,				150,	100,	300000,			},
+	{ "WS_CARTTERMINATION",					&battle_config.kd_WS_CARTTERMINATION,			150,	100,	300000,			},
+	{ "CG_HERMODE",							&battle_config.kd_CG_HERMODE,					150,	100,	300000,			},
+	{ "CG_TAROTCARD",						&battle_config.kd_CG_TAROTCARD,					150,	100,	300000,			},
+	{ "CR_ACIDDEMONSTRATION",				&battle_config.kd_CR_ACIDDEMONSTRATION,			150,	100,	300000,			},
+	{ "SL_HIGH",							&battle_config.kd_SL_HIGH,						150,	100,	300000,			},
+	{ "GS_TRIPLEACTION",					&battle_config.kd_GS_TRIPLEACTION,				150,	100,	300000,			},
+	{ "GS_BULLSEYE",						&battle_config.kd_GS_BULLSEYE,					150,	100,	300000,			},
+	{ "GS_MADNESSCANCEL",					&battle_config.kd_GS_MADNESSCANCEL,				150,	100,	300000,			},
+	{ "GS_INCREASING",						&battle_config.kd_GS_INCREASING,				150,	100,	300000,			},
+	{ "GS_MAGICALBULLET",					&battle_config.kd_GS_MAGICALBULLET,				150,	100,	300000,			},
+	{ "GS_CRACKER",							&battle_config.kd_GS_CRACKER,					150,	100,	300000,			},
+	{ "GS_SINGLEACTION",					&battle_config.kd_GS_SINGLEACTION,				150,	100,	300000,			},
+	{ "GS_CHAINACTION",						&battle_config.kd_GS_CHAINACTION,				150,	100,	300000,			},
+	{ "GS_TRACKING",						&battle_config.kd_GS_TRACKING,					150,	100,	300000,			},
+	{ "GS_DISARM",							&battle_config.kd_GS_DISARM,					150,	100,	300000,			},
+	{ "GS_PIERCINGSHOT",					&battle_config.kd_GS_PIERCINGSHOT,				150,	100,	300000,			},
+	{ "GS_RAPIDSHOWER",						&battle_config.kd_GS_RAPIDSHOWER,				150,	100,	300000,			},
+	{ "GS_DESPERADO",						&battle_config.kd_GS_DESPERADO,					150,	100,	300000,			},
+	{ "GS_GATLINGFEVER",					&battle_config.kd_GS_GATLINGFEVER,				150,	100,	300000,			},
+	{ "GS_DUST",							&battle_config.kd_GS_DUST,						150,	100,	300000,			},
+	{ "GS_FULLBUSTER",						&battle_config.kd_GS_FULLBUSTER,				150,	100,	300000,			},
+	{ "GS_SPREADATTACK",					&battle_config.kd_GS_SPREADATTACK,				150,	100,	300000,			},
+	{ "GS_GROUNDDRIFT",						&battle_config.kd_GS_GROUNDDRIFT,				150,	100,	300000,			},
+	{ "NJ_TOBIDOUGU",						&battle_config.kd_NJ_TOBIDOUGU,					150,	100,	300000,			},
+	{ "NJ_SYURIKEN",						&battle_config.kd_NJ_SYURIKEN,					150,	100,	300000,			},
+	{ "NJ_KUNAI",							&battle_config.kd_NJ_KUNAI,						150,	100,	300000,			},
+	{ "NJ_HUUMA",							&battle_config.kd_NJ_HUUMA,						150,	100,	300000,			},
+	{ "NJ_ZENYNAGE",						&battle_config.kd_NJ_ZENYNAGE,					150,	100,	300000,			},
+	{ "NJ_TATAMIGAESHI",					&battle_config.kd_NJ_TATAMIGAESHI,				150,	100,	300000,			},
+	{ "NJ_KASUMIKIRI",						&battle_config.kd_NJ_KASUMIKIRI,				150,	100,	300000,			},
+	{ "NJ_SHADOWJUMP",						&battle_config.kd_NJ_SHADOWJUMP,				150,	100,	300000,			},
+	{ "NJ_KIRIKAGE",						&battle_config.kd_NJ_KIRIKAGE,					150,	100,	300000,			},
+	{ "NJ_UTSUSEMI",						&battle_config.kd_NJ_UTSUSEMI,					150,	100,	300000,			},
+	{ "NJ_BUNSINJYUTSU",					&battle_config.kd_NJ_BUNSINJYUTSU,				150,	100,	300000,			},
+	{ "NJ_NINPOU",							&battle_config.kd_NJ_NINPOU,					150,	100,	300000,			},
+	{ "NJ_KOUENKA",							&battle_config.kd_NJ_KOUENKA,					150,	100,	300000,			},
+	{ "NJ_KAENSIN",							&battle_config.kd_NJ_KAENSIN,					150,	100,	300000,			},
+	{ "NJ_BAKUENRYU",						&battle_config.kd_NJ_BAKUENRYU,					150,	100,	300000,			},
+	{ "NJ_HYOUSENSOU",						&battle_config.kd_NJ_HYOUSENSOU,				150,	100,	300000,			},
+	{ "NJ_SUITON",							&battle_config.kd_NJ_SUITON,					150,	100,	300000,			},
+	{ "NJ_HYOUSYOURAKU",					&battle_config.kd_NJ_HYOUSYOURAKU,				150,	100,	300000,			},
+	{ "NJ_HUUJIN",							&battle_config.kd_NJ_HUUJIN,					150,	100,	300000,			},
+	{ "NJ_RAIGEKISAI",						&battle_config.kd_NJ_RAIGEKISAI,				150,	100,	300000,			},
+	{ "NJ_KAMAITACHI",						&battle_config.kd_NJ_KAMAITACHI,				150,	100,	300000,			},
+	{ "NJ_NEN",								&battle_config.kd_NJ_NEN,						150,	100,	300000,			},
+	{ "NJ_ISSEN",							&battle_config.kd_NJ_ISSEN,						150,	100,	300000,			},
+	{ "KN_CHARGEATK",						&battle_config.kd_KN_CHARGEATK,					150,	100,	300000,			},
+	{ "AS_VENOMKNIFE",						&battle_config.kd_AS_VENOMKNIFE,				150,	100,	300000,			},
+	{ "RG_CLOSECONFINE",					&battle_config.kd_RG_CLOSECONFINE,				150,	100,	300000,			},
+	{ "WZ_SIGHTBLASTER",					&battle_config.kd_WZ_SIGHTBLASTER,				150,	100,	300000,			},
+	{ "HT_PHANTASMIC",						&battle_config.kd_HT_PHANTASMIC,				150,	100,	300000,			},
+	{ "BA_PANGVOICE",						&battle_config.kd_BA_PANGVOICE,					150,	100,	300000,			},
+	{ "DC_WINKCHARM",						&battle_config.kd_DC_WINKCHARM,					150,	100,	300000,			},
+	{ "PR_REDEMPTIO",						&battle_config.kd_PR_REDEMPTIO,					150,	100,	300000,			},
+	{ "MO_KITRANSLATION",					&battle_config.kd_MO_KITRANSLATION,				150,	100,	300000,			},
+	{ "MO_BALKYOUNG",						&battle_config.kd_MO_BALKYOUNG,					150,	100,	300000,			},
+	{ "RK_SONICWAVE",						&battle_config.kd_RK_SONICWAVE,					150,	100,	300000,			},
+	{ "RK_DEATHBOUND",						&battle_config.kd_RK_DEATHBOUND,				150,	100,	300000,			},
+	{ "RK_HUNDREDSPEAR",					&battle_config.kd_RK_HUNDREDSPEAR,				150,	100,	300000,			},
+	{ "RK_WINDCUTTER",						&battle_config.kd_RK_WINDCUTTER,				150,	100,	300000,			},
+	{ "RK_IGNITIONBREAK",					&battle_config.kd_RK_IGNITIONBREAK,				150,	100,	300000,			},
+	{ "RK_DRAGONBREATH",					&battle_config.kd_RK_DRAGONBREATH,				150,	100,	300000,			},
+	{ "RK_CRUSHSTRIKE",						&battle_config.kd_RK_CRUSHSTRIKE,				150,	100,	300000,			},
+	{ "RK_STORMBLAST",						&battle_config.kd_RK_STORMBLAST,				150,	100,	300000,			},
+	{ "RK_PHANTOMTHRUST",					&battle_config.kd_RK_PHANTOMTHRUST,				150,	100,	300000,			},
+	{ "GC_CROSSIMPACT",						&battle_config.kd_GC_CROSSIMPACT,				150,	100,	300000,			},
+	{ "GC_WEAPONCRUSH",						&battle_config.kd_GC_WEAPONCRUSH,				150,	100,	300000,			},
+	{ "GC_ROLLINGCUTTER",					&battle_config.kd_GC_ROLLINGCUTTER,				150,	100,	300000,			},
+	{ "GC_CROSSRIPPERSLASHER",				&battle_config.kd_GC_CROSSRIPPERSLASHER,		150,	100,	300000,			},
+	{ "AB_JUDEX",							&battle_config.kd_AB_JUDEX,						150,	100,	300000,			},
+	{ "AB_ADORAMUS",						&battle_config.kd_AB_ADORAMUS,					150,	100,	300000,			},
+	{ "AB_CHEAL",							&battle_config.kd_AB_CHEAL,						150,	100,	300000,			},
+	{ "AB_EPICLESIS",						&battle_config.kd_AB_EPICLESIS,					150,	100,	300000,			},
+	{ "AB_PRAEFATIO",						&battle_config.kd_AB_PRAEFATIO,					150,	100,	300000,			},
+	{ "AB_EUCHARISTICA",					&battle_config.kd_AB_EUCHARISTICA,				150,	100,	300000,			},
+	{ "AB_RENOVATIO",						&battle_config.kd_AB_RENOVATIO,					150,	100,	300000,			},
+	{ "AB_HIGHNESSHEAL",					&battle_config.kd_AB_HIGHNESSHEAL,				150,	100,	300000,			},
+	{ "AB_CLEARANCE",						&battle_config.kd_AB_CLEARANCE,					150,	100,	300000,			},
+	{ "AB_EXPIATIO",						&battle_config.kd_AB_EXPIATIO,					150,	100,	300000,			},
+	{ "AB_DUPLELIGHT",						&battle_config.kd_AB_DUPLELIGHT,				150,	100,	300000,			},
+	{ "AB_DUPLELIGHT_MELEE",				&battle_config.kd_AB_DUPLELIGHT_MELEE,			150,	100,	300000,			},
+	{ "AB_DUPLELIGHT_MAGIC",				&battle_config.kd_AB_DUPLELIGHT_MAGIC,			150,	100,	300000,			},
+	{ "AB_SILENTIUM",						&battle_config.kd_AB_SILENTIUM,					150,	100,	300000,			},
+	{ "WL_WHITEIMPRISON",					&battle_config.kd_WL_WHITEIMPRISON,				150,	100,	300000,			},
+	{ "WL_SOULEXPANSION",					&battle_config.kd_WL_SOULEXPANSION,				150,	100,	300000,			},
+	{ "WL_FROSTMISTY",						&battle_config.kd_WL_FROSTMISTY,				150,	100,	300000,			},
+	{ "WL_JACKFROST",						&battle_config.kd_WL_JACKFROST,					150,	100,	300000,			},
+	{ "WL_MARSHOFABYSS",					&battle_config.kd_WL_MARSHOFABYSS,				150,	100,	300000,			},
+	{ "WL_RADIUS",							&battle_config.kd_WL_RADIUS,					150,	100,	300000,			},
+	{ "WL_STASIS",							&battle_config.kd_WL_STASIS,					150,	100,	300000,			},
+	{ "WL_DRAINLIFE",						&battle_config.kd_WL_DRAINLIFE,					150,	100,	300000,			},
+	{ "WL_CRIMSONROCK",						&battle_config.kd_WL_CRIMSONROCK,				150,	100,	300000,			},
+	{ "WL_HELLINFERNO",						&battle_config.kd_WL_HELLINFERNO,				150,	100,	300000,			},
+	{ "WL_COMET",							&battle_config.kd_WL_COMET,						150,	100,	300000,			},
+	{ "WL_CHAINLIGHTNING",					&battle_config.kd_WL_CHAINLIGHTNING,			150,	100,	300000,			},
+	{ "WL_EARTHSTRAIN",						&battle_config.kd_WL_EARTHSTRAIN,				150,	100,	300000,			},
+	{ "WL_TETRAVORTEX",						&battle_config.kd_WL_TETRAVORTEX,				150,	100,	300000,			},
+	{ "WL_RELEASE",							&battle_config.kd_WL_RELEASE,					150,	100,	300000,			},
+	{ "WL_READING_SB",						&battle_config.kd_WL_READING_SB,				150,	100,	300000,			},
+	{ "WL_FREEZE_SP",						&battle_config.kd_WL_FREEZE_SP,					150,	100,	300000,			},
+	{ "RA_ARROWSTORM",						&battle_config.kd_RA_ARROWSTORM,				150,	100,	300000,			},
+	{ "RA_AIMEDBOLT",						&battle_config.kd_RA_AIMEDBOLT,					150,	100,	300000,			},
+	{ "RA_WUGSTRIKE",						&battle_config.kd_RA_WUGSTRIKE,					150,	100,	300000,			},
+	{ "RA_WUGBITE",							&battle_config.kd_RA_WUGBITE,					150,	100,	300000,			},
+	{ "NC_BOOSTKNUCKLE",					&battle_config.kd_NC_BOOSTKNUCKLE,				150,	100,	300000,			},
+	{ "NC_PILEBUNKER",						&battle_config.kd_NC_PILEBUNKER,				150,	100,	300000,			},
+	{ "NC_VULCANARM",						&battle_config.kd_NC_VULCANARM,					150,	100,	300000,			},
+	{ "NC_FLAMELAUNCHER",					&battle_config.kd_NC_FLAMELAUNCHER,				150,	100,	300000,			},
+	{ "NC_COLDSLOWER",						&battle_config.kd_NC_COLDSLOWER,				150,	100,	300000,			},
+	{ "NC_ARMSCANNON",						&battle_config.kd_NC_ARMSCANNON,				150,	100,	300000,			},
+	{ "NC_ACCELERATION",					&battle_config.kd_NC_ACCELERATION,				150,	100,	300000,			},
+	{ "NC_F_SIDESLIDE",						&battle_config.kd_NC_F_SIDESLIDE,				150,	100,	300000,			},
+	{ "NC_B_SIDESLIDE",						&battle_config.kd_NC_B_SIDESLIDE,				150,	100,	300000,			},
+	{ "NC_MAINFRAME",						&battle_config.kd_NC_MAINFRAME,					150,	100,	300000,			},
+	{ "NC_SHAPESHIFT",						&battle_config.kd_NC_SHAPESHIFT,				150,	100,	300000,			},
+	{ "NC_INFRAREDSCAN",					&battle_config.kd_NC_INFRAREDSCAN,				150,	100,	300000,			},
+	{ "NC_ANALYZE",							&battle_config.kd_NC_ANALYZE,					150,	100,	300000,			},
+	{ "NC_MAGNETICFIELD",					&battle_config.kd_NC_MAGNETICFIELD,				150,	100,	300000,			},
+	{ "NC_NEUTRALBARRIER",					&battle_config.kd_NC_NEUTRALBARRIER,			150,	100,	300000,			},
+	{ "NC_STEALTHFIELD",					&battle_config.kd_NC_STEALTHFIELD,				150,	100,	300000,			},
+	{ "NC_AXEBOOMERANG",					&battle_config.kd_NC_AXEBOOMERANG,				150,	100,	300000,			},
+	{ "NC_POWERSWING",						&battle_config.kd_NC_POWERSWING,				150,	100,	300000,			},
+	{ "NC_AXETORNADO",						&battle_config.kd_NC_AXETORNADO,				150,	100,	300000,			},
+	{ "NC_SILVERSNIPER",					&battle_config.kd_NC_SILVERSNIPER,				150,	100,	300000,			},
+	{ "NC_MAGICDECOY",						&battle_config.kd_NC_MAGICDECOY,				150,	100,	300000,			},
+	{ "NC_DISJOINT",						&battle_config.kd_NC_DISJOINT,					150,	100,	300000,			},
+	{ "SC_FATALMENACE",						&battle_config.kd_SC_FATALMENACE,				150,	100,	300000,			},
+	{ "SC_TRIANGLESHOT",					&battle_config.kd_SC_TRIANGLESHOT,				150,	100,	300000,			},
+	{ "SC_INVISIBILITY",					&battle_config.kd_SC_INVISIBILITY,				150,	100,	300000,			},
+	{ "SC_ENERVATION",						&battle_config.kd_SC_ENERVATION,				150,	100,	300000,			},
+	{ "SC_GROOMY",							&battle_config.kd_SC_GROOMY,					150,	100,	300000,			},
+	{ "SC_IGNORANCE",						&battle_config.kd_SC_IGNORANCE,					150,	100,	300000,			},
+	{ "SC_LAZINESS",						&battle_config.kd_SC_LAZINESS,					150,	100,	300000,			},
+	{ "SC_UNLUCKY",							&battle_config.kd_SC_UNLUCKY,					150,	100,	300000,			},
+	{ "SC_WEAKNESS",						&battle_config.kd_SC_WEAKNESS,					150,	100,	300000,			},
+	{ "SC_STRIPACCESSARY",					&battle_config.kd_SC_STRIPACCESSARY,			150,	100,	300000,			},
+	{ "SC_MANHOLE",							&battle_config.kd_SC_MANHOLE,					150,	100,	300000,			},
+	{ "SC_DIMENSIONDOOR",					&battle_config.kd_SC_DIMENSIONDOOR,				150,	100,	300000,			},
+	{ "SC_CHAOSPANIC",						&battle_config.kd_SC_CHAOSPANIC,				150,	100,	300000,			},
+	{ "SC_MAELSTROM",						&battle_config.kd_SC_MAELSTROM,					150,	100,	300000,			},
+	{ "SC_BLOODYLUST",						&battle_config.kd_SC_BLOODYLUST,				150,	100,	300000,			},
+	{ "SC_FEINTBOMB",						&battle_config.kd_SC_FEINTBOMB,					150,	100,	300000,			},
+	{ "LG_CANNONSPEAR",						&battle_config.kd_LG_CANNONSPEAR,				150,	100,	300000,			},
+	{ "LG_BANISHINGPOINT",					&battle_config.kd_LG_BANISHINGPOINT,			150,	100,	300000,			},
+	{ "LG_TRAMPLE",							&battle_config.kd_LG_TRAMPLE,					150,	100,	300000,			},
+	{ "LG_PINPOINTATTACK",					&battle_config.kd_LG_PINPOINTATTACK,			150,	100,	300000,			},
+	{ "LG_RAGEBURST",						&battle_config.kd_LG_RAGEBURST,					150,	100,	300000,			},
+	{ "LG_EXEEDBREAK",						&battle_config.kd_LG_EXEEDBREAK,				150,	100,	300000,			},
+	{ "LG_OVERBRAND",						&battle_config.kd_LG_OVERBRAND,					150,	100,	300000,			},
+	{ "LG_BANDING",							&battle_config.kd_LG_BANDING,					150,	100,	300000,			},
+	{ "LG_MOONSLASHER",						&battle_config.kd_LG_MOONSLASHER,				150,	100,	300000,			},
+	{ "LG_RAYOFGENESIS",					&battle_config.kd_LG_RAYOFGENESIS,				150,	100,	300000,			},
+	{ "LG_PIETY",							&battle_config.kd_LG_PIETY,						150,	100,	300000,			},
+	{ "LG_EARTHDRIVE",						&battle_config.kd_LG_EARTHDRIVE,				150,	100,	300000,			},
+	{ "LG_HESPERUSLIT",						&battle_config.kd_LG_HESPERUSLIT,				150,	100,	300000,			},
+	{ "SR_DRAGONCOMBO",						&battle_config.kd_SR_DRAGONCOMBO,				150,	100,	300000,			},
+	{ "SR_SKYNETBLOW",						&battle_config.kd_SR_SKYNETBLOW,				150,	100,	300000,			},
+	{ "SR_EARTHSHAKER",						&battle_config.kd_SR_EARTHSHAKER,				150,	100,	300000,			},
+	{ "SR_FALLENEMPIRE",					&battle_config.kd_SR_FALLENEMPIRE,				150,	100,	300000,			},
+	{ "SR_TIGERCANNON",						&battle_config.kd_SR_TIGERCANNON,				150,	100,	300000,			},
+	{ "SR_HELLGATE",						&battle_config.kd_SR_HELLGATE,					150,	100,	300000,			},
+	{ "SR_RAMPAGEBLASTER",					&battle_config.kd_SR_RAMPAGEBLASTER,			150,	100,	300000,			},
+	{ "SR_CRESCENTELBOW",					&battle_config.kd_SR_CRESCENTELBOW,				150,	100,	300000,			},
+	{ "SR_CURSEDCIRCLE",					&battle_config.kd_SR_CURSEDCIRCLE,				150,	100,	300000,			},
+	{ "SR_LIGHTNINGWALK",					&battle_config.kd_SR_LIGHTNINGWALK,				150,	100,	300000,			},
+	{ "SR_KNUCKLEARROW",					&battle_config.kd_SR_KNUCKLEARROW,				150,	100,	300000,			},
+	{ "SR_WINDMILL",						&battle_config.kd_SR_WINDMILL,					150,	100,	300000,			},
+	{ "SR_RAISINGDRAGON",					&battle_config.kd_SR_RAISINGDRAGON,				150,	100,	300000,			},
+	{ "SR_GENTLETOUCH",						&battle_config.kd_SR_GENTLETOUCH,				150,	100,	300000,			},
+	{ "SR_ASSIMILATEPOWER",					&battle_config.kd_SR_ASSIMILATEPOWER,			150,	100,	300000,			},
+	{ "SR_POWERVELOCITY",					&battle_config.kd_SR_POWERVELOCITY,				150,	100,	300000,			},
+	{ "SR_CRESCENTELBOW_AUTOSPELL",			&battle_config.kd_SR_CRESCENTELBOW_AUTOSPELL,	150,	100,	300000,			},
+	{ "SR_GATEOFHELL",						&battle_config.kd_SR_GATEOFHELL,				150,	100,	300000,			},
+	{ "SR_GENTLETOUCH_QUIET",				&battle_config.kd_SR_GENTLETOUCH_QUIET,			150,	100,	300000,			},
+	{ "SR_GENTLETOUCH_CURE",				&battle_config.kd_SR_GENTLETOUCH_CURE,			150,	100,	300000,			},
+	{ "SR_GENTLETOUCH_ENERGYGAIN",			&battle_config.kd_SR_GENTLETOUCH_ENERGYGAIN,	150,	100,	300000,			},
+	{ "SR_GENTLETOUCH_CHANGE",				&battle_config.kd_SR_GENTLETOUCH_CHANGE,		150,	100,	300000,			},
+	{ "SR_GENTLETOUCH_REVITALIZE",			&battle_config.kd_SR_GENTLETOUCH_REVITALIZE,	150,	100,	300000,			},
+	{ "WA_SWING_DANCE",						&battle_config.kd_WA_SWING_DANCE,				150,	100,	300000,			},
+	{ "WA_SYMPHONY_OF_LOVER",				&battle_config.kd_WA_SYMPHONY_OF_LOVER,			150,	100,	300000,			},
+	{ "WA_MOONLIT_SERENADE",				&battle_config.kd_WA_MOONLIT_SERENADE,			150,	100,	300000,			},
+	{ "MI_RUSH_WINDMILL",					&battle_config.kd_MI_RUSH_WINDMILL,				150,	100,	300000,			},
+	{ "MI_ECHOSONG",						&battle_config.kd_MI_ECHOSONG,					150,	100,	300000,			},
+	{ "MI_HARMONIZE",						&battle_config.kd_MI_HARMONIZE,					150,	100,	300000,			},
+	{ "WM_LESSON",							&battle_config.kd_WM_LESSON,					150,	100,	300000,			},
+	{ "WM_METALICSOUND",					&battle_config.kd_WM_METALICSOUND,				150,	100,	300000,			},
+	{ "WM_REVERBERATION",					&battle_config.kd_WM_REVERBERATION,				150,	100,	300000,			},
+	{ "WM_REVERBERATION_MELEE",				&battle_config.kd_WM_REVERBERATION_MELEE,		150,	100,	300000,			},
+	{ "WM_REVERBERATION_MAGIC",				&battle_config.kd_WM_REVERBERATION_MAGIC,		150,	100,	300000,			},
+	{ "WM_DOMINION_IMPULSE",				&battle_config.kd_WM_DOMINION_IMPULSE,			150,	100,	300000,			},
+	{ "WM_SEVERE_RAINSTORM",				&battle_config.kd_WM_SEVERE_RAINSTORM,			150,	100,	300000,			},
+	{ "WM_POEMOFNETHERWORLD",				&battle_config.kd_WM_POEMOFNETHERWORLD,			150,	100,	300000,			},
+	{ "WM_VOICEOFSIREN",					&battle_config.kd_WM_VOICEOFSIREN,				150,	100,	300000,			},
+	{ "WM_DEADHILLHERE",					&battle_config.kd_WM_DEADHILLHERE,				150,	100,	300000,			},
+	{ "WM_LULLABY_DEEPSLEEP",				&battle_config.kd_WM_LULLABY_DEEPSLEEP,			150,	100,	300000,			},
+	{ "WM_SIRCLEOFNATURE",					&battle_config.kd_WM_SIRCLEOFNATURE,			150,	100,	300000,			},
+	{ "WM_RANDOMIZESPELL",					&battle_config.kd_WM_RANDOMIZESPELL,			150,	100,	300000,			},
+	{ "WM_GLOOMYDAY",						&battle_config.kd_WM_GLOOMYDAY,					150,	100,	300000,			},
+	{ "WM_GREAT_ECHO",						&battle_config.kd_WM_GREAT_ECHO,				150,	100,	300000,			},
+	{ "WM_SONG_OF_MANA",					&battle_config.kd_WM_SONG_OF_MANA,				150,	100,	300000,			},
+	{ "WM_DANCE_WITH_WUG",					&battle_config.kd_WM_DANCE_WITH_WUG,			150,	100,	300000,			},
+	{ "WM_SOUND_OF_DESTRUCTION",			&battle_config.kd_WM_SOUND_OF_DESTRUCTION,		150,	100,	300000,			},
+	{ "WM_SATURDAY_NIGHT_FEVER",			&battle_config.kd_WM_SATURDAY_NIGHT_FEVER,		150,	100,	300000,			},
+	{ "WM_LERADS_DEW",						&battle_config.kd_WM_LERADS_DEW,				150,	100,	300000,			},
+	{ "WM_MELODYOFSINK",					&battle_config.kd_WM_MELODYOFSINK,				150,	100,	300000,			},
+	{ "WM_BEYOND_OF_WARCRY",				&battle_config.kd_WM_BEYOND_OF_WARCRY,			150,	100,	300000,			},
+	{ "WM_UNLIMITED_HUMMING_VOICE",			&battle_config.kd_WM_UNLIMITED_HUMMING_VOICE,	150,	100,    300000,			},
+	{ "SO_FIREWALK",						&battle_config.kd_SO_FIREWALK,					150,	100,	300000,			},
+	{ "SO_ELECTRICWALK",					&battle_config.kd_SO_ELECTRICWALK,				150,	100,	300000,			},
+	{ "SO_SPELLFIST",						&battle_config.kd_SO_SPELLFIST,					150,	100,	300000,			},
+	{ "SO_EARTHGRAVE",						&battle_config.kd_SO_EARTHGRAVE,				150,	100,	300000,			},
+	{ "SO_DIAMONDDUST",						&battle_config.kd_SO_DIAMONDDUST,				150,	100,	300000,			},
+	{ "SO_POISON_BUSTER",					&battle_config.kd_SO_POISON_BUSTER,				150,	100,	300000,			},
+	{ "SO_PSYCHIC_WAVE",					&battle_config.kd_SO_PSYCHIC_WAVE,				150,	100,	300000,			},
+	{ "SO_CLOUD_KILL",						&battle_config.kd_SO_CLOUD_KILL,				150,	100,	300000,			},
+	{ "SO_STRIKING",						&battle_config.kd_SO_STRIKING,					150,	100,	300000,			},
+	{ "SO_WARMER",							&battle_config.kd_SO_WARMER,					150,	100,	300000,			},
+	{ "SO_VACUUM_EXTREME",					&battle_config.kd_SO_VACUUM_EXTREME,			150,	100,	300000,			},
+	{ "SO_VARETYR_SPEAR",					&battle_config.kd_SO_VARETYR_SPEAR,				150,	100,	300000,			},
+	{ "SO_ARRULLO",							&battle_config.kd_SO_ARRULLO,					150,	100,	300000,			},
+	{ "SO_EL_CONTROL",						&battle_config.kd_SO_EL_CONTROL,				150,	100,	300000,			},
+	{ "SO_EL_ACTION",						&battle_config.kd_SO_EL_ACTION,					150,	100,	300000,			},
+	{ "SO_EL_ANALYSIS",						&battle_config.kd_SO_EL_ANALYSIS,				150,	100,	300000,			},
+	{ "SO_EL_SYMPATHY",						&battle_config.kd_SO_EL_SYMPATHY,				150,	100,	300000,			},
+	{ "SO_EL_CURE",							&battle_config.kd_SO_EL_CURE,					150,	100,	300000,			},
+	{ "GN_CART_TORNADO",					&battle_config.kd_GN_CART_TORNADO,				150,	100,	300000,			},
+	{ "GN_CARTCANNON",						&battle_config.kd_GN_CARTCANNON,				150,	100,	300000,			},
+	{ "GN_THORNS_TRAP",						&battle_config.kd_GN_THORNS_TRAP,				150,	100,	300000,			},
+	{ "GN_BLOOD_SUCKER",					&battle_config.kd_GN_BLOOD_SUCKER,				150,	100,	300000,			},
+	{ "GN_SPORE_EXPLOSION",					&battle_config.kd_GN_SPORE_EXPLOSION,			150,	100,	300000,			},
+	{ "GN_WALLOFTHORN",						&battle_config.kd_GN_WALLOFTHORN,				150,	100,	300000,			},
+	{ "GN_CRAZYWEED",						&battle_config.kd_GN_CRAZYWEED,					150,	100,	300000,			},
+	{ "GN_DEMONIC_FIRE",					&battle_config.kd_GN_DEMONIC_FIRE,				150,	100,	300000,			},
+	{ "GN_FIRE_EXPANSION",					&battle_config.kd_GN_FIRE_EXPANSION,			150,	100,	300000,			},
+	{ "GN_HELLS_PLANT",						&battle_config.kd_GN_HELLS_PLANT,				150,	100,	300000,			},
+	{ "GN_MANDRAGORA",						&battle_config.kd_GN_MANDRAGORA,				150,	100,	300000,			},
+	{ "GN_SLINGITEM",						&battle_config.kd_GN_SLINGITEM,					150,	100,	300000,			},
+	{ "GN_SLINGITEM_RANGEMELEEATK",			&battle_config.kd_GN_SLINGITEM_RANGEMELEEATK,	150,	100,	300000,			},
+	{ "GN_CHANGEMATERIAL",					&battle_config.kd_GN_CHANGEMATERIAL,			150,	100,	300000,			},
+	{ "AB_SECRAMENT",						&battle_config.kd_AB_SECRAMENT,					150,	100,	300000,			},
+	{ "WM_SEVERE_RAINSTORM_MELEE",			&battle_config.kd_WM_SEVERE_RAINSTORM_MELEE,	150,	100,	300000,			},
+	{ "SR_HOWLINGOFLION",					&battle_config.kd_SR_HOWLINGOFLION,				150,	100,	300000,			},
+	{ "SR_RIDEINLIGHTNING",					&battle_config.kd_SR_RIDEINLIGHTNING,			150,	100,	300000,			},
+	{ "LG_OVERBRAND_BRANDISH",				&battle_config.kd_LG_OVERBRAND_BRANDISH,		150,	100,	300000,			},
+	{ "RL_GLITTERING_GREED",				&battle_config.kd_RL_GLITTERING_GREED,			150,	100,	300000,			},
+	{ "RL_RICHS_COIN",						&battle_config.kd_RL_RICHS_COIN,				150,	100,	300000,			},
+	{ "RL_MASS_SPIRAL",						&battle_config.kd_RL_MASS_SPIRAL,				150,	100,	300000,			},
+	{ "RL_BANISHING_BUSTER",				&battle_config.kd_RL_BANISHING_BUSTER,			150,	100,	300000,			},
+	{ "RL_B_TRAP",							&battle_config.kd_RL_B_TRAP,					150,	100,	300000,			},
+	{ "RL_S_STORM",							&battle_config.kd_RL_S_STORM,					150,	100,	300000,			},
+	{ "RL_E_CHAIN",							&battle_config.kd_RL_E_CHAIN,					150,	100,	300000,			},
+	{ "RL_QD_SHOT",							&battle_config.kd_RL_QD_SHOT,					150,	100,	300000,			},
+	{ "RL_C_MARKER",						&battle_config.kd_RL_C_MARKER,					150,	100,	300000,			},
+	{ "RL_FIREDANCE",						&battle_config.kd_RL_FIREDANCE,					150,	100,	300000,			},
+	{ "RL_H_MINE",							&battle_config.kd_RL_H_MINE,					150,	100,	300000,			},
+	{ "RL_P_ALTER",							&battle_config.kd_RL_P_ALTER,					150,	100,	300000,			},
+	{ "RL_FALLEN_ANGEL",					&battle_config.kd_RL_FALLEN_ANGEL,				150,	100,	300000,			},
+	{ "RL_R_TRIP",							&battle_config.kd_RL_R_TRIP,					150,	100,	300000,			},
+	{ "RL_D_TAIL",							&battle_config.kd_RL_D_TAIL,					150,	100,	300000,			},
+	{ "RL_FIRE_RAIN",						&battle_config.kd_RL_FIRE_RAIN,					150,	100,	300000,			},
+	{ "RL_HEAT_BARREL",						&battle_config.kd_RL_HEAT_BARREL,				150,	100,	300000,			},
+	{ "RL_AM_BLAST",						&battle_config.kd_RL_AM_BLAST,					150,	100,	300000,			},
+	{ "RL_SLUGSHOT",						&battle_config.kd_RL_SLUGSHOT,					150,	100,	300000,			},
+	{ "RL_HAMMER_OF_GOD",					&battle_config.kd_RL_HAMMER_OF_GOD,				150,	100,	300000,			},
+	{ "RL_B_FLICKER_ATK",					&battle_config.kd_RL_B_FLICKER_ATK,				150,	100,	300000,			},
+	{ "KO_YAMIKUMO",						&battle_config.kd_KO_YAMIKUMO,					150,	100,	300000,			},
+	{ "KO_JYUMONJIKIRI",					&battle_config.kd_KO_JYUMONJIKIRI,				150,	100,	300000,			},
+	{ "KO_SETSUDAN",						&battle_config.kd_KO_SETSUDAN,					150,	100,	300000,			},
+	{ "KO_BAKURETSU",						&battle_config.kd_KO_BAKURETSU,					150,	100,	300000,			},
+	{ "KO_HAPPOKUNAI",						&battle_config.kd_KO_HAPPOKUNAI,				150,	100,	300000,			},
+	{ "KO_MUCHANAGE",						&battle_config.kd_KO_MUCHANAGE,					150,	100,	300000,			},
+	{ "KO_HUUMARANKA",						&battle_config.kd_KO_HUUMARANKA,				150,	100,	300000,			},
+	{ "KO_MAKIBISHI",						&battle_config.kd_KO_MAKIBISHI,					150,	100,	300000,			},
+	{ "KO_MEIKYOUSISUI",					&battle_config.kd_KO_MEIKYOUSISUI,				150,	100,	300000,			},
+	{ "KO_ZANZOU",							&battle_config.kd_KO_ZANZOU,					150,	100,	300000,			},
+	{ "KO_KYOUGAKU",						&battle_config.kd_KO_KYOUGAKU,					150,	100,	300000,			},
+	{ "KO_JYUSATSU",						&battle_config.kd_KO_JYUSATSU,					150,	100,	300000,			},
+	{ "KO_KAHU_ENTEN",						&battle_config.kd_KO_KAHU_ENTEN,				150,	100,	300000,			},
+	{ "KO_HYOUHU_HUBUKI",					&battle_config.kd_KO_HYOUHU_HUBUKI,				150,	100,	300000,			},
+	{ "KO_KAZEHU_SEIRAN",					&battle_config.kd_KO_KAZEHU_SEIRAN,				150,	100,	300000,			},
+	{ "KO_DOHU_KOUKAI",						&battle_config.kd_KO_DOHU_KOUKAI,				150,	100,	300000,			},
+	{ "KO_KAIHOU",							&battle_config.kd_KO_KAIHOU,					150,	100,	300000,			},
+	{ "KO_ZENKAI",							&battle_config.kd_KO_ZENKAI,					150,	100,	300000,			},
+	{ "KO_GENWAKU",							&battle_config.kd_KO_GENWAKU,					150,	100,	300000,			},
+	{ "KO_IZAYOI",							&battle_config.kd_KO_IZAYOI,					150,	100,	300000,			},
+	{ "KG_KAGEHUMI",						&battle_config.kd_KG_KAGEHUMI,					150,	100,	300000,			},
+	{ "KG_KYOMU",							&battle_config.kd_KG_KYOMU,						150,	100,	300000,			},
+	{ "KG_KAGEMUSYA",						&battle_config.kd_KG_KAGEMUSYA,					150,	100,	300000,			},
+	{ "OB_ZANGETSU",						&battle_config.kd_OB_ZANGETSU,					150,	100,	300000,			},
+	{ "OB_OBOROGENSOU",						&battle_config.kd_OB_OBOROGENSOU,				150,	100,	300000,			},
+	{ "OB_AKAITSUKI",						&battle_config.kd_OB_AKAITSUKI,					150,	100,	300000,			},
+	{ "GC_DARKCROW",						&battle_config.kd_GC_DARKCROW,					150,	100,	300000,			},
+	{ "RA_UNLIMIT",							&battle_config.kd_RA_UNLIMIT,					150,	100,	300000,			},
+	{ "GN_ILLUSIONDOPING",					&battle_config.kd_GN_ILLUSIONDOPING,			150,	100,	300000,			},
+	{ "RK_DRAGONBREATH_WATER",				&battle_config.kd_RK_DRAGONBREATH_WATER,		150,	100,	300000,			},
+	{ "RK_LUXANIMA",						&battle_config.kd_RK_LUXANIMA,					150,	100,	300000,			},
+	{ "NC_MAGMA_ERUPTION",					&battle_config.kd_NC_MAGMA_ERUPTION,			150,	100,	300000,			},
+	{ "WM_FRIGG_SONG",						&battle_config.kd_WM_FRIGG_SONG,				150,	100,	300000,			},
+	{ "SO_ELEMENTAL_SHIELD",				&battle_config.kd_SO_ELEMENTAL_SHIELD,			150,	100,	300000,			},
+	{ "SR_FLASHCOMBO",						&battle_config.kd_SR_FLASHCOMBO,				150,	100,	300000,			},
+	{ "SC_ESCAPE",							&battle_config.kd_SC_ESCAPE,					150,	100,	300000,			},
+	{ "AB_OFFERTORIUM",						&battle_config.kd_AB_OFFERTORIUM,				150,	100,	300000,			},
+	{ "WL_TELEKINESIS_INTENSE",				&battle_config.kd_WL_TELEKINESIS_INTENSE,		150,	100,	300000,			},
+	{ "ALL_FULL_THROTTLE",					&battle_config.kd_ALL_FULL_THROTTLE,			150,	100,	300000,			},
+	{ "SU_BITE",							&battle_config.kd_SU_BITE,						150,	100,	300000,			},
+	{ "SU_SCRATCH",							&battle_config.kd_SU_SCRATCH,					150,	100,	300000,			},
+	{ "SU_STOOP",							&battle_config.kd_SU_STOOP,						150,	100,	300000,			},
+	{ "SU_LOPE",							&battle_config.kd_SU_LOPE,						150,	100,	300000,			},
+	{ "SU_SPRITEMABLE",						&battle_config.kd_SU_SPRITEMABLE,				150,	100,	300000,			},
+	{ "SU_POWEROFLAND",						&battle_config.kd_SU_POWEROFLAND,				150,	100,	300000,			},
+	{ "SU_SV_STEMSPEAR",					&battle_config.kd_SU_SV_STEMSPEAR,				150,	100,	300000,			},
+	{ "SU_CN_POWDERING",					&battle_config.kd_SU_CN_POWDERING,				150,	100,	300000,			},
+	{ "SU_CN_METEOR",						&battle_config.kd_SU_CN_METEOR,					150,	100,	300000,			},
+	{ "SU_SV_ROOTTWIST",					&battle_config.kd_SU_SV_ROOTTWIST,				150,	100,	300000,			},
+	{ "SU_POWEROFLIFE",						&battle_config.kd_SU_POWEROFLIFE,				150,	100,	300000,			},
+	{ "SU_SCAROFTAROU",						&battle_config.kd_SU_SCAROFTAROU,				150,	100,	300000,			},
+	{ "SU_PICKYPECK",						&battle_config.kd_SU_PICKYPECK,					150,	100,	300000,			},
+	{ "SU_ARCLOUSEDASH",					&battle_config.kd_SU_ARCLOUSEDASH,				150,	100,	300000,			},
+	{ "SU_LUNATICCARROTBEAT",				&battle_config.kd_SU_LUNATICCARROTBEAT,			150,	100,	300000,			},
+	{ "SU_POWEROFSEA",						&battle_config.kd_SU_POWEROFSEA,				150,	100,	300000,			},
+	{ "SU_TUNABELLY",						&battle_config.kd_SU_TUNABELLY,					150,	100,	300000,			},
+	{ "SU_TUNAPARTY",						&battle_config.kd_SU_TUNAPARTY,					150,	100,	300000,			},
+	{ "SU_BUNCHOFSHRIMP",					&battle_config.kd_SU_BUNCHOFSHRIMP,				150,	100,	300000,			},
+	{ "SU_FRESHSHRIMP",						&battle_config.kd_SU_FRESHSHRIMP,				150,	100,	300000,			},
+	{ "SU_CN_METEOR2",						&battle_config.kd_SU_CN_METEOR2,				150,	100,	300000,			},
+	{ "SU_LUNATICCARROTBEAT2",				&battle_config.kd_SU_LUNATICCARROTBEAT2,		150,	100,	300000,			},
+	{ "SU_SOULATTACK",						&battle_config.kd_SU_SOULATTACK,				150,	100,	300000,			},
+	{ "SU_POWEROFFLOCK",					&battle_config.kd_SU_POWEROFFLOCK,				150,	100,	300000,			},
+	{ "SU_SVG_SPIRIT",						&battle_config.kd_SU_SVG_SPIRIT,				150,	100,	300000,			},
+	{ "SU_HISS",							&battle_config.kd_SU_HISS,						150,	100,	300000,			},
+	{ "SU_NYANGGRASS",						&battle_config.kd_SU_NYANGGRASS,				150,	100,	300000,			},
+	{ "SU_GROOMING",						&battle_config.kd_SU_GROOMING,					150,	100,	300000,			},
+	{ "SU_PURRING",							&battle_config.kd_SU_PURRING,					150,	100,	300000,			},
+	{ "SU_SHRIMPARTY",						&battle_config.kd_SU_SHRIMPARTY,				150,	100,	300000,			},
+	{ "SU_SPIRITOFLIFE",					&battle_config.kd_SU_SPIRITOFLIFE,				150,	100,	300000,			},
+	{ "SU_MEOWMEOW",						&battle_config.kd_SU_MEOWMEOW,					150,	100,	300000,			},
+	{ "SU_SPIRITOFLAND",					&battle_config.kd_SU_SPIRITOFLAND,				150,	100,	300000,			},
+	{ "SU_CHATTERING",						&battle_config.kd_SU_CHATTERING,				150,	100,	300000,			},
+	{ "SU_SPIRITOFSEA",						&battle_config.kd_SU_SPIRITOFSEA,				150,	100,	300000,			},
+	{ "CG_SPECIALSINGER",					&battle_config.kd_CG_SPECIALSINGER,				150,	100,	300000,			},
+	{ "AB_VITUPERATUM",						&battle_config.kd_AB_VITUPERATUM,				150,	100,	300000,			},
+	{ "AB_CONVENIO",						&battle_config.kd_AB_CONVENIO,					150,	100,	300000,			},
+	{ "DK_SERVANTWEAPON",					&battle_config.kd_DK_SERVANTWEAPON,				150,	100,	300000,			},
+	{ "DK_SERVANT_W_SIGN",					&battle_config.kd_DK_SERVANT_W_SIGN,			150,	100,	300000,			},
+	{ "DK_SERVANT_W_PHANTOM",				&battle_config.kd_DK_SERVANT_W_PHANTOM,			150,	100,	300000,			},
+	{ "DK_SERVANT_W_DEMOL",					&battle_config.kd_DK_SERVANT_W_DEMOL,			150,	100,	300000,			},
+	{ "DK_CHARGINGPIERCE",					&battle_config.kd_DK_CHARGINGPIERCE,			150,	100,	300000,			},
+	{ "DK_HACKANDSLASHER",					&battle_config.kd_DK_HACKANDSLASHER,			150,	100,	300000,			},
+	{ "DK_DRAGONIC_AURA",					&battle_config.kd_DK_DRAGONIC_AURA,				150,	100,	300000,			},
+	{ "DK_MADNESS_CRUSHER",					&battle_config.kd_DK_MADNESS_CRUSHER,			150,	100,	300000,			},
+	{ "DK_VIGOR",							&battle_config.kd_DK_VIGOR,						150,	100,	300000,			},
+	{ "DK_STORMSLASH",						&battle_config.kd_DK_STORMSLASH,				150,	100,	300000,			},
+	{ "AG_DEADLY_PROJECTION",				&battle_config.kd_AG_DEADLY_PROJECTION,			150,	100,	300000,			},
+	{ "AG_DESTRUCTIVE_HURRICANE",			&battle_config.kd_AG_DESTRUCTIVE_HURRICANE,		150,	100,	300000,			},
+	{ "AG_RAIN_OF_CRYSTAL",					&battle_config.kd_AG_RAIN_OF_CRYSTAL,			150,	100,	300000,			},
+	{ "AG_MYSTERY_ILLUSION",				&battle_config.kd_AG_MYSTERY_ILLUSION,			150,	100,	300000,			},
+	{ "AG_VIOLENT_QUAKE",					&battle_config.kd_AG_VIOLENT_QUAKE,				150,	100,	300000,			},
+	{ "AG_SOUL_VC_STRIKE",					&battle_config.kd_AG_SOUL_VC_STRIKE,			150,	100,	300000,			},
+	{ "AG_STRANTUM_TREMOR",					&battle_config.kd_AG_STRANTUM_TREMOR,			150,	100,	300000,			},
+	{ "AG_ALL_BLOOM",						&battle_config.kd_AG_ALL_BLOOM,					150,	100,	300000,			},
+	{ "AG_CRYSTAL_IMPACT",					&battle_config.kd_AG_CRYSTAL_IMPACT,			150,	100,	300000,			},
+	{ "AG_TORNADO_STORM",					&battle_config.kd_AG_TORNADO_STORM,				150,	100,	300000,			},
+	{ "AG_FLORAL_FLARE_ROAD",				&battle_config.kd_AG_FLORAL_FLARE_ROAD,			150,	100,	300000,			},
+	{ "AG_ASTRAL_STRIKE",					&battle_config.kd_AG_ASTRAL_STRIKE,				150,	100,	300000,			},
+	{ "AG_CLIMAX",							&battle_config.kd_AG_CLIMAX,					150,	100,	300000,			},
+	{ "AG_ROCK_DOWN",						&battle_config.kd_AG_ROCK_DOWN,					150,	100,	300000,			},
+	{ "AG_STORM_CANNON",					&battle_config.kd_AG_STORM_CANNON,				150,	100,	300000,			},
+	{ "AG_CRIMSON_ARROW",					&battle_config.kd_AG_CRIMSON_ARROW,				150,	100,	300000,			},
+	{ "AG_FROZEN_SLASH",					&battle_config.kd_AG_FROZEN_SLASH,				150,	100,	300000,			},
+	{ "IQ_POWERFUL_FAITH",					&battle_config.kd_IQ_POWERFUL_FAITH,			150,	100,	300000,			},
+	{ "IQ_FIRM_FAITH",						&battle_config.kd_IQ_FIRM_FAITH,				150,	100,	300000,			},
+	{ "IQ_WILL_OF_FAITH",					&battle_config.kd_IQ_WILL_OF_FAITH,				150,	100,	300000,			},
+	{ "IQ_OLEUM_SANCTUM",					&battle_config.kd_IQ_OLEUM_SANCTUM,				150,	100,	300000,			},
+	{ "IQ_SINCERE_FAITH",					&battle_config.kd_IQ_SINCERE_FAITH,				150,	100,	300000,			},
+	{ "IQ_MASSIVE_F_BLASTER",				&battle_config.kd_IQ_MASSIVE_F_BLASTER,			150,	100,	300000,			},
+	{ "IQ_EXPOSION_BLASTER",				&battle_config.kd_IQ_EXPOSION_BLASTER,			150,	100,	300000,			},
+	{ "IQ_FIRST_BRAND",						&battle_config.kd_IQ_FIRST_BRAND,				150,	100,	300000,			},
+	{ "IQ_FIRST_FAITH_POWER",				&battle_config.kd_IQ_FIRST_FAITH_POWER,			150,	100,	300000,			},
+	{ "IQ_JUDGE",							&battle_config.kd_IQ_JUDGE,						150,	100,	300000,			},
+	{ "IQ_SECOND_FLAME",					&battle_config.kd_IQ_SECOND_FLAME,				150,	100,	300000,			},
+	{ "IQ_SECOND_FAITH",					&battle_config.kd_IQ_SECOND_FAITH,				150,	100,	300000,			},
+	{ "IQ_SECOND_JUDGEMENT",				&battle_config.kd_IQ_SECOND_JUDGEMENT,			150,	100,	300000,			},
+	{ "IQ_THIRD_PUNISH",					&battle_config.kd_IQ_THIRD_PUNISH,				150,	100,	300000,			},
+	{ "IQ_THIRD_FLAME_BOMB",				&battle_config.kd_IQ_THIRD_FLAME_BOMB,			150,	100,	300000,			},
+	{ "IQ_THIRD_CONSECRATION",				&battle_config.kd_IQ_THIRD_CONSECRATION,		150,	100,	300000,			},
+	{ "IQ_THIRD_EXOR_FLAME",				&battle_config.kd_IQ_THIRD_EXOR_FLAME,			150,	100,	300000,			},
+	{ "IG_GUARD_STANCE",					&battle_config.kd_IG_GUARD_STANCE,				150,	100,	300000,			},
+	{ "IG_GUARDIAN_SHIELD",					&battle_config.kd_IG_GUARDIAN_SHIELD,			150,	100,	300000,			},
+	{ "IG_REBOUND_SHIELD",					&battle_config.kd_IG_REBOUND_SHIELD,			150,	100,	300000,			},
+	{ "IG_ATTACK_STANCE",					&battle_config.kd_IG_ATTACK_STANCE,				150,	100,	300000,			},
+	{ "IG_ULTIMATE_SACRIFICE",				&battle_config.kd_IG_ULTIMATE_SACRIFICE,		150,	100,	300000,			},
+	{ "IG_HOLY_SHIELD",						&battle_config.kd_IG_HOLY_SHIELD,				150,	100,	300000,			},
+	{ "IG_GRAND_JUDGEMENT",					&battle_config.kd_IG_GRAND_JUDGEMENT,			150,	100,	300000,			},
+	{ "IG_JUDGEMENT_CROSS",					&battle_config.kd_IG_JUDGEMENT_CROSS,			150,	100,	300000,			},
+	{ "IG_SHIELD_SHOOTING",					&battle_config.kd_IG_SHIELD_SHOOTING,			150,	100,	300000,			},
+	{ "IG_OVERSLASH",						&battle_config.kd_IG_OVERSLASH,					150,	100,	300000,			},
+	{ "IG_CROSS_RAIN",						&battle_config.kd_IG_CROSS_RAIN,				150,	100,	300000,			},
+	{ "CD_REPARATIO",						&battle_config.kd_CD_REPARATIO,					150,	100,	300000,			},
+	{ "CD_MEDIALE_VOTUM",					&battle_config.kd_CD_MEDIALE_VOTUM,				150,	100,	300000,			},
+	{ "CD_ARGUTUS_VITA",					&battle_config.kd_CD_ARGUTUS_VITA,				150,	100,	300000,			},
+	{ "CD_ARGUTUS_TELUM",					&battle_config.kd_CD_ARGUTUS_TELUM,				150,	100,	300000,			},
+	{ "CD_ARBITRIUM",						&battle_config.kd_CD_ARBITRIUM,					150,	100,	300000,			},
+	{ "CD_PRESENS_ACIES",					&battle_config.kd_CD_PRESENS_ACIES,				150,	100,	300000,			},
+	{ "CD_EFFLIGO",							&battle_config.kd_CD_EFFLIGO,					150,	100,	300000,			},
+	{ "CD_COMPETENTIA",						&battle_config.kd_CD_COMPETENTIA,				150,	100,	300000,			},
+	{ "CD_PNEUMATICUS_PROCELLA",			&battle_config.kd_CD_PNEUMATICUS_PROCELLA,		150,	100,	300000,			},
+	{ "CD_DILECTIO_HEAL",					&battle_config.kd_CD_DILECTIO_HEAL,				150,	100,	300000,			},
+	{ "CD_RELIGIO",							&battle_config.kd_CD_RELIGIO,					150,	100,	300000,			},
+	{ "CD_BENEDICTUM",						&battle_config.kd_CD_BENEDICTUM,				150,	100,	300000,			},
+	{ "CD_PETITIO",							&battle_config.kd_CD_PETITIO,					150,	100,	300000,			},
+	{ "CD_FRAMEN",							&battle_config.kd_CD_FRAMEN,					150,	100,	300000,			},
+	{ "SHC_SHADOW_EXCEED",					&battle_config.kd_SHC_SHADOW_EXCEED,			150,	100,	300000,			},
+	{ "SHC_DANCING_KNIFE",					&battle_config.kd_SHC_DANCING_KNIFE,			150,	100,	300000,			},
+	{ "SHC_SAVAGE_IMPACT",					&battle_config.kd_SHC_SAVAGE_IMPACT,			150,	100,	300000,			},
+	{ "SHC_ETERNAL_SLASH",					&battle_config.kd_SHC_ETERNAL_SLASH,			150,	100,	300000,			},
+	{ "SHC_POTENT_VENOM",					&battle_config.kd_SHC_POTENT_VENOM,				150,	100,	300000,			},
+	{ "SHC_SHADOW_STAB",					&battle_config.kd_SHC_SHADOW_STAB,				150,	100,	300000,			},
+	{ "SHC_IMPACT_CRATER",					&battle_config.kd_SHC_IMPACT_CRATER,			150,	100,	300000,			},
+	{ "SHC_ENCHANTING_SHADOW",				&battle_config.kd_SHC_ENCHANTING_SHADOW,		150,	100,	300000,			},
+	{ "SHC_FATAL_SHADOW_CROW",				&battle_config.kd_SHC_FATAL_SHADOW_CROW,		150,	100,	300000,			},
+	{ "MT_AXE_STOMP",						&battle_config.kd_MT_AXE_STOMP,					150,	100,	300000,			},
+	{ "MT_RUSH_QUAKE",						&battle_config.kd_MT_RUSH_QUAKE,				150,	100,	300000,			},
+	{ "MT_M_MACHINE",						&battle_config.kd_MT_M_MACHINE,					150,	100,	300000,			},
+	{ "MT_A_MACHINE",						&battle_config.kd_MT_A_MACHINE,					150,	100,	300000,			},
+	{ "MT_D_MACHINE",						&battle_config.kd_MT_D_MACHINE,					150,	100,	300000,			},
+	{ "MT_TWOAXEDEF",						&battle_config.kd_MT_TWOAXEDEF,					150,	100,	300000,			},
+	{ "MT_ABR_M",							&battle_config.kd_MT_ABR_M,						150,	100,	300000,			},
+	{ "MT_SUMMON_ABR_BATTLE_WARIOR",		&battle_config.kd_MT_SUMMON_ABR_BATTLE_WARIOR,	150,	100,	300000,			},
+	{ "MT_SUMMON_ABR_DUAL_CANNON",			&battle_config.kd_MT_SUMMON_ABR_DUAL_CANNON,	150,	100,	300000,			},
+	{ "MT_SUMMON_ABR_MOTHER_NET",			&battle_config.kd_MT_SUMMON_ABR_MOTHER_NET,		150,	100,	300000,			},
+	{ "MT_SUMMON_ABR_INFINITY",				&battle_config.kd_MT_SUMMON_ABR_INFINITY,		150,	100,	300000,			},
+	{ "AG_DESTRUCTIVE_HURRICANE_CLIMAX",	&battle_config.kd_AG_DESTRUCTIVE_HURRICANE_CLIMAX,150,	100,	300000,			},
+	{ "ABC_STRIP_SHADOW",					&battle_config.kd_ABC_STRIP_SHADOW,				150,	100,	300000,			},
+	{ "ABC_ABYSS_DAGGER",					&battle_config.kd_ABC_ABYSS_DAGGER,				150,	100,	300000,			},
+	{ "ABC_UNLUCKY_RUSH",					&battle_config.kd_ABC_UNLUCKY_RUSH,				150,	100,	300000,			},
+	{ "ABC_CHAIN_REACTION_SHOT",			&battle_config.kd_ABC_CHAIN_REACTION_SHOT,		150,	100,	300000,			},
+	{ "ABC_FROM_THE_ABYSS",					&battle_config.kd_ABC_FROM_THE_ABYSS,			150,	100,	300000,			},
+	{ "ABC_ABYSS_SLAYER",					&battle_config.kd_ABC_ABYSS_SLAYER,				150,	100,	300000,			},
+	{ "ABC_ABYSS_STRIKE",					&battle_config.kd_ABC_ABYSS_STRIKE,				150,	100,	300000,			},
+	{ "ABC_DEFT_STAB",						&battle_config.kd_ABC_DEFT_STAB,				150,	100,	300000,			},
+	{ "ABC_ABYSS_SQUARE",					&battle_config.kd_ABC_ABYSS_SQUARE,				150,	100,	300000,			},
+	{ "ABC_FRENZY_SHOT",					&battle_config.kd_ABC_FRENZY_SHOT,				150,	100,	300000,			},
+	{ "WH_NATUREFRIENDLY",					&battle_config.kd_WH_NATUREFRIENDLY,			150,	100,	300000,			},
+	{ "WH_HAWKRUSH",						&battle_config.kd_WH_HAWKRUSH,					150,	100,	300000,			},
+	{ "WH_HAWKBOOMERANG",					&battle_config.kd_WH_HAWKBOOMERANG,				150,	100,	300000,			},
+	{ "WH_GALESTORM",						&battle_config.kd_WH_GALESTORM,					150,	100,	300000,			},
+	{ "WH_DEEPBLINDTRAP",					&battle_config.kd_WH_DEEPBLINDTRAP,				150,	100,	300000,			},
+	{ "WH_SOLIDTRAP",						&battle_config.kd_WH_SOLIDTRAP,					150,	100,	300000,			},
+	{ "WH_SWIFTTRAP",						&battle_config.kd_WH_SWIFTTRAP,					150,	100,	300000,			},
+	{ "WH_CRESCIVE_BOLT",					&battle_config.kd_WH_CRESCIVE_BOLT,				150,	100,	300000,			},
+	{ "WH_FLAMETRAP",						&battle_config.kd_WH_FLAMETRAP,					150,	100,	300000,			},
+	{ "BO_ACIDIFIED_ZONE_WATER",			&battle_config.kd_BO_ACIDIFIED_ZONE_WATER,		150,	100,	300000,			},
+	{ "BO_ACIDIFIED_ZONE_GROUND",			&battle_config.kd_BO_ACIDIFIED_ZONE_GROUND,		150,	100,	300000,			},
+	{ "BO_ACIDIFIED_ZONE_WIND",				&battle_config.kd_BO_ACIDIFIED_ZONE_WIND,		150,	100,	300000,			},
+	{ "BO_ACIDIFIED_ZONE_FIRE",				&battle_config.kd_BO_ACIDIFIED_ZONE_FIRE,		150,	100,	300000,			},
+	{ "TR_STAGE_MANNER",					&battle_config.kd_TR_STAGE_MANNER,				150,	100,	300000,			},
+	{ "TR_ROSEBLOSSOM",						&battle_config.kd_TR_ROSEBLOSSOM,				150,	100,	300000,			},
+	{ "TR_RHYTHMSHOOTING",					&battle_config.kd_TR_RHYTHMSHOOTING,			150,	100,	300000,			},
+	{ "TR_METALIC_FURY",					&battle_config.kd_TR_METALIC_FURY,				150,	100,	300000,			},
+	{ "EM_DIAMOND_STORM",					&battle_config.kd_EM_DIAMOND_STORM,				150,	100,	300000,			},
+	{ "EM_LIGHTNING_LAND",					&battle_config.kd_EM_LIGHTNING_LAND,			150,	100,	300000,			},
+	{ "EM_VENOM_SWAMP",						&battle_config.kd_EM_VENOM_SWAMP,				150,	100,	300000,			},
+	{ "EM_CONFLAGRATION",					&battle_config.kd_EM_CONFLAGRATION,				150,	100,	300000,			},
+	{ "EM_TERRA_DRIVE",						&battle_config.kd_EM_TERRA_DRIVE,				150,	100,	300000,			},
+	{ "EM_ELEMENTAL_BUSTER",				&battle_config.kd_EM_ELEMENTAL_BUSTER,			150,	100,	300000,			},
+	{ "BO_WOODEN_THROWROCK",				&battle_config.kd_BO_WOODEN_THROWROCK,			150,	100,	300000,			},
+	{ "BO_WOODEN_ATTACK",					&battle_config.kd_BO_WOODEN_ATTACK,				150,	100,	300000,			},
+	{ "BO_HELL_HOWLING",					&battle_config.kd_BO_HELL_HOWLING,				150,	100,	300000,			},
+	{ "BO_HELL_DUSTY",						&battle_config.kd_BO_HELL_DUSTY,				150,	100,	300000,			},
+	{ "BO_FAIRY_DUSTY",						&battle_config.kd_BO_FAIRY_DUSTY,				150,	100,	300000,			},
+	{ "EM_ELEMENTAL_BUSTER_FIRE",			&battle_config.kd_EM_ELEMENTAL_BUSTER_FIRE,		150,	100,	300000,			},
+	{ "EM_ELEMENTAL_BUSTER_WATER",			&battle_config.kd_EM_ELEMENTAL_BUSTER_WATER,	150,	100,	300000,			},
+	{ "EM_ELEMENTAL_BUSTER_WIND",			&battle_config.kd_EM_ELEMENTAL_BUSTER_WIND,		150,	100,	300000,			},
+	{ "EM_ELEMENTAL_BUSTER_GROUND",			&battle_config.kd_EM_ELEMENTAL_BUSTER_GROUND,	150,	100,	300000,			},
+	{ "EM_ELEMENTAL_BUSTER_POISON",			&battle_config.kd_EM_ELEMENTAL_BUSTER_POISON,	150,	100,	300000,			},
+
+
+/** [keitenai] WoE skill delay Spam Hack Protection **/
+	{ "SHOW_SKILL_DELAY",					&battle_config.KEITENAI_SHOW_DELAY,				1,		0,		1,				},
+	{ "WOE_K_DEFAULT",						&battle_config.kdw_DEFAULT,						150,	100,	300000,			},
+	{ "WOE_SM_BASH",						&battle_config.kdw_SM_BASH,						150,	100,	300000,			},
+	{ "WOE_SM_MAGNUM",						&battle_config.kdw_SM_MAGNUM,					150,	100,	300000,			},
+	{ "WOE_MG_NAPALMBEAT",					&battle_config.kdw_MG_NAPALMBEAT,				150,	100,	300000,			},
+	{ "WOE_MG_SOULSTRIKE",					&battle_config.kdw_MG_SOULSTRIKE,				150,	100,	300000,			},
+	{ "WOE_MG_COLDBOLT",					&battle_config.kdw_MG_COLDBOLT,					150,	100,	300000,			},
+	{ "WOE_MG_FROSTDIVER",					&battle_config.kdw_MG_FROSTDIVER,				150,	100,	300000,			},
+	{ "WOE_MG_STONECURSE",					&battle_config.kdw_MG_STONECURSE,				150,	100,	300000,			},
+	{ "WOE_MG_FIREBALL",					&battle_config.kdw_MG_FIREBALL,					150,	100,	300000,			},
+	{ "WOE_MG_FIREWALL",					&battle_config.kdw_MG_FIREWALL,					150,	100,	300000,			},
+	{ "WOE_MG_FIREBOLT",					&battle_config.kdw_MG_FIREBOLT,					150,	100,	300000,			},
+	{ "WOE_MG_LIGHTNINGBOLT",				&battle_config.kdw_MG_LIGHTNINGBOLT,			150,	100,	300000,			},
+	{ "WOE_MG_THUNDERSTORM",				&battle_config.kdw_MG_THUNDERSTORM,				150,	100,	300000,			},
+	{ "WOE_AL_HEAL",						&battle_config.kdw_AL_HEAL,						150,	100,	300000,			},
+	{ "WOE_AL_DECAGI",						&battle_config.kdw_AL_DECAGI,					150,	100,	300000,			},
+	{ "WOE_AL_CRUCIS",						&battle_config.kdw_AL_CRUCIS,					150,	100,	300000,			},
+	{ "WOE_MC_MAMMONITE",					&battle_config.kdw_MC_MAMMONITE,				150,	100,	300000,			},
+	{ "WOE_AC_DOUBLE",						&battle_config.kdw_AC_DOUBLE,					150,	100,	300000,			},
+	{ "WOE_AC_SHOWER",						&battle_config.kdw_AC_SHOWER,					150,	100,	300000,			},
+	{ "WOE_TF_POISON",						&battle_config.kdw_TF_POISON,					150,	100,	300000,			},
+	{ "WOE_KN_PIERCE",						&battle_config.kdw_KN_PIERCE,					150,	100,	300000,			},
+	{ "WOE_KN_BRANDISHSPEAR",				&battle_config.kdw_KN_BRANDISHSPEAR,			150,	100,	300000,			},
+	{ "WOE_KN_SPEARSTAB",					&battle_config.kdw_KN_SPEARSTAB,				150,	100,	300000,			},
+	{ "WOE_KN_SPEARBOOMERANG",				&battle_config.kdw_KN_SPEARBOOMERANG,			150,	100,	300000,			},
+	{ "WOE_KN_BOWLINGBASH",					&battle_config.kdw_KN_BOWLINGBASH,				150,	100,	300000,			},
+	{ "WOE_PR_LEXDIVINA",					&battle_config.kdw_PR_LEXDIVINA,				150,	100,	300000,			},
+	{ "WOE_PR_TURNUNDEAD",					&battle_config.kdw_PR_TURNUNDEAD,				150,	100,	300000,			},
+	{ "WOE_PR_LEXAETERNA",					&battle_config.kdw_PR_LEXAETERNA,				150,	100,	300000,			},
+	{ "WOE_PR_MAGNUS",						&battle_config.kdw_PR_MAGNUS,					150,	100,	300000,			},
+	{ "WOE_WZ_FIREPILLAR",					&battle_config.kdw_WZ_FIREPILLAR,				150,	100,	300000,			},
+	{ "WOE_WZ_SIGHTRASHER",					&battle_config.kdw_WZ_SIGHTRASHER,				150,	100,	300000,			},
+	{ "WOE_WZ_FIREIVY",						&battle_config.kdw_WZ_FIREIVY,					150,	100,	300000,			},
+	{ "WOE_WZ_METEOR",						&battle_config.kdw_WZ_METEOR,					150,	100,	300000,			},
+	{ "WOE_WZ_JUPITEL",						&battle_config.kdw_WZ_JUPITEL,					150,	100,	300000,			},
+	{ "WOE_WZ_VERMILION",					&battle_config.kdw_WZ_VERMILION,				150,	100,	300000,			},
+	{ "WOE_WZ_WATERBALL",					&battle_config.kdw_WZ_WATERBALL,				150,	100,	300000,			},
+	{ "WOE_WZ_ICEWALL",						&battle_config.kdw_WZ_ICEWALL,					150,	100,	300000,			},
+	{ "WOE_WZ_FROSTNOVA",					&battle_config.kdw_WZ_FROSTNOVA,				150,	100,	300000,			},
+	{ "WOE_WZ_STORMGUST",					&battle_config.kdw_WZ_STORMGUST,				150,	100,	300000,			},
+	{ "WOE_WZ_EARTHSPIKE",					&battle_config.kdw_WZ_EARTHSPIKE,				150,	100,	300000,			},
+	{ "WOE_WZ_HEAVENDRIVE",					&battle_config.kdw_WZ_HEAVENDRIVE,				150,	100,	300000,			},
+	{ "WOE_WZ_QUAGMIRE",					&battle_config.kdw_WZ_QUAGMIRE,					150,	100,	300000,			},
+	{ "WOE_WZ_ESTIMATION",					&battle_config.kdw_WZ_ESTIMATION,				150,	100,	300000,			},
+	{ "WOE_BS_HAMMERFALL",					&battle_config.kdw_BS_HAMMERFALL,				150,	100,	300000,			},
+	{ "WOE_HT_BLITZBEAT",					&battle_config.kdw_HT_BLITZBEAT,				150,	100,	300000,			},
+	{ "WOE_AS_SONICBLOW",					&battle_config.kdw_AS_SONICBLOW,				150,	100,	300000,			},
+	{ "WOE_AS_GRIMTOOTH",					&battle_config.kdw_AS_GRIMTOOTH,				150,	100,	300000,			},
+	{ "WOE_AC_CHARGEARROW",					&battle_config.kdw_AC_CHARGEARROW,				150,	100,	300000,			},
+	{ "WOE_TF_BACKSLIDING",					&battle_config.kdw_TF_BACKSLIDING,				150,	100,	300000,			},
+	{ "WOE_MC_CARTREVOLUTION",				&battle_config.kdw_MC_CARTREVOLUTION,			150,	100,	300000,			},
+	{ "WOE_AL_HOLYLIGHT",					&battle_config.kdw_AL_HOLYLIGHT,				150,	100,	300000,			},
+	{ "WOE_RG_BACKSTAP",					&battle_config.kdw_RG_BACKSTAP,					150,	100,	300000,			},
+	{ "WOE_RG_RAID",						&battle_config.kdw_RG_RAID,						150,	100,	300000,			},
+	{ "WOE_RG_GRAFFITI",					&battle_config.kdw_RG_GRAFFITI,					150,	100,	300000,			},
+	{ "WOE_RG_FLAGGRAFFITI",				&battle_config.kdw_RG_FLAGGRAFFITI,				150,	100,	300000,			},
+	{ "WOE_RG_COMPULSION",					&battle_config.kdw_RG_COMPULSION,				150,	100,	300000,			},
+	{ "WOE_RG_PLAGIARISM",					&battle_config.kdw_RG_PLAGIARISM,				150,	100,	300000,			},
+	{ "WOE_AM_DEMONSTRATION",				&battle_config.kdw_AM_DEMONSTRATION,			150,	100,	300000,			},
+	{ "WOE_AM_ACIDTERROR",					&battle_config.kdw_AM_ACIDTERROR,				150,	100,	300000,			},
+	{ "WOE_AM_POTIONPITCHER",				&battle_config.kdw_AM_POTIONPITCHER,			150,	100,	300000,			},
+	{ "WOE_AM_CANNIBALIZE",					&battle_config.kdw_AM_CANNIBALIZE,				150,	100,	300000,			},
+	{ "WOE_AM_SPHEREMINE",					&battle_config.kdw_AM_SPHEREMINE,				150,	100,	300000,			},
+	{ "WOE_AM_FLAMECONTROL",				&battle_config.kdw_AM_FLAMECONTROL,				150,	100,	300000,			},
+	{ "WOE_AM_DRILLMASTER",					&battle_config.kdw_AM_DRILLMASTER,				150,	100,	300000,			},
+	{ "WOE_CR_SHIELDBOOMERANG",				&battle_config.kdw_CR_SHIELDBOOMERANG,			150,	100,	300000,			},
+	{ "WOE_CR_HOLYCROSS",					&battle_config.kdw_CR_HOLYCROSS,				150,	100,	300000,			},
+	{ "WOE_CR_GRANDCROSS",					&battle_config.kdw_CR_GRANDCROSS,				150,	100,	300000,			},
+	{ "WOE_MO_CALLSPIRITS",					&battle_config.kdw_MO_CALLSPIRITS,				150,	100,	300000,			},
+	{ "WOE_MO_ABSORBSPIRITS",				&battle_config.kdw_MO_ABSORBSPIRITS,			150,	100,	300000,			},
+	{ "WOE_MO_BODYRELOCATION",				&battle_config.kdw_MO_BODYRELOCATION,			150,	100,	300000,			},
+	{ "WOE_MO_INVESTIGATE",					&battle_config.kdw_MO_INVESTIGATE,				150,	100,	300000,			},
+	{ "WOE_MO_FINGEROFFENSIVE",				&battle_config.kdw_MO_FINGEROFFENSIVE,			150,	100,	300000,			},
+	{ "WOE_MO_EXPLOSIONSPIRITS",			&battle_config.kdw_MO_EXPLOSIONSPIRITS,			150,	100,	300000,			},
+	{ "WOE_MO_EXTREMITYFIST",				&battle_config.kdw_MO_EXTREMITYFIST,			150,	100,	300000,			},
+	{ "WOE_MO_CHAINCOMBO",					&battle_config.kdw_MO_CHAINCOMBO,				150,	100,	300000,			},
+	{ "WOE_MO_COMBOFINISH",					&battle_config.kdw_MO_COMBOFINISH,				150,	100,	300000,			},
+	{ "WOE_SA_CASTCANCEL",					&battle_config.kdw_SA_CASTCANCEL,				150,	100,	300000,			},
+	{ "WOE_SA_SPELLBREAKER",				&battle_config.kdw_SA_SPELLBREAKER,				150,	100,	300000,			},
+	{ "WOE_SA_DISPELL",						&battle_config.kdw_SA_DISPELL,					150,	100,	300000,			},
+	{ "WOE_SA_ABRACADABRA",					&battle_config.kdw_SA_ABRACADABRA,				150,	100,	300000,			},
+	{ "WOE_SA_MONOCELL",					&battle_config.kdw_SA_MONOCELL,					150,	100,	300000,			},
+	{ "WOE_SA_CLASSCHANGE",					&battle_config.kdw_SA_CLASSCHANGE,				150,	100,	300000,			},
+	{ "WOE_SA_SUMMONMONSTER",				&battle_config.kdw_SA_SUMMONMONSTER,			150,	100,	300000,			},
+	{ "WOE_SA_REVERSEORCISH",				&battle_config.kdw_SA_REVERSEORCISH,			150,	100,	300000,			},
+	{ "WOE_SA_DEATH",						&battle_config.kdw_SA_DEATH,					150,	100,	300000,			},
+	{ "WOE_SA_FORTUNE",						&battle_config.kdw_SA_FORTUNE,					150,	100,	300000,			},
+	{ "WOE_SA_TAMINGMONSTER",				&battle_config.kdw_SA_TAMINGMONSTER,			150,	100,	300000,			},
+	{ "WOE_SA_QUESTION",					&battle_config.kdw_SA_QUESTION,					150,	100,	300000,			},
+	{ "WOE_SA_GRAVITY",						&battle_config.kdw_SA_GRAVITY,					150,	100,	300000,			},
+	{ "WOE_SA_LEVELUP",						&battle_config.kdw_SA_LEVELUP,					150,	100,	300000,			},
+	{ "WOE_SA_INSTANTDEATH",				&battle_config.kdw_SA_INSTANTDEATH,				150,	100,	300000,			},
+	{ "WOE_SA_FULLRECOVERY",				&battle_config.kdw_SA_FULLRECOVERY,				150,	100,	300000,			},
+	{ "WOE_SA_COMA",						&battle_config.kdw_SA_COMA,						150,	100,	300000,			},
+	{ "WOE_BD_ADAPTATION",					&battle_config.kdw_BD_ADAPTATION,				150,	100,	300000,			},
+	{ "WOE_BD_ENCORE",						&battle_config.kdw_BD_ENCORE,					150,	100,	300000,			},
+	{ "WOE_BD_LULLABY",						&battle_config.kdw_BD_LULLABY,					150,	100,	300000,			},
+	{ "WOE_BD_RICHMANKIM",					&battle_config.kdw_BD_RICHMANKIM,				150,	100,	300000,			},
+	{ "WOE_BA_MUSICALSTRIKE",				&battle_config.kdw_BA_MUSICALSTRIKE,			150,	100,	300000,			},
+	{ "WOE_BA_DISSONANCE",					&battle_config.kdw_BA_DISSONANCE,				150,	100,	300000,			},
+	{ "WOE_BA_FROSTJOKER",					&battle_config.kdw_BA_FROSTJOKER,				150,	100,	300000,			},
+	{ "WOE_BA_WHISTLE",						&battle_config.kdw_BA_WHISTLE,					150,	100,	300000,			},
+	{ "WOE_BA_ASSASSINCROSS",				&battle_config.kdw_BA_ASSASSINCROSS,			150,	100,	300000,			},
+	{ "WOE_BA_POEMBRAGI",					&battle_config.kdw_BA_POEMBRAGI,				150,	100,	300000,			},
+	{ "WOE_BA_APPLEIDUN",					&battle_config.kdw_BA_APPLEIDUN,				150,	100,	300000,			},
+	{ "WOE_DC_THROWARROW",					&battle_config.kdw_DC_THROWARROW,				150,	100,	300000,			},
+	{ "WOE_DC_UGLYDANCE",					&battle_config.kdw_DC_UGLYDANCE,				150,	100,	300000,			},
+	{ "WOE_DC_SCREAM",						&battle_config.kdw_DC_SCREAM,					150,	100,	300000,			},
+	{ "WOE_DC_HUMMING",						&battle_config.kdw_DC_HUMMING,					150,	100,	300000,			},
+	{ "WOE_DC_DONTFORGETME",				&battle_config.kdw_DC_DONTFORGETME,				150,	100,	300000,			},
+	{ "WOE_DC_FORTUNEKISS",					&battle_config.kdw_DC_FORTUNEKISS,				150,	100,	300000,			},
+	{ "WOE_DC_SERVICEFORYOU",				&battle_config.kdw_DC_SERVICEFORYOU,			150,	100,	300000,			},
+	{ "WOE_LK_FURY",						&battle_config.kdw_LK_FURY,						150,	100,	300000,			},
+	{ "WOE_HW_MAGICCRASHER",				&battle_config.kdw_HW_MAGICCRASHER,				150,	100,	300000,			},
+	{ "WOE_PA_PRESSURE",					&battle_config.kdw_PA_PRESSURE,					150,	100,	300000,			},
+	{ "WOE_CH_PALMSTRIKE",					&battle_config.kdw_CH_PALMSTRIKE,				150,	100,	300000,			},
+	{ "WOE_CH_TIGERFIST",					&battle_config.kdw_CH_TIGERFIST,				150,	100,	300000,			},
+	{ "WOE_CH_CHAINCRUSH",					&battle_config.kdw_CH_CHAINCRUSH,				150,	100,	300000,			},
+	{ "WOE_PF_SOULCHANGE",					&battle_config.kdw_PF_SOULCHANGE,				150,	100,	300000,			},
+	{ "WOE_PF_SOULBURN",					&battle_config.kdw_PF_SOULBURN,					150,	100,	300000,			},
+	{ "WOE_ASC_BREAKER",					&battle_config.kdw_ASC_BREAKER,					150,	100,	300000,			},
+	{ "WOE_SN_FALCONASSAULT",				&battle_config.kdw_SN_FALCONASSAULT,			150,	100,	300000,			},
+	{ "WOE_SN_SHARPSHOOTING",				&battle_config.kdw_SN_SHARPSHOOTING,			150,	100,	300000,			},
+	{ "WOE_CR_ALCHEMY",						&battle_config.kdw_CR_ALCHEMY,					150,	100,	300000,			},
+	{ "WOE_CR_SYNTHESISPOTION",				&battle_config.kdw_CR_SYNTHESISPOTION,			150,	100,	300000,			},
+	{ "WOE_CG_ARROWVULCAN",					&battle_config.kdw_CG_ARROWVULCAN,				150,	100,	300000,			},
+	{ "WOE_CG_MOONLIT",						&battle_config.kdw_CG_MOONLIT,					150,	100,	300000,			},
+	{ "WOE_CG_MARIONETTE",					&battle_config.kdw_CG_MARIONETTE,				150,	100,	300000,			},
+	{ "WOE_LK_SPIRALPIERCE",				&battle_config.kdw_LK_SPIRALPIERCE,				150,	100,	300000,			},
+	{ "WOE_LK_HEADCRUSH",					&battle_config.kdw_LK_HEADCRUSH,				150,	100,	300000,			},
+	{ "WOE_LK_JOINTBEAT",					&battle_config.kdw_LK_JOINTBEAT,				150,	100,	300000,			},
+	{ "WOE_HW_NAPALMVULCAN",				&battle_config.kdw_HW_NAPALMVULCAN,				150,	100,	300000,			},
+	{ "WOE_CH_SOULCOLLECT",					&battle_config.kdw_CH_SOULCOLLECT,				150,	100,	300000,			},
+	{ "WOE_PF_MINDBREAKER",					&battle_config.kdw_PF_MINDBREAKER,				150,	100,	300000,			},
+	{ "WOE_PF_SPIDERWEB",					&battle_config.kdw_PF_SPIDERWEB,				150,	100,	300000,			},
+	{ "WOE_ASC_METEORASSAULT",				&battle_config.kdw_ASC_METEORASSAULT,			150,	100,	300000,			},
+	{ "WOE_TK_STORMKICK",					&battle_config.kdw_TK_STORMKICK,				150,	100,	300000,			},
+	{ "WOE_TK_DOWNKICK",					&battle_config.kdw_TK_DOWNKICK,					150,	100,	300000,			},
+	{ "WOE_TK_TURNKICK",					&battle_config.kdw_TK_TURNKICK,					150,	100,	300000,			},
+	{ "WOE_TK_JUMPKICK",					&battle_config.kdw_TK_JUMPKICK,					150,	100,	300000,			},
+	{ "WOE_TK_POWER",						&battle_config.kdw_TK_POWER,					150,	100,	300000,			},
+	{ "WOE_TK_HIGHJUMP",					&battle_config.kdw_TK_HIGHJUMP,					150,	100,	300000,			},
+	{ "WOE_SL_KAIZEL",						&battle_config.kdw_SL_KAIZEL,					150,	100,	300000,			},
+	{ "WOE_SL_KAAHI",						&battle_config.kdw_SL_KAAHI,					150,	100,	300000,			},
+	{ "WOE_SL_KAUPE",						&battle_config.kdw_SL_KAUPE,					150,	100,	300000,			},
+	{ "WOE_SL_KAITE",						&battle_config.kdw_SL_KAITE,					150,	100,	300000,			},
+	{ "WOE_SL_KAINA",						&battle_config.kdw_SL_KAINA,					150,	100,	300000,			},
+	{ "WOE_SL_STIN",						&battle_config.kdw_SL_STIN,						150,	100,	300000,			},
+	{ "WOE_SL_STUN",						&battle_config.kdw_SL_STUN,						150,	100,	300000,			},
+	{ "WOE_SL_SMA",							&battle_config.kdw_SL_SMA,						150,	100,	300000,			},
+	{ "WOE_SL_SWOO",						&battle_config.kdw_SL_SWOO,						150,	100,	300000,			},
+	{ "WOE_SL_SKE",							&battle_config.kdw_SL_SKE,						150,	100,	300000,			},
+	{ "WOE_SL_SKA",							&battle_config.kdw_SL_SKA,						150,	100,	300000,			},
+	{ "WOE_ST_FULLSTRIP",					&battle_config.kdw_ST_FULLSTRIP,				150,	100,	300000,			},
+	{ "WOE_CR_SLIMPITCHER",					&battle_config.kdw_CR_SLIMPITCHER,				150,	100,	300000,			},
+	{ "WOE_CR_FULLPROTECTION",				&battle_config.kdw_CR_FULLPROTECTION,			150,	100,	300000,			},
+	{ "WOE_PA_SHIELDCHAIN",					&battle_config.kdw_PA_SHIELDCHAIN,				150,	100,	300000,			},
+	{ "WOE_HP_MANARECHARGE",				&battle_config.kdw_HP_MANARECHARGE,				150,	100,	300000,			},
+	{ "WOE_PF_DOUBLECASTING",				&battle_config.kdw_PF_DOUBLECASTING,			150,	100,	300000,			},
+	{ "WOE_HW_GANBANTEIN",					&battle_config.kdw_HW_GANBANTEIN,				150,	100,	300000,			},
+	{ "WOE_HW_GRAVITATION",					&battle_config.kdw_HW_GRAVITATION,				150,	100,	300000,			},
+	{ "WOE_WS_CARTTERMINATION",				&battle_config.kdw_WS_CARTTERMINATION,			150,	100,	300000,			},
+	{ "WOE_CG_HERMODE",						&battle_config.kdw_CG_HERMODE,					150,	100,	300000,			},
+	{ "WOE_CG_TAROTCARD",					&battle_config.kdw_CG_TAROTCARD,				150,	100,	300000,			},
+	{ "WOE_CR_ACIDDEMONSTRATION",			&battle_config.kdw_CR_ACIDDEMONSTRATION,		150,	100,	300000,			},
+	{ "WOE_SL_HIGH",						&battle_config.kdw_SL_HIGH,						150,	100,	300000,			},
+	{ "WOE_GS_TRIPLEACTION",				&battle_config.kdw_GS_TRIPLEACTION,				150,	100,	300000,			},
+	{ "WOE_GS_BULLSEYE",					&battle_config.kdw_GS_BULLSEYE,					150,	100,	300000,			},
+	{ "WOE_GS_MADNESSCANCEL",				&battle_config.kdw_GS_MADNESSCANCEL,			150,	100,	300000,			},
+	{ "WOE_GS_INCREASING",					&battle_config.kdw_GS_INCREASING,				150,	100,	300000,			},
+	{ "WOE_GS_MAGICALBULLET",				&battle_config.kdw_GS_MAGICALBULLET,			150,	100,	300000,			},
+	{ "WOE_GS_CRACKER",						&battle_config.kdw_GS_CRACKER,					150,	100,	300000,			},
+	{ "WOE_GS_SINGLEACTION",				&battle_config.kdw_GS_SINGLEACTION,				150,	100,	300000,			},
+	{ "WOE_GS_CHAINACTION",					&battle_config.kdw_GS_CHAINACTION,				150,	100,	300000,			},
+	{ "WOE_GS_TRACKING",					&battle_config.kdw_GS_TRACKING,					150,	100,	300000,			},
+	{ "WOE_GS_DISARM",						&battle_config.kdw_GS_DISARM,					150,	100,	300000,			},
+	{ "WOE_GS_PIERCINGSHOT",				&battle_config.kdw_GS_PIERCINGSHOT,				150,	100,	300000,			},
+	{ "WOE_GS_RAPIDSHOWER",					&battle_config.kdw_GS_RAPIDSHOWER,				150,	100,	300000,			},
+	{ "WOE_GS_DESPERADO",					&battle_config.kdw_GS_DESPERADO,				150,	100,	300000,			},
+	{ "WOE_GS_GATLINGFEVER",				&battle_config.kdw_GS_GATLINGFEVER,				150,	100,	300000,			},
+	{ "WOE_GS_DUST",						&battle_config.kdw_GS_DUST,						150,	100,	300000,			},
+	{ "WOE_GS_FULLBUSTER",					&battle_config.kdw_GS_FULLBUSTER,				150,	100,	300000,			},
+	{ "WOE_GS_SPREADATTACK",				&battle_config.kdw_GS_SPREADATTACK,				150,	100,	300000,			},
+	{ "WOE_GS_GROUNDDRIFT",					&battle_config.kdw_GS_GROUNDDRIFT,				150,	100,	300000,			},
+	{ "WOE_NJ_TOBIDOUGU",					&battle_config.kdw_NJ_TOBIDOUGU,				150,	100,	300000,			},
+	{ "WOE_NJ_SYURIKEN",					&battle_config.kdw_NJ_SYURIKEN,					150,	100,	300000,			},
+	{ "WOE_NJ_KUNAI",						&battle_config.kdw_NJ_KUNAI,					150,	100,	300000,			},
+	{ "WOE_NJ_HUUMA",						&battle_config.kdw_NJ_HUUMA,					150,	100,	300000,			},
+	{ "WOE_NJ_ZENYNAGE",					&battle_config.kdw_NJ_ZENYNAGE,					150,	100,	300000,			},
+	{ "WOE_NJ_TATAMIGAESHI",				&battle_config.kdw_NJ_TATAMIGAESHI,				150,	100,	300000,			},
+	{ "WOE_NJ_KASUMIKIRI",					&battle_config.kdw_NJ_KASUMIKIRI,				150,	100,	300000,			},
+	{ "WOE_NJ_SHADOWJUMP",					&battle_config.kdw_NJ_SHADOWJUMP,				150,	100,	300000,			},
+	{ "WOE_NJ_KIRIKAGE",					&battle_config.kdw_NJ_KIRIKAGE,					150,	100,	300000,			},
+	{ "WOE_NJ_UTSUSEMI",					&battle_config.kdw_NJ_UTSUSEMI,					150,	100,	300000,			},
+	{ "WOE_NJ_BUNSINJYUTSU",				&battle_config.kdw_NJ_BUNSINJYUTSU,				150,	100,	300000,			},
+	{ "WOE_NJ_NINPOU",						&battle_config.kdw_NJ_NINPOU,					150,	100,	300000,			},
+	{ "WOE_NJ_KOUENKA",						&battle_config.kdw_NJ_KOUENKA,					150,	100,	300000,			},
+	{ "WOE_NJ_KAENSIN",						&battle_config.kdw_NJ_KAENSIN,					150,	100,	300000,			},
+	{ "WOE_NJ_BAKUENRYU",					&battle_config.kdw_NJ_BAKUENRYU,				150,	100,	300000,			},
+	{ "WOE_NJ_HYOUSENSOU",					&battle_config.kdw_NJ_HYOUSENSOU,				150,	100,	300000,			},
+	{ "WOE_NJ_SUITON",						&battle_config.kdw_NJ_SUITON,					150,	100,	300000,			},
+	{ "WOE_NJ_HYOUSYOURAKU",				&battle_config.kdw_NJ_HYOUSYOURAKU,				150,	100,	300000,			},
+	{ "WOE_NJ_HUUJIN",						&battle_config.kdw_NJ_HUUJIN,					150,	100,	300000,			},
+	{ "WOE_NJ_RAIGEKISAI",					&battle_config.kdw_NJ_RAIGEKISAI,				150,	100,	300000,			},
+	{ "WOE_NJ_KAMAITACHI",					&battle_config.kdw_NJ_KAMAITACHI,				150,	100,	300000,			},
+	{ "WOE_NJ_NEN",							&battle_config.kdw_NJ_NEN,						150,	100,	300000,			},
+	{ "WOE_NJ_ISSEN",						&battle_config.kdw_NJ_ISSEN,					150,	100,	300000,			},
+	{ "WOE_KN_CHARGEATK",					&battle_config.kdw_KN_CHARGEATK,				150,	100,	300000,			},
+	{ "WOE_AS_VENOMKNIFE",					&battle_config.kdw_AS_VENOMKNIFE,				150,	100,	300000,			},
+	{ "WOE_RG_CLOSECONFINE",				&battle_config.kdw_RG_CLOSECONFINE,				150,	100,	300000,			},
+	{ "WOE_WZ_SIGHTBLASTER",				&battle_config.kdw_WZ_SIGHTBLASTER,				150,	100,	300000,			},
+	{ "WOE_HT_PHANTASMIC",					&battle_config.kdw_HT_PHANTASMIC,				150,	100,	300000,			},
+	{ "WOE_BA_PANGVOICE",					&battle_config.kdw_BA_PANGVOICE,				150,	100,	300000,			},
+	{ "WOE_DC_WINKCHARM",					&battle_config.kdw_DC_WINKCHARM,				150,	100,	300000,			},
+	{ "WOE_PR_REDEMPTIO",					&battle_config.kdw_PR_REDEMPTIO,				150,	100,	300000,			},
+	{ "WOE_MO_KITRANSLATION",				&battle_config.kdw_MO_KITRANSLATION,			150,	100,	300000,			},
+	{ "WOE_MO_BALKYOUNG",					&battle_config.kdw_MO_BALKYOUNG,				150,	100,	300000,			},
+	{ "WOE_RK_SONICWAVE",					&battle_config.kdw_RK_SONICWAVE,				150,	100,	300000,			},
+	{ "WOE_RK_DEATHBOUND",					&battle_config.kdw_RK_DEATHBOUND,				150,	100,	300000,			},
+	{ "WOE_RK_HUNDREDSPEAR",				&battle_config.kdw_RK_HUNDREDSPEAR,				150,	100,	300000,			},
+	{ "WOE_RK_WINDCUTTER",					&battle_config.kdw_RK_WINDCUTTER,				150,	100,	300000,			},
+	{ "WOE_RK_IGNITIONBREAK",				&battle_config.kdw_RK_IGNITIONBREAK,			150,	100,	300000,			},
+	{ "WOE_RK_DRAGONBREATH",				&battle_config.kdw_RK_DRAGONBREATH,				150,	100,	300000,			},
+	{ "WOE_RK_CRUSHSTRIKE",					&battle_config.kdw_RK_CRUSHSTRIKE,				150,	100,	300000,			},
+	{ "WOE_RK_STORMBLAST",					&battle_config.kdw_RK_STORMBLAST,				150,	100,	300000,			},
+	{ "WOE_RK_PHANTOMTHRUST",				&battle_config.kdw_RK_PHANTOMTHRUST,			150,	100,	300000,			},
+	{ "WOE_GC_CROSSIMPACT",					&battle_config.kdw_GC_CROSSIMPACT,				150,	100,	300000,			},
+	{ "WOE_GC_WEAPONCRUSH",					&battle_config.kdw_GC_WEAPONCRUSH,				150,	100,	300000,			},
+	{ "WOE_GC_ROLLINGCUTTER",				&battle_config.kdw_GC_ROLLINGCUTTER,			150,	100,	300000,			},
+	{ "WOE_GC_CROSSRIPPERSLASHER",			&battle_config.kdw_GC_CROSSRIPPERSLASHER,		150,	100,	300000,			},
+	{ "WOE_AB_JUDEX",						&battle_config.kdw_AB_JUDEX,					150,	100,	300000,			},
+	{ "WOE_AB_ADORAMUS",					&battle_config.kdw_AB_ADORAMUS,					150,	100,	300000,			},
+	{ "WOE_AB_CHEAL",						&battle_config.kdw_AB_CHEAL,					150,	100,	300000,			},
+	{ "WOE_AB_EPICLESIS",					&battle_config.kdw_AB_EPICLESIS,				150,	100,	300000,			},
+	{ "WOE_AB_PRAEFATIO",					&battle_config.kdw_AB_PRAEFATIO,				150,	100,	300000,			},
+	{ "WOE_AB_EUCHARISTICA",				&battle_config.kdw_AB_EUCHARISTICA,				150,	100,	300000,			},
+	{ "WOE_AB_RENOVATIO",					&battle_config.kdw_AB_RENOVATIO,				150,	100,	300000,			},
+	{ "WOE_AB_HIGHNESSHEAL",				&battle_config.kdw_AB_HIGHNESSHEAL,				150,	100,	300000,			},
+	{ "WOE_AB_CLEARANCE",					&battle_config.kdw_AB_CLEARANCE,				150,	100,	300000,			},
+	{ "WOE_AB_EXPIATIO",					&battle_config.kdw_AB_EXPIATIO,					150,	100,	300000,			},
+	{ "WOE_AB_DUPLELIGHT",					&battle_config.kdw_AB_DUPLELIGHT,				150,	100,	300000,			},
+	{ "WOE_AB_DUPLELIGHT_MELEE",			&battle_config.kdw_AB_DUPLELIGHT_MELEE,			150,	100,	300000,			},
+	{ "WOE_AB_DUPLELIGHT_MAGIC",			&battle_config.kdw_AB_DUPLELIGHT_MAGIC,			150,	100,	300000,			},
+	{ "WOE_AB_SILENTIUM",					&battle_config.kdw_AB_SILENTIUM,				150,	100,	300000,			},
+	{ "WOE_WL_WHITEIMPRISON",				&battle_config.kdw_WL_WHITEIMPRISON,			150,	100,	300000,			},
+	{ "WOE_WL_SOULEXPANSION",				&battle_config.kdw_WL_SOULEXPANSION,			150,	100,	300000,			},
+	{ "WOE_WL_FROSTMISTY",					&battle_config.kdw_WL_FROSTMISTY,				150,	100,	300000,			},
+	{ "WOE_WL_JACKFROST",					&battle_config.kdw_WL_JACKFROST,				150,	100,	300000,			},
+	{ "WOE_WL_MARSHOFABYSS",				&battle_config.kdw_WL_MARSHOFABYSS,				150,	100,	300000,			},
+	{ "WOE_WL_RADIUS",						&battle_config.kdw_WL_RADIUS,					150,	100,	300000,			},
+	{ "WOE_WL_STASIS",						&battle_config.kdw_WL_STASIS,					150,	100,	300000,			},
+	{ "WOE_WL_DRAINLIFE",					&battle_config.kdw_WL_DRAINLIFE,				150,	100,	300000,			},
+	{ "WOE_WL_CRIMSONROCK",					&battle_config.kdw_WL_CRIMSONROCK,				150,	100,	300000,			},
+	{ "WOE_WL_HELLINFERNO",					&battle_config.kdw_WL_HELLINFERNO,				150,	100,	300000,			},
+	{ "WOE_WL_COMET",						&battle_config.kdw_WL_COMET,					150,	100,	300000,			},
+	{ "WOE_WL_CHAINLIGHTNING",				&battle_config.kdw_WL_CHAINLIGHTNING,			150,	100,	300000,			},
+	{ "WOE_WL_EARTHSTRAIN",					&battle_config.kdw_WL_EARTHSTRAIN,				150,	100,	300000,			},
+	{ "WOE_WL_TETRAVORTEX",					&battle_config.kdw_WL_TETRAVORTEX,				150,	100,	300000,			},
+	{ "WOE_WL_RELEASE",						&battle_config.kdw_WL_RELEASE,					150,	100,	300000,			},
+	{ "WOE_WL_READING_SB",					&battle_config.kdw_WL_READING_SB,				150,	100,	300000,			},
+	{ "WOE_WL_FREEZE_SP",					&battle_config.kdw_WL_FREEZE_SP,				150,	100,	300000,			},
+	{ "WOE_RA_ARROWSTORM",					&battle_config.kdw_RA_ARROWSTORM,				150,	100,	300000,			},
+	{ "WOE_RA_AIMEDBOLT",					&battle_config.kdw_RA_AIMEDBOLT,				150,	100,	300000,			},
+	{ "WOE_RA_WUGSTRIKE",					&battle_config.kdw_RA_WUGSTRIKE,				150,	100,	300000,			},
+	{ "WOE_RA_WUGBITE",						&battle_config.kdw_RA_WUGBITE,					150,	100,	300000,			},
+	{ "WOE_NC_BOOSTKNUCKLE",				&battle_config.kdw_NC_BOOSTKNUCKLE,				150,	100,	300000,			},
+	{ "WOE_NC_PILEBUNKER",					&battle_config.kdw_NC_PILEBUNKER,				150,	100,	300000,			},
+	{ "WOE_NC_VULCANARM",					&battle_config.kdw_NC_VULCANARM,				150,	100,	300000,			},
+	{ "WOE_NC_FLAMELAUNCHER",				&battle_config.kdw_NC_FLAMELAUNCHER,			150,	100,	300000,			},
+	{ "WOE_NC_COLDSLOWER",					&battle_config.kdw_NC_COLDSLOWER,				150,	100,	300000,			},
+	{ "WOE_NC_ARMSCANNON",					&battle_config.kdw_NC_ARMSCANNON,				150,	100,	300000,			},
+	{ "WOE_NC_ACCELERATION",				&battle_config.kdw_NC_ACCELERATION,				150,	100,	300000,			},
+	{ "WOE_NC_F_SIDESLIDE",					&battle_config.kdw_NC_F_SIDESLIDE,				150,	100,	300000,			},
+	{ "WOE_NC_B_SIDESLIDE",					&battle_config.kdw_NC_B_SIDESLIDE,				150,	100,	300000,			},
+	{ "WOE_NC_MAINFRAME",					&battle_config.kdw_NC_MAINFRAME,				150,	100,	300000,			},
+	{ "WOE_NC_SHAPESHIFT",					&battle_config.kdw_NC_SHAPESHIFT,				150,	100,	300000,			},
+	{ "WOE_NC_INFRAREDSCAN",				&battle_config.kdw_NC_INFRAREDSCAN,				150,	100,	300000,			},
+	{ "WOE_NC_ANALYZE",						&battle_config.kdw_NC_ANALYZE,					150,	100,	300000,			},
+	{ "WOE_NC_MAGNETICFIELD",				&battle_config.kdw_NC_MAGNETICFIELD,			150,	100,	300000,			},
+	{ "WOE_NC_NEUTRALBARRIER",				&battle_config.kdw_NC_NEUTRALBARRIER,			150,	100,	300000,			},
+	{ "WOE_NC_STEALTHFIELD",				&battle_config.kdw_NC_STEALTHFIELD,				150,	100,	300000,			},
+	{ "WOE_NC_AXEBOOMERANG",				&battle_config.kdw_NC_AXEBOOMERANG,				150,	100,	300000,			},
+	{ "WOE_NC_POWERSWING",					&battle_config.kdw_NC_POWERSWING,				150,	100,	300000,			},
+	{ "WOE_NC_AXETORNADO",					&battle_config.kdw_NC_AXETORNADO,				150,	100,	300000,			},
+	{ "WOE_NC_SILVERSNIPER",				&battle_config.kdw_NC_SILVERSNIPER,				150,	100,	300000,			},
+	{ "WOE_NC_MAGICDECOY",					&battle_config.kdw_NC_MAGICDECOY,				150,	100,	300000,			},
+	{ "WOE_NC_DISJOINT",					&battle_config.kdw_NC_DISJOINT,					150,	100,	300000,			},
+	{ "WOE_SC_FATALMENACE",					&battle_config.kdw_SC_FATALMENACE,				150,	100,	300000,			},
+	{ "WOE_SC_TRIANGLESHOT",				&battle_config.kdw_SC_TRIANGLESHOT,				150,	100,	300000,			},
+	{ "WOE_SC_INVISIBILITY",				&battle_config.kdw_SC_INVISIBILITY,				150,	100,	300000,			},
+	{ "WOE_SC_ENERVATION",					&battle_config.kdw_SC_ENERVATION,				150,	100,	300000,			},
+	{ "WOE_SC_GROOMY",						&battle_config.kdw_SC_GROOMY,					150,	100,	300000,			},
+	{ "WOE_SC_IGNORANCE",					&battle_config.kdw_SC_IGNORANCE,				150,	100,	300000,			},
+	{ "WOE_SC_LAZINESS",					&battle_config.kdw_SC_LAZINESS,					150,	100,	300000,			},
+	{ "WOE_SC_UNLUCKY",						&battle_config.kdw_SC_UNLUCKY,					150,	100,	300000,			},
+	{ "WOE_SC_WEAKNESS",					&battle_config.kdw_SC_WEAKNESS,					150,	100,	300000,			},
+	{ "WOE_SC_STRIPACCESSARY",				&battle_config.kdw_SC_STRIPACCESSARY,			150,	100,	300000,			},
+	{ "WOE_SC_MANHOLE",						&battle_config.kdw_SC_MANHOLE,					150,	100,	300000,			},
+	{ "WOE_SC_DIMENSIONDOOR",				&battle_config.kdw_SC_DIMENSIONDOOR,			150,	100,	300000,			},
+	{ "WOE_SC_CHAOSPANIC",					&battle_config.kdw_SC_CHAOSPANIC,				150,	100,	300000,			},
+	{ "WOE_SC_MAELSTROM",					&battle_config.kdw_SC_MAELSTROM,				150,	100,	300000,			},
+	{ "WOE_SC_BLOODYLUST",					&battle_config.kdw_SC_BLOODYLUST,				150,	100,	300000,			},
+	{ "WOE_SC_FEINTBOMB",					&battle_config.kdw_SC_FEINTBOMB,				150,	100,	300000,			},
+	{ "WOE_LG_CANNONSPEAR",					&battle_config.kdw_LG_CANNONSPEAR,				150,	100,	300000,			},
+	{ "WOE_LG_BANISHINGPOINT",				&battle_config.kdw_LG_BANISHINGPOINT,			150,	100,	300000,			},
+	{ "WOE_LG_TRAMPLE",						&battle_config.kdw_LG_TRAMPLE,					150,	100,	300000,			},
+	{ "WOE_LG_PINPOINTATTACK",				&battle_config.kdw_LG_PINPOINTATTACK,			150,	100,	300000,			},
+	{ "WOE_LG_RAGEBURST",					&battle_config.kdw_LG_RAGEBURST,				150,	100,	300000,			},
+	{ "WOE_LG_EXEEDBREAK",					&battle_config.kdw_LG_EXEEDBREAK,				150,	100,	300000,			},
+	{ "WOE_LG_OVERBRAND",					&battle_config.kdw_LG_OVERBRAND,				150,	100,	300000,			},
+	{ "WOE_LG_BANDING",						&battle_config.kdw_LG_BANDING,					150,	100,	300000,			},
+	{ "WOE_LG_MOONSLASHER",					&battle_config.kdw_LG_MOONSLASHER,				150,	100,	300000,			},
+	{ "WOE_LG_RAYOFGENESIS",				&battle_config.kdw_LG_RAYOFGENESIS,				150,	100,	300000,			},
+	{ "WOE_LG_PIETY",						&battle_config.kdw_LG_PIETY,					150,	100,	300000,			},
+	{ "WOE_LG_EARTHDRIVE",					&battle_config.kdw_LG_EARTHDRIVE,				150,	100,	300000,			},
+	{ "WOE_LG_HESPERUSLIT",					&battle_config.kdw_LG_HESPERUSLIT,				150,	100,	300000,			},
+	{ "WOE_SR_DRAGONCOMBO",					&battle_config.kdw_SR_DRAGONCOMBO,				150,	100,	300000,			},
+	{ "WOE_SR_SKYNETBLOW",					&battle_config.kdw_SR_SKYNETBLOW,				150,	100,	300000,			},
+	{ "WOE_SR_EARTHSHAKER",					&battle_config.kdw_SR_EARTHSHAKER,				150,	100,	300000,			},
+	{ "WOE_SR_FALLENEMPIRE",				&battle_config.kdw_SR_FALLENEMPIRE,				150,	100,	300000,			},
+	{ "WOE_SR_TIGERCANNON",					&battle_config.kdw_SR_TIGERCANNON,				150,	100,	300000,			},
+	{ "WOE_SR_HELLGATE",					&battle_config.kdw_SR_HELLGATE,					150,	100,	300000,			},
+	{ "WOE_SR_RAMPAGEBLASTER",				&battle_config.kdw_SR_RAMPAGEBLASTER,			150,	100,	300000,			},
+	{ "WOE_SR_CRESCENTELBOW",				&battle_config.kdw_SR_CRESCENTELBOW,			150,	100,	300000,			},
+	{ "WOE_SR_CURSEDCIRCLE",				&battle_config.kdw_SR_CURSEDCIRCLE,				150,	100,	300000,			},
+	{ "WOE_SR_LIGHTNINGWALK",				&battle_config.kdw_SR_LIGHTNINGWALK,			150,	100,	300000,			},
+	{ "WOE_SR_KNUCKLEARROW",				&battle_config.kdw_SR_KNUCKLEARROW,				150,	100,	300000,			},
+	{ "WOE_SR_WINDMILL",					&battle_config.kdw_SR_WINDMILL,					150,	100,	300000,			},
+	{ "WOE_SR_RAISINGDRAGON",				&battle_config.kdw_SR_RAISINGDRAGON,			150,	100,	300000,			},
+	{ "WOE_SR_GENTLETOUCH",					&battle_config.kdw_SR_GENTLETOUCH,				150,	100,	300000,			},
+	{ "WOE_SR_ASSIMILATEPOWER",				&battle_config.kdw_SR_ASSIMILATEPOWER,			150,	100,	300000,			},
+	{ "WOE_SR_POWERVELOCITY",				&battle_config.kdw_SR_POWERVELOCITY,			150,	100,	300000,			},
+	{ "WOE_SR_CRESCENTELBOW_AUTOSPELL",		&battle_config.kdw_SR_CRESCENTELBOW_AUTOSPELL,	150,	100,	300000,			},
+	{ "WOE_SR_GATEOFHELL",					&battle_config.kdw_SR_GATEOFHELL,				150,	100,	300000,			},
+	{ "WOE_SR_GENTLETOUCH_QUIET",			&battle_config.kdw_SR_GENTLETOUCH_QUIET,		150,	100,	300000,			},
+	{ "WOE_SR_GENTLETOUCH_CURE",			&battle_config.kdw_SR_GENTLETOUCH_CURE,			150,	100,	300000,			},
+	{ "WOE_SR_GENTLETOUCH_ENERGYGAIN",		&battle_config.kdw_SR_GENTLETOUCH_ENERGYGAIN,	150,	100,	300000,			},
+	{ "WOE_SR_GENTLETOUCH_CHANGE",			&battle_config.kdw_SR_GENTLETOUCH_CHANGE,		150,	100,	300000,			},
+	{ "WOE_SR_GENTLETOUCH_REVITALIZE",		&battle_config.kdw_SR_GENTLETOUCH_REVITALIZE,	150,	100,	300000,			},
+	{ "WOE_WA_SWING_DANCE",					&battle_config.kdw_WA_SWING_DANCE,				150,	100,	300000,			},
+	{ "WOE_WA_SYMPHONY_OF_LOVER",			&battle_config.kdw_WA_SYMPHONY_OF_LOVER,		150,	100,	300000,			},
+	{ "WOE_WA_MOONLIT_SERENADE",			&battle_config.kdw_WA_MOONLIT_SERENADE,			150,	100,	300000,			},
+	{ "WOE_MI_RUSH_WINDMILL",				&battle_config.kdw_MI_RUSH_WINDMILL,			150,	100,	300000,			},
+	{ "WOE_MI_ECHOSONG",					&battle_config.kdw_MI_ECHOSONG,					150,	100,	300000,			},
+	{ "WOE_MI_HARMONIZE",					&battle_config.kdw_MI_HARMONIZE,				150,	100,	300000,			},
+	{ "WOE_WM_LESSON",						&battle_config.kdw_WM_LESSON,					150,	100,	300000,			},
+	{ "WOE_WM_METALICSOUND",				&battle_config.kdw_WM_METALICSOUND,				150,	100,	300000,			},
+	{ "WOE_WM_REVERBERATION",				&battle_config.kdw_WM_REVERBERATION,			150,	100,	300000,			},
+	{ "WOE_WM_REVERBERATION_MELEE",			&battle_config.kdw_WM_REVERBERATION_MELEE,		150,	100,	300000,			},
+	{ "WOE_WM_REVERBERATION_MAGIC",			&battle_config.kdw_WM_REVERBERATION_MAGIC,		150,	100,	300000,			},
+	{ "WOE_WM_DOMINION_IMPULSE",			&battle_config.kdw_WM_DOMINION_IMPULSE,			150,	100,	300000,			},
+	{ "WOE_WM_SEVERE_RAINSTORM",			&battle_config.kdw_WM_SEVERE_RAINSTORM,			150,	100,	300000,			},
+	{ "WOE_WM_POEMOFNETHERWORLD",			&battle_config.kdw_WM_POEMOFNETHERWORLD,		150,	100,	300000,			},
+	{ "WOE_WM_VOICEOFSIREN",				&battle_config.kdw_WM_VOICEOFSIREN,				150,	100,	300000,			},
+	{ "WOE_WM_DEADHILLHERE",				&battle_config.kdw_WM_DEADHILLHERE,				150,	100,	300000,			},
+	{ "WOE_WM_LULLABY_DEEPSLEEP",			&battle_config.kdw_WM_LULLABY_DEEPSLEEP,		150,	100,	300000,			},
+	{ "WOE_WM_SIRCLEOFNATURE",				&battle_config.kdw_WM_SIRCLEOFNATURE,			150,	100,	300000,			},
+	{ "WOE_WM_RANDOMIZESPELL",				&battle_config.kdw_WM_RANDOMIZESPELL,			150,	100,	300000,			},
+	{ "WOE_WM_GLOOMYDAY",					&battle_config.kdw_WM_GLOOMYDAY,				150,	100,	300000,			},
+	{ "WOE_WM_GREAT_ECHO",					&battle_config.kdw_WM_GREAT_ECHO,				150,	100,	300000,			},
+	{ "WOE_WM_SONG_OF_MANA",				&battle_config.kdw_WM_SONG_OF_MANA,				150,	100,	300000,			},
+	{ "WOE_WM_DANCE_WITH_WUG",				&battle_config.kdw_WM_DANCE_WITH_WUG,			150,	100,	300000,			},
+	{ "WOE_WM_SOUND_OF_DESTRUCTION",		&battle_config.kdw_WM_SOUND_OF_DESTRUCTION,		150,	100,	300000,			},
+	{ "WOE_WM_SATURDAY_NIGHT_FEVER",		&battle_config.kdw_WM_SATURDAY_NIGHT_FEVER,		150,	100,	300000,			},
+	{ "WOE_WM_LERADS_DEW",					&battle_config.kdw_WM_LERADS_DEW,				150,	100,	300000,			},
+	{ "WOE_WM_MELODYOFSINK",				&battle_config.kdw_WM_MELODYOFSINK,				150,	100,	300000,			},
+	{ "WOE_WM_BEYOND_OF_WARCRY",			&battle_config.kdw_WM_BEYOND_OF_WARCRY,			150,	100,	300000,			},
+	{ "WOE_WM_UNLIMITED_HUMMING_VOICE",		&battle_config.kdw_WM_UNLIMITED_HUMMING_VOICE,	150,	100,	300000,			},
+	{ "WOE_SO_FIREWALK",					&battle_config.kdw_SO_FIREWALK,					150,	100,	300000,			},
+	{ "WOE_SO_ELECTRICWALK",				&battle_config.kdw_SO_ELECTRICWALK,				150,	100,	300000,			},
+	{ "WOE_SO_SPELLFIST",					&battle_config.kdw_SO_SPELLFIST,				150,	100,	300000,			},
+	{ "WOE_SO_EARTHGRAVE",					&battle_config.kdw_SO_EARTHGRAVE,				150,	100,	300000,			},
+	{ "WOE_SO_DIAMONDDUST",					&battle_config.kdw_SO_DIAMONDDUST,				150,	100,	300000,			},
+	{ "WOE_SO_POISON_BUSTER",				&battle_config.kdw_SO_POISON_BUSTER,			150,	100,	300000,			},
+	{ "WOE_SO_PSYCHIC_WAVE",				&battle_config.kdw_SO_PSYCHIC_WAVE,				150,	100,	300000,			},
+	{ "WOE_SO_CLOUD_KILL",					&battle_config.kdw_SO_CLOUD_KILL,				150,	100,	300000,			},
+	{ "WOE_SO_STRIKING",					&battle_config.kdw_SO_STRIKING,					150,	100,	300000,			},
+	{ "WOE_SO_WARMER",						&battle_config.kdw_SO_WARMER,					150,	100,	300000,			},
+	{ "WOE_SO_VACUUM_EXTREME",				&battle_config.kdw_SO_VACUUM_EXTREME,			150,	100,	300000,			},
+	{ "WOE_SO_VARETYR_SPEAR",				&battle_config.kdw_SO_VARETYR_SPEAR,			150,	100,	300000,			},
+	{ "WOE_SO_ARRULLO",						&battle_config.kdw_SO_ARRULLO,					150,	100,	300000,			},
+	{ "WOE_SO_EL_CONTROL",					&battle_config.kdw_SO_EL_CONTROL,				150,	100,	300000,			},
+	{ "WOE_SO_EL_ACTION",					&battle_config.kdw_SO_EL_ACTION,				150,	100,	300000,			},
+	{ "WOE_SO_EL_ANALYSIS",					&battle_config.kdw_SO_EL_ANALYSIS,				150,	100,	300000,			},
+	{ "WOE_SO_EL_SYMPATHY",					&battle_config.kdw_SO_EL_SYMPATHY,				150,	100,	300000,			},
+	{ "WOE_SO_EL_CURE",						&battle_config.kdw_SO_EL_CURE,					150,	100,	300000,			},
+	{ "WOE_GN_CART_TORNADO",				&battle_config.kdw_GN_CART_TORNADO,				150,	100,	300000,			},
+	{ "WOE_GN_CARTCANNON",					&battle_config.kdw_GN_CARTCANNON,				150,	100,	300000,			},
+	{ "WOE_GN_THORNS_TRAP",					&battle_config.kdw_GN_THORNS_TRAP,				150,	100,	300000,			},
+	{ "WOE_GN_BLOOD_SUCKER",				&battle_config.kdw_GN_BLOOD_SUCKER,				150,	100,	300000,			},
+	{ "WOE_GN_SPORE_EXPLOSION",				&battle_config.kdw_GN_SPORE_EXPLOSION,			150,	100,	300000,			},
+	{ "WOE_GN_WALLOFTHORN",					&battle_config.kdw_GN_WALLOFTHORN,				150,	100,	300000,			},
+	{ "WOE_GN_CRAZYWEED",					&battle_config.kdw_GN_CRAZYWEED,				150,	100,	300000,			},
+	{ "WOE_GN_DEMONIC_FIRE",				&battle_config.kdw_GN_DEMONIC_FIRE,				150,	100,	300000,			},
+	{ "WOE_GN_FIRE_EXPANSION",				&battle_config.kdw_GN_FIRE_EXPANSION,			150,	100,	300000,			},
+	{ "WOE_GN_HELLS_PLANT",					&battle_config.kdw_GN_HELLS_PLANT,				150,	100,	300000,			},
+	{ "WOE_GN_MANDRAGORA",					&battle_config.kdw_GN_MANDRAGORA,				150,	100,	300000,			},
+	{ "WOE_GN_SLINGITEM",					&battle_config.kdw_GN_SLINGITEM,				150,	100,	300000,			},
+	{ "WOE_GN_SLINGITEM_RANGEMELEEATK",		&battle_config.kdw_GN_SLINGITEM_RANGEMELEEATK,	150,	100,	300000,			},
+	{ "WOE_GN_CHANGEMATERIAL",				&battle_config.kdw_GN_CHANGEMATERIAL,			150,	100,	300000,			},
+	{ "WOE_AB_SECRAMENT",					&battle_config.kdw_AB_SECRAMENT,				150,	100,	300000,			},
+	{ "WOE_WM_SEVERE_RAINSTORM_MELEE",		&battle_config.kdw_WM_SEVERE_RAINSTORM_MELEE,	150,	100,	300000,			},
+	{ "WOE_SR_HOWLINGOFLION",				&battle_config.kdw_SR_HOWLINGOFLION,			150,	100,	300000,			},
+	{ "WOE_SR_RIDEINLIGHTNING",				&battle_config.kdw_SR_RIDEINLIGHTNING,			150,	100,	300000,			},
+	{ "WOE_LG_OVERBRAND_BRANDISH",			&battle_config.kdw_LG_OVERBRAND_BRANDISH,		150,	100,	300000,			},
+	{ "WOE_RL_GLITTERING_GREED",			&battle_config.kdw_RL_GLITTERING_GREED,			150,	100,	300000,			},
+	{ "WOE_RL_RICHS_COIN",					&battle_config.kdw_RL_RICHS_COIN,				150,	100,	300000,			},
+	{ "WOE_RL_MASS_SPIRAL",					&battle_config.kdw_RL_MASS_SPIRAL,				150,	100,	300000,			},
+	{ "WOE_RL_BANISHING_BUSTER",			&battle_config.kdw_RL_BANISHING_BUSTER,			150,	100,	300000,			},
+	{ "WOE_RL_B_TRAP",						&battle_config.kdw_RL_B_TRAP,					150,	100,	300000,			},
+	{ "WOE_RL_S_STORM",						&battle_config.kdw_RL_S_STORM,					150,	100,	300000,			},
+	{ "WOE_RL_E_CHAIN",						&battle_config.kdw_RL_E_CHAIN,					150,	100,	300000,			},
+	{ "WOE_RL_QD_SHOT",						&battle_config.kdw_RL_QD_SHOT,					150,	100,	300000,			},
+	{ "WOE_RL_C_MARKER",					&battle_config.kdw_RL_C_MARKER,					150,	100,	300000,			},
+	{ "WOE_RL_FIREDANCE",					&battle_config.kdw_RL_FIREDANCE,				150,	100,	300000,			},
+	{ "WOE_RL_H_MINE",						&battle_config.kdw_RL_H_MINE,					150,	100,	300000,			},
+	{ "WOE_RL_P_ALTER",						&battle_config.kdw_RL_P_ALTER,					150,	100,	300000,			},
+	{ "WOE_RL_FALLEN_ANGEL",				&battle_config.kdw_RL_FALLEN_ANGEL,				150,	100,	300000,			},
+	{ "WOE_RL_R_TRIP",						&battle_config.kdw_RL_R_TRIP,					150,	100,	300000,			},
+	{ "WOE_RL_D_TAIL",						&battle_config.kdw_RL_D_TAIL,					150,	100,	300000,			},
+	{ "WOE_RL_FIRE_RAIN",					&battle_config.kdw_RL_FIRE_RAIN,				150,	100,	300000,			},
+	{ "WOE_RL_HEAT_BARREL",					&battle_config.kdw_RL_HEAT_BARREL,				150,	100,	300000,			},
+	{ "WOE_RL_AM_BLAST",					&battle_config.kdw_RL_AM_BLAST,					150,	100,	300000,			},
+	{ "WOE_RL_SLUGSHOT",					&battle_config.kdw_RL_SLUGSHOT,					150,	100,	300000,			},
+	{ "WOE_RL_HAMMER_OF_GOD",				&battle_config.kdw_RL_HAMMER_OF_GOD,			150,	100,	300000,			},
+	{ "WOE_RL_B_FLICKER_ATK",				&battle_config.kdw_RL_B_FLICKER_ATK,			150,	100,	300000,			},
+	{ "WOE_KO_YAMIKUMO",					&battle_config.kdw_KO_YAMIKUMO,					150,	100,	300000,			},
+	{ "WOE_KO_JYUMONJIKIRI",				&battle_config.kdw_KO_JYUMONJIKIRI,				150,	100,	300000,			},
+	{ "WOE_KO_SETSUDAN",					&battle_config.kdw_KO_SETSUDAN,					150,	100,	300000,			},
+	{ "WOE_KO_BAKURETSU",					&battle_config.kdw_KO_BAKURETSU,				150,	100,	300000,			},
+	{ "WOE_KO_HAPPOKUNAI",					&battle_config.kdw_KO_HAPPOKUNAI,				150,	100,	300000,			},
+	{ "WOE_KO_MUCHANAGE",					&battle_config.kdw_KO_MUCHANAGE,				150,	100,	300000,			},
+	{ "WOE_KO_HUUMARANKA",					&battle_config.kdw_KO_HUUMARANKA,				150,	100,	300000,			},
+	{ "WOE_KO_MAKIBISHI",					&battle_config.kdw_KO_MAKIBISHI,				150,	100,	300000,			},
+	{ "WOE_KO_MEIKYOUSISUI",				&battle_config.kdw_KO_MEIKYOUSISUI,				150,	100,	300000,			},
+	{ "WOE_KO_ZANZOU",						&battle_config.kdw_KO_ZANZOU,					150,	100,	300000,			},
+	{ "WOE_KO_KYOUGAKU",					&battle_config.kdw_KO_KYOUGAKU,					150,	100,	300000,			},
+	{ "WOE_KO_JYUSATSU",					&battle_config.kdw_KO_JYUSATSU,					150,	100,	300000,			},
+	{ "WOE_KO_KAHU_ENTEN",					&battle_config.kdw_KO_KAHU_ENTEN,				150,	100,	300000,			},
+	{ "WOE_KO_HYOUHU_HUBUKI",				&battle_config.kdw_KO_HYOUHU_HUBUKI,			150,	100,	300000,			},
+	{ "WOE_KO_KAZEHU_SEIRAN",				&battle_config.kdw_KO_KAZEHU_SEIRAN,			150,	100,	300000,			},
+	{ "WOE_KO_DOHU_KOUKAI",					&battle_config.kdw_KO_DOHU_KOUKAI,				150,	100,	300000,			},
+	{ "WOE_KO_KAIHOU",						&battle_config.kdw_KO_KAIHOU,					150,	100,	300000,			},
+	{ "WOE_KO_ZENKAI",						&battle_config.kdw_KO_ZENKAI,					150,	100,	300000,			},
+	{ "WOE_KO_GENWAKU",						&battle_config.kdw_KO_GENWAKU,					150,	100,	300000,			},
+	{ "WOE_KO_IZAYOI",						&battle_config.kdw_KO_IZAYOI,					150,	100,	300000,			},
+	{ "WOE_KG_KAGEHUMI",					&battle_config.kdw_KG_KAGEHUMI,					150,	100,	300000,			},
+	{ "WOE_KG_KYOMU",						&battle_config.kdw_KG_KYOMU,					150,	100,	300000,			},
+	{ "WOE_KG_KAGEMUSYA",					&battle_config.kdw_KG_KAGEMUSYA,				150,	100,	300000,			},
+	{ "WOE_OB_ZANGETSU",					&battle_config.kdw_OB_ZANGETSU,					150,	100,	300000,			},
+	{ "WOE_OB_OBOROGENSOU",					&battle_config.kdw_OB_OBOROGENSOU,				150,	100,	300000,			},
+	{ "WOE_OB_AKAITSUKI",					&battle_config.kdw_OB_AKAITSUKI,				150,	100,	300000,			},
+	{ "WOE_GC_DARKCROW",					&battle_config.kdw_GC_DARKCROW,					150,	100,	300000,			},
+	{ "WOE_RA_UNLIMIT",						&battle_config.kdw_RA_UNLIMIT,					150,	100,	300000,			},
+	{ "WOE_GN_ILLUSIONDOPING",				&battle_config.kdw_GN_ILLUSIONDOPING,			150,	100,	300000,			},
+	{ "WOE_RK_DRAGONBREATH_WATER",			&battle_config.kdw_RK_DRAGONBREATH_WATER,		150,	100,	300000,			},
+	{ "WOE_RK_LUXANIMA",					&battle_config.kdw_RK_LUXANIMA,					150,	100,	300000,			},
+	{ "WOE_NC_MAGMA_ERUPTION",				&battle_config.kdw_NC_MAGMA_ERUPTION,			150,	100,	300000,			},
+	{ "WOE_WM_FRIGG_SONG",					&battle_config.kdw_WM_FRIGG_SONG,				150,	100,	300000,			},
+	{ "WOE_SO_ELEMENTAL_SHIELD",			&battle_config.kdw_SO_ELEMENTAL_SHIELD,			150,	100,	300000,			},
+	{ "WOE_SR_FLASHCOMBO",					&battle_config.kdw_SR_FLASHCOMBO,				150,	100,	300000,			},
+	{ "WOE_SC_ESCAPE",						&battle_config.kdw_SC_ESCAPE,					150,	100,	300000,			},
+	{ "WOE_AB_OFFERTORIUM",					&battle_config.kdw_AB_OFFERTORIUM,				150,	100,	300000,			},
+	{ "WOE_WL_TELEKINESIS_INTENSE",			&battle_config.kdw_WL_TELEKINESIS_INTENSE,		150,	100,	300000,			},
+	{ "WOE_ALL_FULL_THROTTLE",				&battle_config.kdw_ALL_FULL_THROTTLE,			150,	100,	300000,			},
+	{ "WOE_SU_BITE",						&battle_config.kdw_SU_BITE,						150,	100,	300000,			},
+	{ "WOE_SU_SCRATCH",						&battle_config.kdw_SU_SCRATCH,					150,	100,	300000,			},
+	{ "WOE_SU_STOOP",						&battle_config.kdw_SU_STOOP,					150,	100,	300000,			},
+	{ "WOE_SU_LOPE",						&battle_config.kdw_SU_LOPE,						150,	100,	300000,			},
+	{ "WOE_SU_SPRITEMABLE",					&battle_config.kdw_SU_SPRITEMABLE,				150,	100,	300000,			},
+	{ "WOE_SU_POWEROFLAND",					&battle_config.kdw_SU_POWEROFLAND,				150,	100,	300000,			},
+	{ "WOE_SU_SV_STEMSPEAR",				&battle_config.kdw_SU_SV_STEMSPEAR,				150,	100,	300000,			},
+	{ "WOE_SU_CN_POWDERING",				&battle_config.kdw_SU_CN_POWDERING,				150,	100,	300000,			},
+	{ "WOE_SU_CN_METEOR",					&battle_config.kdw_SU_CN_METEOR,				150,	100,	300000,			},
+	{ "WOE_SU_SV_ROOTTWIST",				&battle_config.kdw_SU_SV_ROOTTWIST,				150,	100,	300000,			},
+	{ "WOE_SU_POWEROFLIFE",					&battle_config.kdw_SU_POWEROFLIFE,				150,	100,	300000,			},
+	{ "WOE_SU_SCAROFTAROU",					&battle_config.kdw_SU_SCAROFTAROU,				150,	100,	300000,			},
+	{ "WOE_SU_PICKYPECK",					&battle_config.kdw_SU_PICKYPECK,				150,	100,	300000,			},
+	{ "WOE_SU_ARCLOUSEDASH",				&battle_config.kdw_SU_ARCLOUSEDASH,				150,	100,	300000,			},
+	{ "WOE_SU_LUNATICCARROTBEAT",			&battle_config.kdw_SU_LUNATICCARROTBEAT,		150,	100,	300000,			},
+	{ "WOE_SU_POWEROFSEA",					&battle_config.kdw_SU_POWEROFSEA,				150,	100,	300000,			},
+	{ "WOE_SU_TUNABELLY",					&battle_config.kdw_SU_TUNABELLY,				150,	100,	300000,			},
+	{ "WOE_SU_TUNAPARTY",					&battle_config.kdw_SU_TUNAPARTY,				150,	100,	300000,			},
+	{ "WOE_SU_BUNCHOFSHRIMP",				&battle_config.kdw_SU_BUNCHOFSHRIMP,			150,	100,	300000,			},
+	{ "WOE_SU_FRESHSHRIMP",					&battle_config.kdw_SU_FRESHSHRIMP,				150,	100,	300000,			},
+	{ "WOE_SU_CN_METEOR2",					&battle_config.kdw_SU_CN_METEOR2,				150,	100,	300000,			},
+	{ "WOE_SU_LUNATICCARROTBEAT2",			&battle_config.kdw_SU_LUNATICCARROTBEAT2,		150,	100,	300000,			},
+	{ "WOE_SU_SOULATTACK",					&battle_config.kdw_SU_SOULATTACK,				150,	100,	300000,			},
+	{ "WOE_SU_POWEROFFLOCK",				&battle_config.kdw_SU_POWEROFFLOCK,				150,	100,	300000,			},
+	{ "WOE_SU_SVG_SPIRIT",					&battle_config.kdw_SU_SVG_SPIRIT,				150,	100,	300000,			},
+	{ "WOE_SU_HISS",						&battle_config.kdw_SU_HISS,						150,	100,	300000,			},
+	{ "WOE_SU_NYANGGRASS",					&battle_config.kdw_SU_NYANGGRASS,				150,	100,	300000,			},
+	{ "WOE_SU_GROOMING",					&battle_config.kdw_SU_GROOMING,					150,	100,	300000,			},
+	{ "WOE_SU_PURRING",						&battle_config.kdw_SU_PURRING,					150,	100,	300000,			},
+	{ "WOE_SU_SHRIMPARTY",					&battle_config.kdw_SU_SHRIMPARTY,				150,	100,	300000,			},
+	{ "WOE_SU_SPIRITOFLIFE",				&battle_config.kdw_SU_SPIRITOFLIFE,				150,	100,	300000,			},
+	{ "WOE_SU_MEOWMEOW",					&battle_config.kdw_SU_MEOWMEOW,					150,	100,	300000,			},
+	{ "WOE_SU_SPIRITOFLAND",				&battle_config.kdw_SU_SPIRITOFLAND,				150,	100,	300000,			},
+	{ "WOE_SU_CHATTERING",					&battle_config.kdw_SU_CHATTERING,				150,	100,	300000,			},
+	{ "WOE_SU_SPIRITOFSEA",					&battle_config.kdw_SU_SPIRITOFSEA,				150,	100,	300000,			},
+	{ "WOE_CG_SPECIALSINGER",				&battle_config.kdw_CG_SPECIALSINGER,			150,	100,	300000,			},
+	{ "WOE_AB_VITUPERATUM",					&battle_config.kdw_AB_VITUPERATUM,				150,	100,	300000,			},
+	{ "WOE_AB_CONVENIO",					&battle_config.kdw_AB_CONVENIO,					150,	100,	300000,			},
+	{ "WOE_DK_SERVANTWEAPON",				&battle_config.kdw_DK_SERVANTWEAPON,			150,	100,	300000,			},
+	{ "WOE_DK_SERVANT_W_SIGN",				&battle_config.kdw_DK_SERVANT_W_SIGN,			150,	100,	300000,			},
+	{ "WOE_DK_SERVANT_W_PHANTOM",			&battle_config.kdw_DK_SERVANT_W_PHANTOM,		150,	100,	300000,			},
+	{ "WOE_DK_SERVANT_W_DEMOL",				&battle_config.kdw_DK_SERVANT_W_DEMOL,			150,	100,	300000,			},
+	{ "WOE_DK_CHARGINGPIERCE",				&battle_config.kdw_DK_CHARGINGPIERCE,			150,	100,	300000,			},
+	{ "WOE_DK_HACKANDSLASHER",				&battle_config.kdw_DK_HACKANDSLASHER,			150,	100,	300000,			},
+	{ "WOE_DK_DRAGONIC_AURA",				&battle_config.kdw_DK_DRAGONIC_AURA,			150,	100,	300000,			},
+	{ "WOE_DK_MADNESS_CRUSHER",				&battle_config.kdw_DK_MADNESS_CRUSHER,			150,	100,	300000,			},
+	{ "WOE_DK_VIGOR",						&battle_config.kdw_DK_VIGOR,					150,	100,	300000,			},
+	{ "WOE_DK_STORMSLASH",					&battle_config.kdw_DK_STORMSLASH,				150,	100,	300000,			},
+	{ "WOE_AG_DEADLY_PROJECTION",			&battle_config.kdw_AG_DEADLY_PROJECTION,		150,	100,	300000,			},
+	{ "WOE_AG_DESTRUCTIVE_HURRICANE",		&battle_config.kdw_AG_DESTRUCTIVE_HURRICANE,	150,	100,	300000,			},
+	{ "WOE_AG_RAIN_OF_CRYSTAL",				&battle_config.kdw_AG_RAIN_OF_CRYSTAL,			150,	100,	300000,			},
+	{ "WOE_AG_MYSTERY_ILLUSION",			&battle_config.kdw_AG_MYSTERY_ILLUSION,			150,	100,	300000,			},
+	{ "WOE_AG_VIOLENT_QUAKE",				&battle_config.kdw_AG_VIOLENT_QUAKE,			150,	100,	300000,			},
+	{ "WOE_AG_SOUL_VC_STRIKE",				&battle_config.kdw_AG_SOUL_VC_STRIKE,			150,	100,	300000,			},
+	{ "WOE_AG_STRANTUM_TREMOR",				&battle_config.kdw_AG_STRANTUM_TREMOR,			150,	100,	300000,			},
+	{ "WOE_AG_ALL_BLOOM",					&battle_config.kdw_AG_ALL_BLOOM,				150,	100,	300000,			},
+	{ "WOE_AG_CRYSTAL_IMPACT",				&battle_config.kdw_AG_CRYSTAL_IMPACT,			150,	100,	300000,			},
+	{ "WOE_AG_TORNADO_STORM",				&battle_config.kdw_AG_TORNADO_STORM,			150,	100,	300000,			},
+	{ "WOE_AG_FLORAL_FLARE_ROAD",			&battle_config.kdw_AG_FLORAL_FLARE_ROAD,		150,	100,	300000,			},
+	{ "WOE_AG_ASTRAL_STRIKE",				&battle_config.kdw_AG_ASTRAL_STRIKE,			150,	100,	300000,			},
+	{ "WOE_AG_CLIMAX",						&battle_config.kdw_AG_CLIMAX,					150,	100,	300000,			},
+	{ "WOE_AG_ROCK_DOWN",					&battle_config.kdw_AG_ROCK_DOWN,				150,	100,	300000,			},
+	{ "WOE_AG_STORM_CANNON",				&battle_config.kdw_AG_STORM_CANNON,				150,	100,	300000,			},
+	{ "WOE_AG_CRIMSON_ARROW",				&battle_config.kdw_AG_CRIMSON_ARROW,			150,	100,	300000,			},
+	{ "WOE_AG_FROZEN_SLASH",				&battle_config.kdw_AG_FROZEN_SLASH,				150,	100,	300000,			},
+	{ "WOE_IQ_POWERFUL_FAITH",				&battle_config.kdw_IQ_POWERFUL_FAITH,			150,	100,	300000,			},
+	{ "WOE_IQ_FIRM_FAITH",					&battle_config.kdw_IQ_FIRM_FAITH,				150,	100,	300000,			},
+	{ "WOE_IQ_WILL_OF_FAITH",				&battle_config.kdw_IQ_WILL_OF_FAITH,			150,	100,	300000,			},
+	{ "WOE_IQ_OLEUM_SANCTUM",				&battle_config.kdw_IQ_OLEUM_SANCTUM,			150,	100,	300000,			},
+	{ "WOE_IQ_SINCERE_FAITH",				&battle_config.kdw_IQ_SINCERE_FAITH,			150,	100,	300000,			},
+	{ "WOE_IQ_MASSIVE_F_BLASTER",			&battle_config.kdw_IQ_MASSIVE_F_BLASTER,		150,	100,	300000,			},
+	{ "WOE_IQ_EXPOSION_BLASTER",			&battle_config.kdw_IQ_EXPOSION_BLASTER,			150,	100,	300000,			},
+	{ "WOE_IQ_FIRST_BRAND",					&battle_config.kdw_IQ_FIRST_BRAND,				150,	100,	300000,			},
+	{ "WOE_IQ_FIRST_FAITH_POWER",			&battle_config.kdw_IQ_FIRST_FAITH_POWER,		150,	100,	300000,			},
+	{ "WOE_IQ_JUDGE",						&battle_config.kdw_IQ_JUDGE,					150,	100,	300000,			},
+	{ "WOE_IQ_SECOND_FLAME",				&battle_config.kdw_IQ_SECOND_FLAME,				150,	100,	300000,			},
+	{ "WOE_IQ_SECOND_FAITH",				&battle_config.kdw_IQ_SECOND_FAITH,				150,	100,	300000,			},
+	{ "WOE_IQ_SECOND_JUDGEMENT",			&battle_config.kdw_IQ_SECOND_JUDGEMENT,			150,	100,	300000,			},
+	{ "WOE_IQ_THIRD_PUNISH",				&battle_config.kdw_IQ_THIRD_PUNISH,				150,	100,	300000,			},
+	{ "WOE_IQ_THIRD_FLAME_BOMB",			&battle_config.kdw_IQ_THIRD_FLAME_BOMB,			150,	100,	300000,			},
+	{ "WOE_IQ_THIRD_CONSECRATION",			&battle_config.kdw_IQ_THIRD_CONSECRATION,		150,	100,	300000,			},
+	{ "WOE_IQ_THIRD_EXOR_FLAME",			&battle_config.kdw_IQ_THIRD_EXOR_FLAME,			150,	100,	300000,			},
+	{ "WOE_IG_GUARD_STANCE",				&battle_config.kdw_IG_GUARD_STANCE,				150,	100,	300000,			},
+	{ "WOE_IG_GUARDIAN_SHIELD",				&battle_config.kdw_IG_GUARDIAN_SHIELD,			150,	100,	300000,			},
+	{ "WOE_IG_REBOUND_SHIELD",				&battle_config.kdw_IG_REBOUND_SHIELD,			150,	100,	300000,			},
+	{ "WOE_IG_ATTACK_STANCE",				&battle_config.kdw_IG_ATTACK_STANCE,			150,	100,	300000,			},
+	{ "WOE_IG_ULTIMATE_SACRIFICE",			&battle_config.kdw_IG_ULTIMATE_SACRIFICE,		150,	100,	300000,			},
+	{ "WOE_IG_HOLY_SHIELD",					&battle_config.kdw_IG_HOLY_SHIELD,				150,	100,	300000,			},
+	{ "WOE_IG_GRAND_JUDGEMENT",				&battle_config.kdw_IG_GRAND_JUDGEMENT,			150,	100,	300000,			},
+	{ "WOE_IG_JUDGEMENT_CROSS",				&battle_config.kdw_IG_JUDGEMENT_CROSS,			150,	100,	300000,			},
+	{ "WOE_IG_SHIELD_SHOOTING",				&battle_config.kdw_IG_SHIELD_SHOOTING,			150,	100,	300000,			},
+	{ "WOE_IG_OVERSLASH",					&battle_config.kdw_IG_OVERSLASH,				150,	100,	300000,			},
+	{ "WOE_IG_CROSS_RAIN",					&battle_config.kdw_IG_CROSS_RAIN,				150,	100,	300000,			},
+	{ "WOE_CD_REPARATIO",					&battle_config.kdw_CD_REPARATIO,				150,	100,	300000,			},
+	{ "WOE_CD_MEDIALE_VOTUM",				&battle_config.kdw_CD_MEDIALE_VOTUM,			150,	100,	300000,			},
+	{ "WOE_CD_ARGUTUS_VITA",				&battle_config.kdw_CD_ARGUTUS_VITA,				150,	100,	300000,			},
+	{ "WOE_CD_ARGUTUS_TELUM",				&battle_config.kdw_CD_ARGUTUS_TELUM,			150,	100,	300000,			},
+	{ "WOE_CD_ARBITRIUM",					&battle_config.kdw_CD_ARBITRIUM,				150,	100,	300000,			},
+	{ "WOE_CD_PRESENS_ACIES",				&battle_config.kdw_CD_PRESENS_ACIES,			150,	100,	300000,			},
+	{ "WOE_CD_EFFLIGO",						&battle_config.kdw_CD_EFFLIGO,					150,	100,	300000,			},
+	{ "WOE_CD_COMPETENTIA",					&battle_config.kdw_CD_COMPETENTIA,				150,	100,	300000,			},
+	{ "WOE_CD_PNEUMATICUS_PROCELLA",		&battle_config.kdw_CD_PNEUMATICUS_PROCELLA,		150,	100,	300000,			},
+	{ "WOE_CD_DILECTIO_HEAL",				&battle_config.kdw_CD_DILECTIO_HEAL,			150,	100,	300000,			},
+	{ "WOE_CD_RELIGIO",						&battle_config.kdw_CD_RELIGIO,					150,	100,	300000,			},
+	{ "WOE_CD_BENEDICTUM",					&battle_config.kdw_CD_BENEDICTUM,				150,	100,	300000,			},
+	{ "WOE_CD_PETITIO",						&battle_config.kdw_CD_PETITIO,					150,	100,	300000,			},
+	{ "WOE_CD_FRAMEN",						&battle_config.kdw_CD_FRAMEN,					150,	100,	300000,			},
+	{ "WOE_SHC_SHADOW_EXCEED",				&battle_config.kdw_SHC_SHADOW_EXCEED,			150,	100,	300000,			},
+	{ "WOE_SHC_DANCING_KNIFE",				&battle_config.kdw_SHC_DANCING_KNIFE,			150,	100,	300000,			},
+	{ "WOE_SHC_SAVAGE_IMPACT",				&battle_config.kdw_SHC_SAVAGE_IMPACT,			150,	100,	300000,			},
+	{ "WOE_SHC_ETERNAL_SLASH",				&battle_config.kdw_SHC_ETERNAL_SLASH,			150,	100,	300000,			},
+	{ "WOE_SHC_POTENT_VENOM",				&battle_config.kdw_SHC_POTENT_VENOM,			150,	100,	300000,			},
+	{ "WOE_SHC_SHADOW_STAB",				&battle_config.kdw_SHC_SHADOW_STAB,				150,	100,	300000,			},
+	{ "WOE_SHC_IMPACT_CRATER",				&battle_config.kdw_SHC_IMPACT_CRATER,			150,	100,	300000,			},
+	{ "WOE_SHC_ENCHANTING_SHADOW",			&battle_config.kdw_SHC_ENCHANTING_SHADOW,		150,	100,	300000,			},
+	{ "WOE_SHC_FATAL_SHADOW_CROW",			&battle_config.kdw_SHC_FATAL_SHADOW_CROW,		150,	100,	300000,			},
+	{ "WOE_MT_AXE_STOMP",					&battle_config.kdw_MT_AXE_STOMP,				150,	100,	300000,			},
+	{ "WOE_MT_RUSH_QUAKE",					&battle_config.kdw_MT_RUSH_QUAKE,				150,	100,	300000,			},
+	{ "WOE_MT_M_MACHINE",					&battle_config.kdw_MT_M_MACHINE,				150,	100,	300000,			},
+	{ "WOE_MT_A_MACHINE",					&battle_config.kdw_MT_A_MACHINE,				150,	100,	300000,			},
+	{ "WOE_MT_D_MACHINE",					&battle_config.kdw_MT_D_MACHINE,				150,	100,	300000,			},
+	{ "WOE_MT_TWOAXEDEF",					&battle_config.kdw_MT_TWOAXEDEF,				150,	100,	300000,			},
+	{ "WOE_MT_ABR_M",						&battle_config.kdw_MT_ABR_M,					150,	100,	300000,			},
+	{ "WOE_MT_SUMMON_ABR_BATTLE_WARIOR",	&battle_config.kdw_MT_SUMMON_ABR_BATTLE_WARIOR,	150,	100,	300000,			},
+	{ "WOE_MT_SUMMON_ABR_DUAL_CANNON",		&battle_config.kdw_MT_SUMMON_ABR_DUAL_CANNON,	150,	100,	300000,			},
+	{ "WOE_MT_SUMMON_ABR_MOTHER_NET",		&battle_config.kdw_MT_SUMMON_ABR_MOTHER_NET,	150,	100,	300000,			},
+	{ "WOE_MT_SUMMON_ABR_INFINITY",			&battle_config.kdw_MT_SUMMON_ABR_INFINITY,		150,	100,	300000,			},
+	{ "WOE_AG_DESTRUCTIVE_HURRICANE_CLIMAX",&battle_config.kdw_AG_DESTRUCTIVE_HURRICANE_CLIMAX,150,	100,	300000,			},
+	{ "WOE_ABC_STRIP_SHADOW",				&battle_config.kdw_ABC_STRIP_SHADOW,			150,	100,	300000,			},
+	{ "WOE_ABC_ABYSS_DAGGER",				&battle_config.kdw_ABC_ABYSS_DAGGER,			150,	100,	300000,			},
+	{ "WOE_ABC_UNLUCKY_RUSH",				&battle_config.kdw_ABC_UNLUCKY_RUSH,			150,	100,	300000,			},
+	{ "WOE_ABC_CHAIN_REACTION_SHOT",		&battle_config.kdw_ABC_CHAIN_REACTION_SHOT,		150,	100,	300000,			},
+	{ "WOE_ABC_FROM_THE_ABYSS",				&battle_config.kdw_ABC_FROM_THE_ABYSS,			150,	100,	300000,			},
+	{ "WOE_ABC_ABYSS_SLAYER",				&battle_config.kdw_ABC_ABYSS_SLAYER,			150,	100,	300000,			},
+	{ "WOE_ABC_ABYSS_STRIKE",				&battle_config.kdw_ABC_ABYSS_STRIKE,			150,	100,	300000,			},
+	{ "WOE_ABC_DEFT_STAB",					&battle_config.kdw_ABC_DEFT_STAB,				150,	100,	300000,			},
+	{ "WOE_ABC_ABYSS_SQUARE",				&battle_config.kdw_ABC_ABYSS_SQUARE,			150,	100,	300000,			},
+	{ "WOE_ABC_FRENZY_SHOT",				&battle_config.kdw_ABC_FRENZY_SHOT,				150,	100,	300000,			},
+	{ "WOE_WH_NATUREFRIENDLY",				&battle_config.kdw_WH_NATUREFRIENDLY,			150,	100,	300000,			},
+	{ "WOE_WH_HAWKRUSH",					&battle_config.kdw_WH_HAWKRUSH,					150,	100,	300000,			},
+	{ "WOE_WH_HAWKBOOMERANG",				&battle_config.kdw_WH_HAWKBOOMERANG,			150,	100,	300000,			},
+	{ "WOE_WH_GALESTORM",					&battle_config.kdw_WH_GALESTORM,				150,	100,	300000,			},
+	{ "WOE_WH_DEEPBLINDTRAP",				&battle_config.kdw_WH_DEEPBLINDTRAP,			150,	100,	300000,			},
+	{ "WOE_WH_SOLIDTRAP",					&battle_config.kdw_WH_SOLIDTRAP,				150,	100,	300000,			},
+	{ "WOE_WH_SWIFTTRAP",					&battle_config.kdw_WH_SWIFTTRAP,				150,	100,	300000,			},
+	{ "WOE_WH_CRESCIVE_BOLT",				&battle_config.kdw_WH_CRESCIVE_BOLT,			150,	100,	300000,			},
+	{ "WOE_WH_FLAMETRAP",					&battle_config.kdw_WH_FLAMETRAP,				150,	100,	300000,			},
+	{ "WOE_BO_ACIDIFIED_ZONE_WATER",		&battle_config.kdw_BO_ACIDIFIED_ZONE_WATER,		150,	100,	300000,			},
+	{ "WOE_BO_ACIDIFIED_ZONE_GROUND",		&battle_config.kdw_BO_ACIDIFIED_ZONE_GROUND,	150,	100,	300000,			},
+	{ "WOE_BO_ACIDIFIED_ZONE_WIND",			&battle_config.kdw_BO_ACIDIFIED_ZONE_WIND,		150,	100,	300000,			},
+	{ "WOE_BO_ACIDIFIED_ZONE_FIRE",			&battle_config.kdw_BO_ACIDIFIED_ZONE_FIRE,		150,	100,	300000,			},
+	{ "WOE_TR_STAGE_MANNER",				&battle_config.kdw_TR_STAGE_MANNER,				150,	100,	300000,			},
+	{ "WOE_TR_ROSEBLOSSOM",					&battle_config.kdw_TR_ROSEBLOSSOM,				150,	100,	300000,			},
+	{ "WOE_TR_RHYTHMSHOOTING",				&battle_config.kdw_TR_RHYTHMSHOOTING,			150,	100,	300000,			},
+	{ "WOE_TR_METALIC_FURY",				&battle_config.kdw_TR_METALIC_FURY,				150,	100,	300000,			},
+	{ "WOE_EM_DIAMOND_STORM",				&battle_config.kdw_EM_DIAMOND_STORM,			150,	100,	300000,			},
+	{ "WOE_EM_LIGHTNING_LAND",				&battle_config.kdw_EM_LIGHTNING_LAND,			150,	100,	300000,			},
+	{ "WOE_EM_VENOM_SWAMP",					&battle_config.kdw_EM_VENOM_SWAMP,				150,	100,	300000,			},
+	{ "WOE_EM_CONFLAGRATION",				&battle_config.kdw_EM_CONFLAGRATION,			150,	100,	300000,			},
+	{ "WOE_EM_TERRA_DRIVE",					&battle_config.kdw_EM_TERRA_DRIVE,				150,	100,	300000,			},
+	{ "WOE_EM_ELEMENTAL_BUSTER",			&battle_config.kdw_EM_ELEMENTAL_BUSTER,			150,	100,	300000,			},
+	{ "WOE_BO_WOODEN_THROWROCK",			&battle_config.kdw_BO_WOODEN_THROWROCK,			150,	100,	300000,			},
+	{ "WOE_BO_WOODEN_ATTACK",				&battle_config.kdw_BO_WOODEN_ATTACK,			150,	100,	300000,			},
+	{ "WOE_BO_HELL_HOWLING",				&battle_config.kdw_BO_HELL_HOWLING,				150,	100,	300000,			},
+	{ "WOE_BO_HELL_DUSTY",					&battle_config.kdw_BO_HELL_DUSTY,				150,	100,	300000,			},
+	{ "WOE_BO_FAIRY_DUSTY",					&battle_config.kdw_BO_FAIRY_DUSTY,				150,	100,	300000,			},
+	{ "WOE_EM_ELEMENTAL_BUSTER_FIRE",		&battle_config.kdw_EM_ELEMENTAL_BUSTER_FIRE,	150,	100,	300000,			},
+	{ "WOE_EM_ELEMENTAL_BUSTER_WATER",		&battle_config.kdw_EM_ELEMENTAL_BUSTER_WATER,	150,	100,	300000,			},
+	{ "WOE_EM_ELEMENTAL_BUSTER_WIND",		&battle_config.kdw_EM_ELEMENTAL_BUSTER_WIND,	150,	100,	300000,			},
+	{ "WOE_EM_ELEMENTAL_BUSTER_GROUND",		&battle_config.kdw_EM_ELEMENTAL_BUSTER_GROUND,	150,	100,	300000,			},
+	{ "WOE_EM_ELEMENTAL_BUSTER_POISON",		&battle_config.kdw_EM_ELEMENTAL_BUSTER_POISON,	150,	100,	300000,			},
Index: src/custom/battle_config_struct.inc
===================================================================
--- src/custom/battle_config_struct.inc	(revision 8)
+++ src/custom/battle_config_struct.inc	(working copy)
@@ -11,4 +11,1366 @@
  * Format:
  *	 <datatype> name;
  **/
+	//===============================
+	// [keitenai] Delay System
+	//===============================
+	int KEITENAI_DELAY_SYSTEM;
+	int MAX_PACKET_COUNTER;
+	int kd_DEFAULT;
+	int kd_SM_BASH;
+	int kd_SM_MAGNUM;
+	int kd_MG_NAPALMBEAT;
+	int kd_MG_SOULSTRIKE;
+	int kd_MG_COLDBOLT;
+	int kd_MG_FROSTDIVER;
+	int kd_MG_STONECURSE;
+	int kd_MG_FIREBALL;
+	int kd_MG_FIREWALL;
+	int kd_MG_FIREBOLT;
+	int kd_MG_LIGHTNINGBOLT;
+	int kd_MG_THUNDERSTORM;
+	int kd_AL_HEAL;
+	int kd_AL_DECAGI;
+	int kd_AL_CRUCIS;
+	int kd_MC_MAMMONITE;
+	int kd_AC_DOUBLE;
+	int kd_AC_SHOWER;
+	int kd_TF_POISON;
+	int kd_KN_PIERCE;
+	int kd_KN_BRANDISHSPEAR;
+	int kd_KN_SPEARSTAB;
+	int kd_KN_SPEARBOOMERANG;
+	int kd_KN_BOWLINGBASH;
+	int kd_PR_LEXDIVINA;
+	int kd_PR_TURNUNDEAD;
+	int kd_PR_LEXAETERNA;
+	int kd_PR_MAGNUS;
+	int kd_WZ_FIREPILLAR;
+	int kd_WZ_SIGHTRASHER;
+	int kd_WZ_FIREIVY;
+	int kd_WZ_METEOR;
+	int kd_WZ_JUPITEL;
+	int kd_WZ_VERMILION;
+	int kd_WZ_WATERBALL;
+	int kd_WZ_ICEWALL;
+	int kd_WZ_FROSTNOVA;
+	int kd_WZ_STORMGUST;
+	int kd_WZ_EARTHSPIKE;
+	int kd_WZ_HEAVENDRIVE;
+	int kd_WZ_QUAGMIRE;
+	int kd_WZ_ESTIMATION;
+	int kd_BS_HAMMERFALL;
+	int kd_HT_BLITZBEAT;
+	int kd_AS_SONICBLOW;
+	int kd_AS_GRIMTOOTH;
+	int kd_AC_CHARGEARROW;
+	int kd_TF_BACKSLIDING;
+	int kd_MC_CARTREVOLUTION;
+	int kd_AL_HOLYLIGHT;
+	int kd_RG_BACKSTAP;
+	int kd_RG_RAID;
+	int kd_RG_GRAFFITI;
+	int kd_RG_FLAGGRAFFITI;
+	int kd_RG_COMPULSION;
+	int kd_RG_PLAGIARISM;
+	int kd_AM_DEMONSTRATION;
+	int kd_AM_ACIDTERROR;
+	int kd_AM_POTIONPITCHER;
+	int kd_AM_CANNIBALIZE;
+	int kd_AM_SPHEREMINE;
+	int kd_AM_FLAMECONTROL;
+	int kd_AM_DRILLMASTER;
+	int kd_CR_TRUST;
+	int kd_CR_SHIELDBOOMERANG;
+	int kd_CR_HOLYCROSS;
+	int kd_CR_GRANDCROSS;
+	int kd_MO_CALLSPIRITS;
+	int kd_MO_ABSORBSPIRITS;
+	int kd_MO_TRIPLEATTACK;
+	int kd_MO_BODYRELOCATION;
+	int kd_MO_INVESTIGATE;
+	int kd_MO_FINGEROFFENSIVE;
+	int kd_MO_EXPLOSIONSPIRITS;
+	int kd_MO_EXTREMITYFIST;
+	int kd_MO_CHAINCOMBO;
+	int kd_MO_COMBOFINISH;
+	int kd_SA_CASTCANCEL;
+	int kd_SA_SPELLBREAKER;
+	int kd_SA_DISPELL;
+	int kd_SA_ABRACADABRA;
+	int kd_SA_MONOCELL;
+	int kd_SA_CLASSCHANGE;
+	int kd_SA_SUMMONMONSTER;
+	int kd_SA_REVERSEORCISH;
+	int kd_SA_DEATH;
+	int kd_SA_FORTUNE;
+	int kd_SA_TAMINGMONSTER;
+	int kd_SA_QUESTION;
+	int kd_SA_GRAVITY;
+	int kd_SA_LEVELUP;
+	int kd_SA_INSTANTDEATH;
+	int kd_SA_FULLRECOVERY;
+	int kd_SA_COMA;
+	int kd_BD_ADAPTATION;
+	int kd_BD_ENCORE;
+	int kd_BD_LULLABY;
+	int kd_BD_RICHMANKIM;
+	int kd_BA_MUSICALSTRIKE;
+	int kd_BA_DISSONANCE;
+	int kd_BA_FROSTJOKER;
+	int kd_BA_WHISTLE;
+	int kd_BA_ASSASSINCROSS;
+	int kd_BA_POEMBRAGI;
+	int kd_BA_APPLEIDUN;
+	int kd_DC_THROWARROW;
+	int kd_DC_UGLYDANCE;
+	int kd_DC_SCREAM;
+	int kd_DC_HUMMING;
+	int kd_DC_DONTFORGETME;
+	int kd_DC_FORTUNEKISS;
+	int kd_DC_SERVICEFORYOU;
+	int kd_LK_FURY;
+	int kd_HW_MAGICCRASHER;
+	int kd_PA_PRESSURE;
+	int kd_CH_PALMSTRIKE;
+	int kd_CH_TIGERFIST;
+	int kd_CH_CHAINCRUSH;
+	int kd_PF_SOULCHANGE;
+	int kd_PF_SOULBURN;
+	int kd_ASC_BREAKER;
+	int kd_SN_FALCONASSAULT;
+	int kd_SN_SHARPSHOOTING;
+	int kd_CR_ALCHEMY;
+	int kd_CR_SYNTHESISPOTION;
+	int kd_CG_ARROWVULCAN;
+	int kd_CG_MOONLIT;
+	int kd_CG_MARIONETTE;
+	int kd_LK_SPIRALPIERCE;
+	int kd_LK_HEADCRUSH;
+	int kd_LK_JOINTBEAT;
+	int kd_HW_NAPALMVULCAN;
+	int kd_CH_SOULCOLLECT;
+	int kd_PF_MINDBREAKER;
+	int kd_PF_SPIDERWEB;
+	int kd_ASC_METEORASSAULT;
+	int kd_TK_STORMKICK;
+	int kd_TK_DOWNKICK;
+	int kd_TK_TURNKICK;
+	int kd_TK_JUMPKICK;
+	int kd_TK_POWER;
+	int kd_TK_HIGHJUMP;
+	int kd_SL_KAIZEL;
+	int kd_SL_KAAHI;
+	int kd_SL_KAUPE;
+	int kd_SL_KAITE;
+	int kd_SL_KAINA;
+	int kd_SL_STIN;
+	int kd_SL_STUN;
+	int kd_SL_SMA;
+	int kd_SL_SWOO;
+	int kd_SL_SKE;
+	int kd_SL_SKA;
+	int kd_ST_FULLSTRIP;
+	int kd_CR_SLIMPITCHER;
+	int kd_CR_FULLPROTECTION;
+	int kd_PA_SHIELDCHAIN;
+	int kd_HP_MANARECHARGE;
+	int kd_PF_DOUBLECASTING;
+	int kd_HW_GANBANTEIN;
+	int kd_HW_GRAVITATION;
+	int kd_WS_CARTTERMINATION;
+	int kd_CG_HERMODE;
+	int kd_CG_TAROTCARD;
+	int kd_CR_ACIDDEMONSTRATION;
+	int kd_SL_HIGH;
+	int kd_GS_TRIPLEACTION;
+	int kd_GS_BULLSEYE;
+	int kd_GS_MADNESSCANCEL;
+	int kd_GS_INCREASING;
+	int kd_GS_MAGICALBULLET;
+	int kd_GS_CRACKER;
+	int kd_GS_SINGLEACTION;
+	int kd_GS_CHAINACTION;
+	int kd_GS_TRACKING;
+	int kd_GS_DISARM;
+	int kd_GS_PIERCINGSHOT;
+	int kd_GS_RAPIDSHOWER;
+	int kd_GS_DESPERADO;
+	int kd_GS_GATLINGFEVER;
+	int kd_GS_DUST;
+	int kd_GS_FULLBUSTER;
+	int kd_GS_SPREADATTACK;
+	int kd_GS_GROUNDDRIFT;
+	int kd_NJ_TOBIDOUGU;
+	int kd_NJ_SYURIKEN;
+	int kd_NJ_KUNAI;
+	int kd_NJ_HUUMA;
+	int kd_NJ_ZENYNAGE;
+	int kd_NJ_TATAMIGAESHI;
+	int kd_NJ_KASUMIKIRI;
+	int kd_NJ_SHADOWJUMP;
+	int kd_NJ_KIRIKAGE;
+	int kd_NJ_UTSUSEMI;
+	int kd_NJ_BUNSINJYUTSU;
+	int kd_NJ_NINPOU;
+	int kd_NJ_KOUENKA;
+	int kd_NJ_KAENSIN;
+	int kd_NJ_BAKUENRYU;
+	int kd_NJ_HYOUSENSOU;
+	int kd_NJ_SUITON;
+	int kd_NJ_HYOUSYOURAKU;
+	int kd_NJ_HUUJIN;
+	int kd_NJ_RAIGEKISAI;
+	int kd_NJ_KAMAITACHI;
+	int kd_NJ_NEN;
+	int kd_NJ_ISSEN;
+	int kd_KN_CHARGEATK;
+	int kd_AS_VENOMKNIFE;
+	int kd_RG_CLOSECONFINE;
+	int kd_WZ_SIGHTBLASTER;
+	int kd_HT_PHANTASMIC;
+	int kd_BA_PANGVOICE;
+	int kd_DC_WINKCHARM;
+	int kd_PR_REDEMPTIO;
+	int kd_MO_KITRANSLATION;
+	int kd_MO_BALKYOUNG;
+	int kd_RK_SONICWAVE;
+	int kd_RK_DEATHBOUND;
+	int kd_RK_HUNDREDSPEAR;
+	int kd_RK_WINDCUTTER;
+	int kd_RK_IGNITIONBREAK;
+	int kd_RK_DRAGONBREATH;
+	int kd_RK_CRUSHSTRIKE;
+	int kd_RK_STORMBLAST;
+	int kd_RK_PHANTOMTHRUST;
+	int kd_GC_CROSSIMPACT;
+	int kd_GC_WEAPONCRUSH;
+	int kd_GC_ROLLINGCUTTER;
+	int kd_GC_CROSSRIPPERSLASHER;
+	int kd_AB_JUDEX;
+	int kd_AB_ADORAMUS;
+	int kd_AB_CHEAL;
+	int kd_AB_EPICLESIS;
+	int kd_AB_PRAEFATIO;
+	int kd_AB_EUCHARISTICA;
+	int kd_AB_RENOVATIO;
+	int kd_AB_HIGHNESSHEAL;
+	int kd_AB_CLEARANCE;
+	int kd_AB_EXPIATIO;
+	int kd_AB_DUPLELIGHT;
+	int kd_AB_DUPLELIGHT_MELEE;
+	int kd_AB_DUPLELIGHT_MAGIC;
+	int kd_AB_SILENTIUM;
+	int kd_WL_WHITEIMPRISON;
+	int kd_WL_SOULEXPANSION;
+	int kd_WL_FROSTMISTY;
+	int kd_WL_JACKFROST;
+	int kd_WL_MARSHOFABYSS;
+	int kd_WL_RADIUS;
+	int kd_WL_STASIS;
+	int kd_WL_DRAINLIFE;
+	int kd_WL_CRIMSONROCK;
+	int kd_WL_HELLINFERNO;
+	int kd_WL_COMET;
+	int kd_WL_CHAINLIGHTNING;
+	int kd_WL_EARTHSTRAIN;
+	int kd_WL_TETRAVORTEX;
+	int kd_WL_RELEASE;
+	int kd_WL_READING_SB;
+	int kd_WL_FREEZE_SP;
+	int kd_RA_ARROWSTORM;
+	int kd_RA_AIMEDBOLT;
+	int kd_RA_WUGSTRIKE;
+	int kd_RA_WUGBITE;
+	int kd_NC_BOOSTKNUCKLE;
+	int kd_NC_PILEBUNKER;
+	int kd_NC_VULCANARM;
+	int kd_NC_FLAMELAUNCHER;
+	int kd_NC_COLDSLOWER;
+	int kd_NC_ARMSCANNON;
+	int kd_NC_ACCELERATION;
+	int kd_NC_F_SIDESLIDE;
+	int kd_NC_B_SIDESLIDE;
+	int kd_NC_MAINFRAME;
+	int kd_NC_SHAPESHIFT;
+	int kd_NC_INFRAREDSCAN;
+	int kd_NC_ANALYZE;
+	int kd_NC_MAGNETICFIELD;
+	int kd_NC_NEUTRALBARRIER;
+	int kd_NC_STEALTHFIELD;
+	int kd_NC_AXEBOOMERANG;
+	int kd_NC_POWERSWING;
+	int kd_NC_AXETORNADO;
+	int kd_NC_SILVERSNIPER;
+	int kd_NC_MAGICDECOY;
+	int kd_NC_DISJOINT;
+	int kd_SC_FATALMENACE;
+	int kd_SC_TRIANGLESHOT;
+	int kd_SC_INVISIBILITY;
+	int kd_SC_ENERVATION;
+	int kd_SC_GROOMY;
+	int kd_SC_IGNORANCE;
+	int kd_SC_LAZINESS;
+	int kd_SC_UNLUCKY;
+	int kd_SC_WEAKNESS;
+	int kd_SC_STRIPACCESSARY;
+	int kd_SC_MANHOLE;
+	int kd_SC_DIMENSIONDOOR;
+	int kd_SC_CHAOSPANIC;
+	int kd_SC_MAELSTROM;
+	int kd_SC_BLOODYLUST;
+	int kd_SC_FEINTBOMB;
+	int kd_LG_CANNONSPEAR;
+	int kd_LG_BANISHINGPOINT;
+	int kd_LG_TRAMPLE;
+	int kd_LG_PINPOINTATTACK;
+	int kd_LG_RAGEBURST;
+	int kd_LG_EXEEDBREAK;
+	int kd_LG_OVERBRAND;
+	int kd_LG_BANDING;
+	int kd_LG_MOONSLASHER;
+	int kd_LG_RAYOFGENESIS;
+	int kd_LG_PIETY;
+	int kd_LG_EARTHDRIVE;
+	int kd_LG_HESPERUSLIT;
+	int kd_SR_DRAGONCOMBO;
+	int kd_SR_SKYNETBLOW;
+	int kd_SR_EARTHSHAKER;
+	int kd_SR_FALLENEMPIRE;
+	int kd_SR_TIGERCANNON;
+	int kd_SR_HELLGATE;
+	int kd_SR_RAMPAGEBLASTER;
+	int kd_SR_CRESCENTELBOW;
+	int kd_SR_CURSEDCIRCLE;
+	int kd_SR_LIGHTNINGWALK;
+	int kd_SR_KNUCKLEARROW;
+	int kd_SR_WINDMILL;
+	int kd_SR_RAISINGDRAGON;
+	int kd_SR_GENTLETOUCH;
+	int kd_SR_ASSIMILATEPOWER;
+	int kd_SR_POWERVELOCITY;
+	int kd_SR_CRESCENTELBOW_AUTOSPELL;
+	int kd_SR_GATEOFHELL;
+	int kd_SR_GENTLETOUCH_QUIET;
+	int kd_SR_GENTLETOUCH_CURE;
+	int kd_SR_GENTLETOUCH_ENERGYGAIN;
+	int kd_SR_GENTLETOUCH_CHANGE;
+	int kd_SR_GENTLETOUCH_REVITALIZE;
+	int kd_WA_SWING_DANCE;
+	int kd_WA_SYMPHONY_OF_LOVER;
+	int kd_WA_MOONLIT_SERENADE;
+	int kd_MI_RUSH_WINDMILL;
+	int kd_MI_ECHOSONG;
+	int kd_MI_HARMONIZE;
+	int kd_WM_LESSON;
+	int kd_WM_METALICSOUND;
+	int kd_WM_REVERBERATION;
+	int kd_WM_REVERBERATION_MELEE;
+	int kd_WM_REVERBERATION_MAGIC;
+	int kd_WM_DOMINION_IMPULSE;
+	int kd_WM_SEVERE_RAINSTORM;
+	int kd_WM_SEVERE_RAINSTORM_MELEE;
+	int kd_WM_POEMOFNETHERWORLD;
+	int kd_WM_VOICEOFSIREN;
+	int kd_WM_DEADHILLHERE;
+	int kd_WM_LULLABY_DEEPSLEEP;
+	int kd_WM_SIRCLEOFNATURE;
+	int kd_WM_RANDOMIZESPELL;
+	int kd_WM_GLOOMYDAY;
+	int kd_WM_GREAT_ECHO;
+	int kd_WM_SONG_OF_MANA;
+	int kd_WM_DANCE_WITH_WUG;
+	int kd_WM_SOUND_OF_DESTRUCTION;
+	int kd_WM_SATURDAY_NIGHT_FEVER;
+	int kd_WM_LERADS_DEW;
+	int kd_WM_MELODYOFSINK;
+	int kd_WM_BEYOND_OF_WARCRY;
+	int kd_WM_UNLIMITED_HUMMING_VOICE;
+	int kd_SO_FIREWALK;
+	int kd_SO_ELECTRICWALK;
+	int kd_SO_SPELLFIST;
+	int kd_SO_EARTHGRAVE;
+	int kd_SO_DIAMONDDUST;
+	int kd_SO_POISON_BUSTER;
+	int kd_SO_PSYCHIC_WAVE;
+	int kd_SO_CLOUD_KILL;
+	int kd_SO_STRIKING;
+	int kd_SO_WARMER;
+	int kd_SO_VACUUM_EXTREME;
+	int kd_SO_VARETYR_SPEAR;
+	int kd_SO_ARRULLO;
+	int kd_SO_EL_CONTROL;
+	int kd_SO_EL_ACTION;
+	int kd_SO_EL_ANALYSIS;
+	int kd_SO_EL_SYMPATHY;
+	int kd_SO_EL_CURE;
+	int kd_GN_CART_TORNADO;
+	int kd_GN_CARTCANNON;
+	int kd_GN_THORNS_TRAP;
+	int kd_GN_BLOOD_SUCKER;
+	int kd_GN_SPORE_EXPLOSION;
+	int kd_GN_WALLOFTHORN;
+	int kd_GN_CRAZYWEED;
+	int kd_GN_DEMONIC_FIRE;
+	int kd_GN_FIRE_EXPANSION;
+	int kd_GN_HELLS_PLANT;
+	int kd_GN_MANDRAGORA;
+	int kd_GN_SLINGITEM;
+	int kd_GN_SLINGITEM_RANGEMELEEATK;
+	int kd_GN_CHANGEMATERIAL;
+	int kd_AB_SECRAMENT;
+	int kd_SR_HOWLINGOFLION;
+	int kd_SR_RIDEINLIGHTNING;
+	int kd_LG_OVERBRAND_BRANDISH;
+	int kd_RL_GLITTERING_GREED;
+	int kd_RL_RICHS_COIN;
+	int kd_RL_MASS_SPIRAL;
+	int kd_RL_BANISHING_BUSTER;
+	int kd_RL_B_TRAP;
+	int kd_RL_S_STORM;
+	int kd_RL_E_CHAIN;
+	int kd_RL_QD_SHOT;
+	int kd_RL_C_MARKER;
+	int kd_RL_FIREDANCE;
+	int kd_RL_H_MINE;
+	int kd_RL_P_ALTER;
+	int kd_RL_FALLEN_ANGEL;
+	int kd_RL_R_TRIP;
+	int kd_RL_D_TAIL;
+	int kd_RL_FIRE_RAIN;
+	int kd_RL_HEAT_BARREL;
+	int kd_RL_AM_BLAST;
+	int kd_RL_SLUGSHOT;
+	int kd_RL_HAMMER_OF_GOD;
+	int kd_RL_B_FLICKER_ATK;
+	int kd_KO_YAMIKUMO;
+	int kd_KO_JYUMONJIKIRI;
+	int kd_KO_SETSUDAN;
+	int kd_KO_BAKURETSU;
+	int kd_KO_HAPPOKUNAI;
+	int kd_KO_MUCHANAGE;
+	int kd_KO_HUUMARANKA;
+	int kd_KO_MAKIBISHI;
+	int kd_KO_MEIKYOUSISUI;
+	int kd_KO_ZANZOU;
+	int kd_KO_KYOUGAKU;
+	int kd_KO_JYUSATSU;
+	int kd_KO_KAHU_ENTEN;
+	int kd_KO_HYOUHU_HUBUKI;
+	int kd_KO_KAZEHU_SEIRAN;
+	int kd_KO_DOHU_KOUKAI;
+	int kd_KO_KAIHOU;
+	int kd_KO_ZENKAI;
+	int kd_KO_GENWAKU;
+	int kd_KO_IZAYOI;
+	int kd_KG_KAGEHUMI;
+	int kd_KG_KYOMU;
+	int kd_KG_KAGEMUSYA;
+	int kd_OB_ZANGETSU;
+	int kd_OB_OBOROGENSOU;
+	int kd_OB_AKAITSUKI;
+	int kd_GC_DARKCROW;
+	int kd_RA_UNLIMIT;
+	int kd_GN_ILLUSIONDOPING;
+	int kd_RK_DRAGONBREATH_WATER;
+	int kd_RK_LUXANIMA;
+	int kd_NC_MAGMA_ERUPTION;
+	int kd_WM_FRIGG_SONG;
+	int kd_SO_ELEMENTAL_SHIELD;
+	int kd_SR_FLASHCOMBO;
+	int kd_SC_ESCAPE;
+	int kd_AB_OFFERTORIUM;
+	int kd_WL_TELEKINESIS_INTENSE;
+	int kd_ALL_FULL_THROTTLE;
+	int kd_SU_BITE;
+	int kd_SU_SCRATCH;
+	int kd_SU_STOOP;
+	int kd_SU_LOPE;
+	int kd_SU_SPRITEMABLE;
+	int kd_SU_POWEROFLAND;
+	int kd_SU_SV_STEMSPEAR;
+	int kd_SU_CN_POWDERING;
+	int kd_SU_CN_METEOR;
+	int kd_SU_SV_ROOTTWIST;
+	int kd_SU_POWEROFLIFE;
+	int kd_SU_SCAROFTAROU;
+	int kd_SU_PICKYPECK;
+	int kd_SU_ARCLOUSEDASH;
+	int kd_SU_LUNATICCARROTBEAT;
+	int kd_SU_POWEROFSEA;
+	int kd_SU_TUNABELLY;
+	int kd_SU_TUNAPARTY;
+	int kd_SU_BUNCHOFSHRIMP;
+	int kd_SU_FRESHSHRIMP;
+	int kd_SU_CN_METEOR2;
+	int kd_SU_LUNATICCARROTBEAT2;
+	int kd_SU_SOULATTACK;
+	int kd_SU_POWEROFFLOCK;
+	int kd_SU_SVG_SPIRIT;
+	int kd_SU_HISS;
+	int kd_SU_NYANGGRASS;
+	int kd_SU_GROOMING;
+	int kd_SU_PURRING;
+	int kd_SU_SHRIMPARTY;
+	int kd_SU_SPIRITOFLIFE;
+	int kd_SU_MEOWMEOW;
+	int kd_SU_SPIRITOFLAND;
+	int kd_SU_CHATTERING;
+	int kd_SU_SPIRITOFSEA;
+	int kd_CG_SPECIALSINGER;
+	int kd_AB_VITUPERATUM;
+	int kd_AB_CONVENIO;
+	int kd_DK_SERVANTWEAPON;
+	int kd_DK_SERVANT_W_SIGN;
+	int kd_DK_SERVANT_W_PHANTOM;
+	int kd_DK_SERVANT_W_DEMOL;
+	int kd_DK_CHARGINGPIERCE;
+	int kd_DK_HACKANDSLASHER;
+	int kd_DK_DRAGONIC_AURA;
+	int kd_DK_MADNESS_CRUSHER;
+	int kd_DK_VIGOR;
+	int kd_DK_STORMSLASH;
+	int kd_AG_DEADLY_PROJECTION;
+	int kd_AG_DESTRUCTIVE_HURRICANE;
+	int kd_AG_RAIN_OF_CRYSTAL;
+	int kd_AG_MYSTERY_ILLUSION;
+	int kd_AG_VIOLENT_QUAKE;
+	int kd_AG_SOUL_VC_STRIKE;
+	int kd_AG_STRANTUM_TREMOR;
+	int kd_AG_ALL_BLOOM;
+	int kd_AG_CRYSTAL_IMPACT;
+	int kd_AG_TORNADO_STORM;
+	int kd_AG_FLORAL_FLARE_ROAD;
+	int kd_AG_ASTRAL_STRIKE;
+	int kd_AG_CLIMAX;
+	int kd_AG_ROCK_DOWN;
+	int kd_AG_STORM_CANNON;
+	int kd_AG_CRIMSON_ARROW;
+	int kd_AG_FROZEN_SLASH;
+	int kd_IQ_POWERFUL_FAITH;
+	int kd_IQ_FIRM_FAITH;
+	int kd_IQ_WILL_OF_FAITH;
+	int kd_IQ_OLEUM_SANCTUM;
+	int kd_IQ_SINCERE_FAITH;
+	int kd_IQ_MASSIVE_F_BLASTER;
+	int kd_IQ_EXPOSION_BLASTER;
+	int kd_IQ_FIRST_BRAND;
+	int kd_IQ_FIRST_FAITH_POWER;
+	int kd_IQ_JUDGE;
+	int kd_IQ_SECOND_FLAME;
+	int kd_IQ_SECOND_FAITH;
+	int kd_IQ_SECOND_JUDGEMENT;
+	int kd_IQ_THIRD_PUNISH;
+	int kd_IQ_THIRD_FLAME_BOMB;
+	int kd_IQ_THIRD_CONSECRATION;
+	int kd_IQ_THIRD_EXOR_FLAME;
+	int kd_IG_GUARD_STANCE;
+	int kd_IG_GUARDIAN_SHIELD;
+	int kd_IG_REBOUND_SHIELD;
+	int kd_IG_ATTACK_STANCE;
+	int kd_IG_ULTIMATE_SACRIFICE;
+	int kd_IG_HOLY_SHIELD;
+	int kd_IG_GRAND_JUDGEMENT;
+	int kd_IG_JUDGEMENT_CROSS;
+	int kd_IG_SHIELD_SHOOTING;
+	int kd_IG_OVERSLASH;
+	int kd_IG_CROSS_RAIN;
+	int kd_CD_REPARATIO;
+	int kd_CD_MEDIALE_VOTUM;
+	int kd_CD_ARGUTUS_VITA;
+	int kd_CD_ARGUTUS_TELUM;
+	int kd_CD_ARBITRIUM;
+	int kd_CD_PRESENS_ACIES;
+	int kd_CD_EFFLIGO;
+	int kd_CD_COMPETENTIA;
+	int kd_CD_PNEUMATICUS_PROCELLA;
+	int kd_CD_DILECTIO_HEAL;
+	int kd_CD_RELIGIO;
+	int kd_CD_BENEDICTUM;
+	int kd_CD_PETITIO;
+	int kd_CD_FRAMEN;
+	int kd_SHC_SHADOW_EXCEED;
+	int kd_SHC_DANCING_KNIFE;
+	int kd_SHC_SAVAGE_IMPACT;
+	int kd_SHC_ETERNAL_SLASH;
+	int kd_SHC_POTENT_VENOM;
+	int kd_SHC_SHADOW_STAB;
+	int kd_SHC_IMPACT_CRATER;
+	int kd_SHC_ENCHANTING_SHADOW;
+	int kd_SHC_FATAL_SHADOW_CROW;
+	int kd_MT_AXE_STOMP;
+	int kd_MT_RUSH_QUAKE;
+	int kd_MT_M_MACHINE;
+	int kd_MT_A_MACHINE;
+	int kd_MT_D_MACHINE;
+	int kd_MT_TWOAXEDEF;
+	int kd_MT_ABR_M;
+	int kd_MT_SUMMON_ABR_BATTLE_WARIOR;
+	int kd_MT_SUMMON_ABR_DUAL_CANNON;
+	int kd_MT_SUMMON_ABR_MOTHER_NET;
+	int kd_MT_SUMMON_ABR_INFINITY;
+	int kd_AG_DESTRUCTIVE_HURRICANE_CLIMAX;
+	int kd_ABC_STRIP_SHADOW;
+	int kd_ABC_ABYSS_DAGGER;
+	int kd_ABC_UNLUCKY_RUSH;
+	int kd_ABC_CHAIN_REACTION_SHOT;
+	int kd_ABC_FROM_THE_ABYSS;
+	int kd_ABC_ABYSS_SLAYER;
+	int kd_ABC_ABYSS_STRIKE;
+	int kd_ABC_DEFT_STAB;
+	int kd_ABC_ABYSS_SQUARE;
+	int kd_ABC_FRENZY_SHOT;
+	int kd_WH_NATUREFRIENDLY;
+	int kd_WH_HAWKRUSH;
+	int kd_WH_HAWKBOOMERANG;
+	int kd_WH_GALESTORM;
+	int kd_WH_DEEPBLINDTRAP;
+	int kd_WH_SOLIDTRAP;
+	int kd_WH_SWIFTTRAP;
+	int kd_WH_CRESCIVE_BOLT;
+	int kd_WH_FLAMETRAP;
+	int kd_BO_ACIDIFIED_ZONE_WATER;
+	int kd_BO_ACIDIFIED_ZONE_GROUND;
+	int kd_BO_ACIDIFIED_ZONE_WIND;
+	int kd_BO_ACIDIFIED_ZONE_FIRE;
+	int kd_TR_STAGE_MANNER;
+	int kd_TR_ROSEBLOSSOM;
+	int kd_TR_RHYTHMSHOOTING;
+	int kd_TR_METALIC_FURY;
+	int kd_EM_DIAMOND_STORM;
+	int kd_EM_LIGHTNING_LAND;
+	int kd_EM_VENOM_SWAMP;
+	int kd_EM_CONFLAGRATION;
+	int kd_EM_TERRA_DRIVE;
+	int kd_EM_ELEMENTAL_BUSTER;
+	int kd_BO_WOODEN_THROWROCK;
+	int kd_BO_WOODEN_ATTACK;
+	int kd_BO_HELL_HOWLING;
+	int kd_BO_HELL_DUSTY;
+	int kd_BO_FAIRY_DUSTY;
+	int kd_EM_ELEMENTAL_BUSTER_FIRE;
+	int kd_EM_ELEMENTAL_BUSTER_WATER;
+	int kd_EM_ELEMENTAL_BUSTER_WIND;
+	int kd_EM_ELEMENTAL_BUSTER_GROUND;
+	int kd_EM_ELEMENTAL_BUSTER_POISON;
+	int kd_HLIF_BRAIN;
+	int kd_HFLI_MOON;
+	int kd_HFLI_SBR44;
+	int kd_HVAN_CAPRICE;
+	int kd_MH_NEEDLE_OF_PARALYZE;
+	int kd_MH_POISON_MIST;
+	int kd_MH_ERASER_CUTTER;
+	int kd_MH_XENO_SLASHER;
+	int kd_MH_SONIC_CRAW;
+	int kd_MH_SILVERVEIN_RUSH;
+	int kd_MH_MIDNIGHT_FRENZY;
+	int kd_MH_STAHL_HORN;
+	int kd_MH_GOLDENE_FERSE;
+	int kd_MH_HEILIGE_STANGE;
+	int kd_MH_TINDER_BREAKER;
+	int kd_MH_CBC;
+	int kd_MH_EQC;
+	int kd_MH_MAGMA_FLOW;
+	int kd_MH_LAVA_SLIDE;
+	int kd_EL_CIRCLE_OF_FIRE;
+	int kd_EL_FIRE_MANTLE;
+	int kd_EL_FIRE_ARROW;
+	int kd_EL_FIRE_BOMB;
+	int kd_EL_FIRE_WAVE;
+	int kd_EL_ICE_NEEDLE;
+	int kd_EL_WATER_SCREW;
+	int kd_EL_TIDAL_WEAPON;
+	int kd_EL_WIND_SLASH;
+	int kd_EL_HURRICANE;
+	int kd_EL_TYPOON_MIS;
+	int kd_EL_STONE_HAMMER;
+	int kd_EL_ROCK_CRUSHER;
+	int kd_EL_STONE_RAIN;
+	int kd_EM_EL_FLAMEROCK;
+	int kd_EM_EL_AGE_OF_ICE;
+	int kd_EM_EL_STORM_WIND;
+	int kd_EM_EL_AVALANCHE;
+	int kd_EM_EL_DEADLY_POISON;
+	int kd_ABR_BATTLE_BUSTER;
+	int kd_ABR_DUAL_CANNON_FIRE;
+	int kd_ABR_INFINITY_BUSTER;
 
+	// WoE [keitenai] skill delay
+	int KEITENAI_SHOW_DELAY;
+	int kdw_DEFAULT;
+	int kdw_SM_BASH;
+	int kdw_SM_MAGNUM;
+	int kdw_MG_NAPALMBEAT;
+	int kdw_MG_SOULSTRIKE;
+	int kdw_MG_COLDBOLT;
+	int kdw_MG_FROSTDIVER;
+	int kdw_MG_STONECURSE;
+	int kdw_MG_FIREBALL;
+	int kdw_MG_FIREWALL;
+	int kdw_MG_FIREBOLT;
+	int kdw_MG_LIGHTNINGBOLT;
+	int kdw_MG_THUNDERSTORM;
+	int kdw_AL_HEAL;
+	int kdw_AL_DECAGI;
+	int kdw_AL_CRUCIS;
+	int kdw_MC_MAMMONITE;
+	int kdw_AC_DOUBLE;
+	int kdw_AC_SHOWER;
+	int kdw_TF_POISON;
+	int kdw_KN_PIERCE;
+	int kdw_KN_BRANDISHSPEAR;
+	int kdw_KN_SPEARSTAB;
+	int kdw_KN_SPEARBOOMERANG;
+	int kdw_KN_BOWLINGBASH;
+	int kdw_PR_LEXDIVINA;
+	int kdw_PR_TURNUNDEAD;
+	int kdw_PR_LEXAETERNA;
+	int kdw_PR_MAGNUS;
+	int kdw_WZ_FIREPILLAR;
+	int kdw_WZ_SIGHTRASHER;
+	int kdw_WZ_FIREIVY;
+	int kdw_WZ_METEOR;
+	int kdw_WZ_JUPITEL;
+	int kdw_WZ_VERMILION;
+	int kdw_WZ_WATERBALL;
+	int kdw_WZ_ICEWALL;
+	int kdw_WZ_FROSTNOVA;
+	int kdw_WZ_STORMGUST;
+	int kdw_WZ_EARTHSPIKE;
+	int kdw_WZ_HEAVENDRIVE;
+	int kdw_WZ_QUAGMIRE;
+	int kdw_WZ_ESTIMATION;
+	int kdw_BS_HAMMERFALL;
+	int kdw_HT_BLITZBEAT;
+	int kdw_AS_SONICBLOW;
+	int kdw_AS_GRIMTOOTH;
+	int kdw_AC_CHARGEARROW;
+	int kdw_TF_BACKSLIDING;
+	int kdw_MC_CARTREVOLUTION;
+	int kdw_AL_HOLYLIGHT;
+	int kdw_RG_BACKSTAP;
+	int kdw_RG_RAID;
+	int kdw_RG_GRAFFITI;
+	int kdw_RG_FLAGGRAFFITI;
+	int kdw_RG_COMPULSION;
+	int kdw_RG_PLAGIARISM;
+	int kdw_AM_DEMONSTRATION;
+	int kdw_AM_ACIDTERROR;
+	int kdw_AM_POTIONPITCHER;
+	int kdw_AM_CANNIBALIZE;
+	int kdw_AM_SPHEREMINE;
+	int kdw_AM_FLAMECONTROL;
+	int kdw_AM_DRILLMASTER;
+	int kdw_CR_TRUST;
+	int kdw_CR_SHIELDBOOMERANG;
+	int kdw_CR_HOLYCROSS;
+	int kdw_CR_GRANDCROSS;
+	int kdw_MO_CALLSPIRITS;
+	int kdw_MO_ABSORBSPIRITS;
+	int kdw_MO_BODYRELOCATION;
+	int kdw_MO_INVESTIGATE;
+	int kdw_MO_FINGEROFFENSIVE;
+	int kdw_MO_EXPLOSIONSPIRITS;
+	int kdw_MO_EXTREMITYFIST;
+	int kdw_MO_CHAINCOMBO;
+	int kdw_MO_COMBOFINISH;
+	int kdw_SA_CASTCANCEL;
+	int kdw_SA_SPELLBREAKER;
+	int kdw_SA_DISPELL;
+	int kdw_SA_ABRACADABRA;
+	int kdw_SA_MONOCELL;
+	int kdw_SA_CLASSCHANGE;
+	int kdw_SA_SUMMONMONSTER;
+	int kdw_SA_REVERSEORCISH;
+	int kdw_SA_DEATH;
+	int kdw_SA_FORTUNE;
+	int kdw_SA_TAMINGMONSTER;
+	int kdw_SA_QUESTION;
+	int kdw_SA_GRAVITY;
+	int kdw_SA_LEVELUP;
+	int kdw_SA_INSTANTDEATH;
+	int kdw_SA_FULLRECOVERY;
+	int kdw_SA_COMA;
+	int kdw_BD_ADAPTATION;
+	int kdw_BD_ENCORE;
+	int kdw_BD_LULLABY;
+	int kdw_BD_RICHMANKIM;
+	int kdw_BA_MUSICALSTRIKE;
+	int kdw_BA_DISSONANCE;
+	int kdw_BA_FROSTJOKER;
+	int kdw_BA_WHISTLE;
+	int kdw_BA_ASSASSINCROSS;
+	int kdw_BA_POEMBRAGI;
+	int kdw_BA_APPLEIDUN;
+	int kdw_DC_THROWARROW;
+	int kdw_DC_UGLYDANCE;
+	int kdw_DC_SCREAM;
+	int kdw_DC_HUMMING;
+	int kdw_DC_DONTFORGETME;
+	int kdw_DC_FORTUNEKISS;
+	int kdw_DC_SERVICEFORYOU;
+	int kdw_LK_FURY;
+	int kdw_HW_MAGICCRASHER;
+	int kdw_PA_PRESSURE;
+	int kdw_CH_PALMSTRIKE;
+	int kdw_CH_TIGERFIST;
+	int kdw_CH_CHAINCRUSH;
+	int kdw_PF_SOULCHANGE;
+	int kdw_PF_SOULBURN;
+	int kdw_ASC_BREAKER;
+	int kdw_SN_FALCONASSAULT;
+	int kdw_SN_SHARPSHOOTING;
+	int kdw_CR_ALCHEMY;
+	int kdw_CR_SYNTHESISPOTION;
+	int kdw_CG_ARROWVULCAN;
+	int kdw_CG_MOONLIT;
+	int kdw_CG_MARIONETTE;
+	int kdw_LK_SPIRALPIERCE;
+	int kdw_LK_HEADCRUSH;
+	int kdw_LK_JOINTBEAT;
+	int kdw_HW_NAPALMVULCAN;
+	int kdw_CH_SOULCOLLECT;
+	int kdw_PF_MINDBREAKER;
+	int kdw_PF_SPIDERWEB;
+	int kdw_ASC_METEORASSAULT;
+	int kdw_TK_STORMKICK;
+	int kdw_TK_DOWNKICK;
+	int kdw_TK_TURNKICK;
+	int kdw_TK_JUMPKICK;
+	int kdw_TK_POWER;
+	int kdw_TK_HIGHJUMP;
+	int kdw_SL_KAIZEL;
+	int kdw_SL_KAAHI;
+	int kdw_SL_KAUPE;
+	int kdw_SL_KAITE;
+	int kdw_SL_KAINA;
+	int kdw_SL_STIN;
+	int kdw_SL_STUN;
+	int kdw_SL_SMA;
+	int kdw_SL_SWOO;
+	int kdw_SL_SKE;
+	int kdw_SL_SKA;
+	int kdw_ST_FULLSTRIP;
+	int kdw_CR_SLIMPITCHER;
+	int kdw_CR_FULLPROTECTION;
+	int kdw_PA_SHIELDCHAIN;
+	int kdw_HP_MANARECHARGE;
+	int kdw_PF_DOUBLECASTING;
+	int kdw_HW_GANBANTEIN;
+	int kdw_HW_GRAVITATION;
+	int kdw_WS_CARTTERMINATION;
+	int kdw_CG_HERMODE;
+	int kdw_CG_TAROTCARD;
+	int kdw_CR_ACIDDEMONSTRATION;
+	int kdw_SL_HIGH;
+	int kdw_GS_TRIPLEACTION;
+	int kdw_GS_BULLSEYE;
+	int kdw_GS_MADNESSCANCEL;
+	int kdw_GS_INCREASING;
+	int kdw_GS_MAGICALBULLET;
+	int kdw_GS_CRACKER;
+	int kdw_GS_SINGLEACTION;
+	int kdw_GS_CHAINACTION;
+	int kdw_GS_TRACKING;
+	int kdw_GS_DISARM;
+	int kdw_GS_PIERCINGSHOT;
+	int kdw_GS_RAPIDSHOWER;
+	int kdw_GS_DESPERADO;
+	int kdw_GS_GATLINGFEVER;
+	int kdw_GS_DUST;
+	int kdw_GS_FULLBUSTER;
+	int kdw_GS_SPREADATTACK;
+	int kdw_GS_GROUNDDRIFT;
+	int kdw_NJ_TOBIDOUGU;
+	int kdw_NJ_SYURIKEN;
+	int kdw_NJ_KUNAI;
+	int kdw_NJ_HUUMA;
+	int kdw_NJ_ZENYNAGE;
+	int kdw_NJ_TATAMIGAESHI;
+	int kdw_NJ_KASUMIKIRI;
+	int kdw_NJ_SHADOWJUMP;
+	int kdw_NJ_KIRIKAGE;
+	int kdw_NJ_UTSUSEMI;
+	int kdw_NJ_BUNSINJYUTSU;
+	int kdw_NJ_NINPOU;
+	int kdw_NJ_KOUENKA;
+	int kdw_NJ_KAENSIN;
+	int kdw_NJ_BAKUENRYU;
+	int kdw_NJ_HYOUSENSOU;
+	int kdw_NJ_SUITON;
+	int kdw_NJ_HYOUSYOURAKU;
+	int kdw_NJ_HUUJIN;
+	int kdw_NJ_RAIGEKISAI;
+	int kdw_NJ_KAMAITACHI;
+	int kdw_NJ_NEN;
+	int kdw_NJ_ISSEN;
+	int kdw_KN_CHARGEATK;
+	int kdw_AS_VENOMKNIFE;
+	int kdw_RG_CLOSECONFINE;
+	int kdw_WZ_SIGHTBLASTER;
+	int kdw_HT_PHANTASMIC;
+	int kdw_BA_PANGVOICE;
+	int kdw_DC_WINKCHARM;
+	int kdw_PR_REDEMPTIO;
+	int kdw_MO_KITRANSLATION;
+	int kdw_MO_BALKYOUNG;
+	int kdw_RK_SONICWAVE;
+	int kdw_RK_DEATHBOUND;
+	int kdw_RK_HUNDREDSPEAR;
+	int kdw_RK_WINDCUTTER;
+	int kdw_RK_IGNITIONBREAK;
+	int kdw_RK_DRAGONBREATH;
+	int kdw_RK_CRUSHSTRIKE;
+	int kdw_RK_STORMBLAST;
+	int kdw_RK_PHANTOMTHRUST;
+	int kdw_GC_CROSSIMPACT;
+	int kdw_GC_WEAPONCRUSH;
+	int kdw_GC_ROLLINGCUTTER;
+	int kdw_GC_CROSSRIPPERSLASHER;
+	int kdw_AB_JUDEX;
+	int kdw_AB_ADORAMUS;
+	int kdw_AB_CHEAL;
+	int kdw_AB_EPICLESIS;
+	int kdw_AB_PRAEFATIO;
+	int kdw_AB_EUCHARISTICA;
+	int kdw_AB_RENOVATIO;
+	int kdw_AB_HIGHNESSHEAL;
+	int kdw_AB_CLEARANCE;
+	int kdw_AB_EXPIATIO;
+	int kdw_AB_DUPLELIGHT;
+	int kdw_AB_DUPLELIGHT_MELEE;
+	int kdw_AB_DUPLELIGHT_MAGIC;
+	int kdw_AB_SILENTIUM;
+	int kdw_WL_WHITEIMPRISON;
+	int kdw_WL_SOULEXPANSION;
+	int kdw_WL_FROSTMISTY;
+	int kdw_WL_JACKFROST;
+	int kdw_WL_MARSHOFABYSS;
+	int kdw_WL_RADIUS;
+	int kdw_WL_STASIS;
+	int kdw_WL_DRAINLIFE;
+	int kdw_WL_CRIMSONROCK;
+	int kdw_WL_HELLINFERNO;
+	int kdw_WL_COMET;
+	int kdw_WL_CHAINLIGHTNING;
+	int kdw_WL_EARTHSTRAIN;
+	int kdw_WL_TETRAVORTEX;
+	int kdw_WL_RELEASE;
+	int kdw_WL_READING_SB;
+	int kdw_WL_FREEZE_SP;
+	int kdw_RA_ARROWSTORM;
+	int kdw_RA_AIMEDBOLT;
+	int kdw_RA_WUGSTRIKE;
+	int kdw_RA_WUGBITE;
+	int kdw_NC_BOOSTKNUCKLE;
+	int kdw_NC_PILEBUNKER;
+	int kdw_NC_VULCANARM;
+	int kdw_NC_FLAMELAUNCHER;
+	int kdw_NC_COLDSLOWER;
+	int kdw_NC_ARMSCANNON;
+	int kdw_NC_ACCELERATION;
+	int kdw_NC_F_SIDESLIDE;
+	int kdw_NC_B_SIDESLIDE;
+	int kdw_NC_MAINFRAME;
+	int kdw_NC_SHAPESHIFT;
+	int kdw_NC_INFRAREDSCAN;
+	int kdw_NC_ANALYZE;
+	int kdw_NC_MAGNETICFIELD;
+	int kdw_NC_NEUTRALBARRIER;
+	int kdw_NC_STEALTHFIELD;
+	int kdw_NC_AXEBOOMERANG;
+	int kdw_NC_POWERSWING;
+	int kdw_NC_AXETORNADO;
+	int kdw_NC_SILVERSNIPER;
+	int kdw_NC_MAGICDECOY;
+	int kdw_NC_DISJOINT;
+	int kdw_SC_FATALMENACE;
+	int kdw_SC_TRIANGLESHOT;
+	int kdw_SC_INVISIBILITY;
+	int kdw_SC_ENERVATION;
+	int kdw_SC_GROOMY;
+	int kdw_SC_IGNORANCE;
+	int kdw_SC_LAZINESS;
+	int kdw_SC_UNLUCKY;
+	int kdw_SC_WEAKNESS;
+	int kdw_SC_STRIPACCESSARY;
+	int kdw_SC_MANHOLE;
+	int kdw_SC_DIMENSIONDOOR;
+	int kdw_SC_CHAOSPANIC;
+	int kdw_SC_MAELSTROM;
+	int kdw_SC_BLOODYLUST;
+	int kdw_SC_FEINTBOMB;
+	int kdw_LG_CANNONSPEAR;
+	int kdw_LG_BANISHINGPOINT;
+	int kdw_LG_TRAMPLE;
+	int kdw_LG_PINPOINTATTACK;
+	int kdw_LG_RAGEBURST;
+	int kdw_LG_EXEEDBREAK;
+	int kdw_LG_OVERBRAND;
+	int kdw_LG_BANDING;
+	int kdw_LG_MOONSLASHER;
+	int kdw_LG_RAYOFGENESIS;
+	int kdw_LG_PIETY;
+	int kdw_LG_EARTHDRIVE;
+	int kdw_LG_HESPERUSLIT;
+	int kdw_SR_DRAGONCOMBO;
+	int kdw_SR_SKYNETBLOW;
+	int kdw_SR_EARTHSHAKER;
+	int kdw_SR_FALLENEMPIRE;
+	int kdw_SR_TIGERCANNON;
+	int kdw_SR_HELLGATE;
+	int kdw_SR_RAMPAGEBLASTER;
+	int kdw_SR_CRESCENTELBOW;
+	int kdw_SR_CURSEDCIRCLE;
+	int kdw_SR_LIGHTNINGWALK;
+	int kdw_SR_KNUCKLEARROW;
+	int kdw_SR_WINDMILL;
+	int kdw_SR_RAISINGDRAGON;
+	int kdw_SR_GENTLETOUCH;
+	int kdw_SR_ASSIMILATEPOWER;
+	int kdw_SR_POWERVELOCITY;
+	int kdw_SR_CRESCENTELBOW_AUTOSPELL;
+	int kdw_SR_GATEOFHELL;
+	int kdw_SR_GENTLETOUCH_QUIET;
+	int kdw_SR_GENTLETOUCH_CURE;
+	int kdw_SR_GENTLETOUCH_ENERGYGAIN;
+	int kdw_SR_GENTLETOUCH_CHANGE;
+	int kdw_SR_GENTLETOUCH_REVITALIZE;
+	int kdw_WA_SWING_DANCE;
+	int kdw_WA_SYMPHONY_OF_LOVER;
+	int kdw_WA_MOONLIT_SERENADE;
+	int kdw_MI_RUSH_WINDMILL;
+	int kdw_MI_ECHOSONG;
+	int kdw_MI_HARMONIZE;
+	int kdw_WM_LESSON;
+	int kdw_WM_METALICSOUND;
+	int kdw_WM_REVERBERATION;
+	int kdw_WM_REVERBERATION_MELEE;
+	int kdw_WM_REVERBERATION_MAGIC;
+	int kdw_WM_DOMINION_IMPULSE;
+	int kdw_WM_SEVERE_RAINSTORM;
+	int kdw_WM_SEVERE_RAINSTORM_MELEE;
+	int kdw_WM_POEMOFNETHERWORLD;
+	int kdw_WM_VOICEOFSIREN;
+	int kdw_WM_DEADHILLHERE;
+	int kdw_WM_LULLABY_DEEPSLEEP;
+	int kdw_WM_SIRCLEOFNATURE;
+	int kdw_WM_RANDOMIZESPELL;
+	int kdw_WM_GLOOMYDAY;
+	int kdw_WM_GREAT_ECHO;
+	int kdw_WM_SONG_OF_MANA;
+	int kdw_WM_DANCE_WITH_WUG;
+	int kdw_WM_SOUND_OF_DESTRUCTION;
+	int kdw_WM_SATURDAY_NIGHT_FEVER;
+	int kdw_WM_LERADS_DEW;
+	int kdw_WM_MELODYOFSINK;
+	int kdw_WM_BEYOND_OF_WARCRY;
+	int kdw_WM_UNLIMITED_HUMMING_VOICE;
+	int kdw_SO_FIREWALK;
+	int kdw_SO_ELECTRICWALK;
+	int kdw_SO_SPELLFIST;
+	int kdw_SO_EARTHGRAVE;
+	int kdw_SO_DIAMONDDUST;
+	int kdw_SO_POISON_BUSTER;
+	int kdw_SO_PSYCHIC_WAVE;
+	int kdw_SO_CLOUD_KILL;
+	int kdw_SO_STRIKING;
+	int kdw_SO_WARMER;
+	int kdw_SO_VACUUM_EXTREME;
+	int kdw_SO_VARETYR_SPEAR;
+	int kdw_SO_ARRULLO;
+	int kdw_SO_EL_CONTROL;
+	int kdw_SO_EL_ACTION;
+	int kdw_SO_EL_ANALYSIS;
+	int kdw_SO_EL_SYMPATHY;
+	int kdw_SO_EL_CURE;
+	int kdw_GN_CART_TORNADO;
+	int kdw_GN_CARTCANNON;
+	int kdw_GN_THORNS_TRAP;
+	int kdw_GN_BLOOD_SUCKER;
+	int kdw_GN_SPORE_EXPLOSION;
+	int kdw_GN_WALLOFTHORN;
+	int kdw_GN_CRAZYWEED;
+	int kdw_GN_DEMONIC_FIRE;
+	int kdw_GN_FIRE_EXPANSION;
+	int kdw_GN_HELLS_PLANT;
+	int kdw_GN_MANDRAGORA;
+	int kdw_GN_SLINGITEM;
+	int kdw_GN_SLINGITEM_RANGEMELEEATK;
+	int kdw_GN_CHANGEMATERIAL;
+	int kdw_AB_SECRAMENT;
+	int kdw_SR_HOWLINGOFLION;
+	int kdw_SR_RIDEINLIGHTNING;
+	int kdw_LG_OVERBRAND_BRANDISH;
+	int kdw_RL_GLITTERING_GREED;
+	int kdw_RL_RICHS_COIN;
+	int kdw_RL_MASS_SPIRAL;
+	int kdw_RL_BANISHING_BUSTER;
+	int kdw_RL_B_TRAP;
+	int kdw_RL_S_STORM;
+	int kdw_RL_E_CHAIN;
+	int kdw_RL_QD_SHOT;
+	int kdw_RL_C_MARKER;
+	int kdw_RL_FIREDANCE;
+	int kdw_RL_H_MINE;
+	int kdw_RL_P_ALTER;
+	int kdw_RL_FALLEN_ANGEL;
+	int kdw_RL_R_TRIP;
+	int kdw_RL_D_TAIL;
+	int kdw_RL_FIRE_RAIN;
+	int kdw_RL_HEAT_BARREL;
+	int kdw_RL_AM_BLAST;
+	int kdw_RL_SLUGSHOT;
+	int kdw_RL_HAMMER_OF_GOD;
+	int kdw_RL_B_FLICKER_ATK;
+	int kdw_KO_YAMIKUMO;
+	int kdw_KO_JYUMONJIKIRI;
+	int kdw_KO_SETSUDAN;
+	int kdw_KO_BAKURETSU;
+	int kdw_KO_HAPPOKUNAI;
+	int kdw_KO_MUCHANAGE;
+	int kdw_KO_HUUMARANKA;
+	int kdw_KO_MAKIBISHI;
+	int kdw_KO_MEIKYOUSISUI;
+	int kdw_KO_ZANZOU;
+	int kdw_KO_KYOUGAKU;
+	int kdw_KO_JYUSATSU;
+	int kdw_KO_KAHU_ENTEN;
+	int kdw_KO_HYOUHU_HUBUKI;
+	int kdw_KO_KAZEHU_SEIRAN;
+	int kdw_KO_DOHU_KOUKAI;
+	int kdw_KO_KAIHOU;
+	int kdw_KO_ZENKAI;
+	int kdw_KO_GENWAKU;
+	int kdw_KO_IZAYOI;
+	int kdw_KG_KAGEHUMI;
+	int kdw_KG_KYOMU;
+	int kdw_KG_KAGEMUSYA;
+	int kdw_OB_ZANGETSU;
+	int kdw_OB_OBOROGENSOU;
+	int kdw_OB_AKAITSUKI;
+	int kdw_GC_DARKCROW;
+	int kdw_RA_UNLIMIT;
+	int kdw_GN_ILLUSIONDOPING;
+	int kdw_RK_DRAGONBREATH_WATER;
+	int kdw_RK_LUXANIMA;
+	int kdw_NC_MAGMA_ERUPTION;
+	int kdw_WM_FRIGG_SONG;
+	int kdw_SO_ELEMENTAL_SHIELD;
+	int kdw_SR_FLASHCOMBO;
+	int kdw_SC_ESCAPE;
+	int kdw_AB_OFFERTORIUM;
+	int kdw_WL_TELEKINESIS_INTENSE;
+	int kdw_ALL_FULL_THROTTLE;
+	int kdw_SU_BITE;
+	int kdw_SU_SCRATCH;
+	int kdw_SU_STOOP;
+	int kdw_SU_LOPE;
+	int kdw_SU_SPRITEMABLE;
+	int kdw_SU_POWEROFLAND;
+	int kdw_SU_SV_STEMSPEAR;
+	int kdw_SU_CN_POWDERING;
+	int kdw_SU_CN_METEOR;
+	int kdw_SU_SV_ROOTTWIST;
+	int kdw_SU_POWEROFLIFE;
+	int kdw_SU_SCAROFTAROU;
+	int kdw_SU_PICKYPECK;
+	int kdw_SU_ARCLOUSEDASH;
+	int kdw_SU_LUNATICCARROTBEAT;
+	int kdw_SU_POWEROFSEA;
+	int kdw_SU_TUNABELLY;
+	int kdw_SU_TUNAPARTY;
+	int kdw_SU_BUNCHOFSHRIMP;
+	int kdw_SU_FRESHSHRIMP;
+	int kdw_SU_CN_METEOR2;
+	int kdw_SU_LUNATICCARROTBEAT2;
+	int kdw_SU_SOULATTACK;
+	int kdw_SU_POWEROFFLOCK;
+	int kdw_SU_SVG_SPIRIT;
+	int kdw_SU_HISS;
+	int kdw_SU_NYANGGRASS;
+	int kdw_SU_GROOMING;
+	int kdw_SU_PURRING;
+	int kdw_SU_SHRIMPARTY;
+	int kdw_SU_SPIRITOFLIFE;
+	int kdw_SU_MEOWMEOW;
+	int kdw_SU_SPIRITOFLAND;
+	int kdw_SU_CHATTERING;
+	int kdw_SU_SPIRITOFSEA;
+	int kdw_CG_SPECIALSINGER;
+	int kdw_AB_VITUPERATUM;
+	int kdw_AB_CONVENIO;
+	int kdw_DK_SERVANTWEAPON;
+	int kdw_DK_SERVANT_W_SIGN;
+	int kdw_DK_SERVANT_W_PHANTOM;
+	int kdw_DK_SERVANT_W_DEMOL;
+	int kdw_DK_CHARGINGPIERCE;
+	int kdw_DK_HACKANDSLASHER;
+	int kdw_DK_DRAGONIC_AURA;
+	int kdw_DK_MADNESS_CRUSHER;
+	int kdw_DK_VIGOR;
+	int kdw_DK_STORMSLASH;
+	int kdw_AG_DEADLY_PROJECTION;
+	int kdw_AG_DESTRUCTIVE_HURRICANE;
+	int kdw_AG_RAIN_OF_CRYSTAL;
+	int kdw_AG_MYSTERY_ILLUSION;
+	int kdw_AG_VIOLENT_QUAKE;
+	int kdw_AG_SOUL_VC_STRIKE;
+	int kdw_AG_STRANTUM_TREMOR;
+	int kdw_AG_ALL_BLOOM;
+	int kdw_AG_CRYSTAL_IMPACT;
+	int kdw_AG_TORNADO_STORM;
+	int kdw_AG_FLORAL_FLARE_ROAD;
+	int kdw_AG_ASTRAL_STRIKE;
+	int kdw_AG_CLIMAX;
+	int kdw_AG_ROCK_DOWN;
+	int kdw_AG_STORM_CANNON;
+	int kdw_AG_CRIMSON_ARROW;
+	int kdw_AG_FROZEN_SLASH;
+	int kdw_IQ_POWERFUL_FAITH;
+	int kdw_IQ_FIRM_FAITH;
+	int kdw_IQ_WILL_OF_FAITH;
+	int kdw_IQ_OLEUM_SANCTUM;
+	int kdw_IQ_SINCERE_FAITH;
+	int kdw_IQ_MASSIVE_F_BLASTER;
+	int kdw_IQ_EXPOSION_BLASTER;
+	int kdw_IQ_FIRST_BRAND;
+	int kdw_IQ_FIRST_FAITH_POWER;
+	int kdw_IQ_JUDGE;
+	int kdw_IQ_SECOND_FLAME;
+	int kdw_IQ_SECOND_FAITH;
+	int kdw_IQ_SECOND_JUDGEMENT;
+	int kdw_IQ_THIRD_PUNISH;
+	int kdw_IQ_THIRD_FLAME_BOMB;
+	int kdw_IQ_THIRD_CONSECRATION;
+	int kdw_IQ_THIRD_EXOR_FLAME;
+	int kdw_IG_GUARD_STANCE;
+	int kdw_IG_GUARDIAN_SHIELD;
+	int kdw_IG_REBOUND_SHIELD;
+	int kdw_IG_ATTACK_STANCE;
+	int kdw_IG_ULTIMATE_SACRIFICE;
+	int kdw_IG_HOLY_SHIELD;
+	int kdw_IG_GRAND_JUDGEMENT;
+	int kdw_IG_JUDGEMENT_CROSS;
+	int kdw_IG_SHIELD_SHOOTING;
+	int kdw_IG_OVERSLASH;
+	int kdw_IG_CROSS_RAIN;
+	int kdw_CD_REPARATIO;
+	int kdw_CD_MEDIALE_VOTUM;
+	int kdw_CD_ARGUTUS_VITA;
+	int kdw_CD_ARGUTUS_TELUM;
+	int kdw_CD_ARBITRIUM;
+	int kdw_CD_PRESENS_ACIES;
+	int kdw_CD_EFFLIGO;
+	int kdw_CD_COMPETENTIA;
+	int kdw_CD_PNEUMATICUS_PROCELLA;
+	int kdw_CD_DILECTIO_HEAL;
+	int kdw_CD_RELIGIO;
+	int kdw_CD_BENEDICTUM;
+	int kdw_CD_PETITIO;
+	int kdw_CD_FRAMEN;
+	int kdw_SHC_SHADOW_EXCEED;
+	int kdw_SHC_DANCING_KNIFE;
+	int kdw_SHC_SAVAGE_IMPACT;
+	int kdw_SHC_ETERNAL_SLASH;
+	int kdw_SHC_POTENT_VENOM;
+	int kdw_SHC_SHADOW_STAB;
+	int kdw_SHC_IMPACT_CRATER;
+	int kdw_SHC_ENCHANTING_SHADOW;
+	int kdw_SHC_FATAL_SHADOW_CROW;
+	int kdw_MT_AXE_STOMP;
+	int kdw_MT_RUSH_QUAKE;
+	int kdw_MT_M_MACHINE;
+	int kdw_MT_A_MACHINE;
+	int kdw_MT_D_MACHINE;
+	int kdw_MT_TWOAXEDEF;
+	int kdw_MT_ABR_M;
+	int kdw_MT_SUMMON_ABR_BATTLE_WARIOR;
+	int kdw_MT_SUMMON_ABR_DUAL_CANNON;
+	int kdw_MT_SUMMON_ABR_MOTHER_NET;
+	int kdw_MT_SUMMON_ABR_INFINITY;
+	int kdw_AG_DESTRUCTIVE_HURRICANE_CLIMAX;
+	int kdw_ABC_STRIP_SHADOW;
+	int kdw_ABC_ABYSS_DAGGER;
+	int kdw_ABC_UNLUCKY_RUSH;
+	int kdw_ABC_CHAIN_REACTION_SHOT;
+	int kdw_ABC_FROM_THE_ABYSS;
+	int kdw_ABC_ABYSS_SLAYER;
+	int kdw_ABC_ABYSS_STRIKE;
+	int kdw_ABC_DEFT_STAB;
+	int kdw_ABC_ABYSS_SQUARE;
+	int kdw_ABC_FRENZY_SHOT;
+	int kdw_WH_NATUREFRIENDLY;
+	int kdw_WH_HAWKRUSH;
+	int kdw_WH_HAWKBOOMERANG;
+	int kdw_WH_GALESTORM;
+	int kdw_WH_DEEPBLINDTRAP;
+	int kdw_WH_SOLIDTRAP;
+	int kdw_WH_SWIFTTRAP;
+	int kdw_WH_CRESCIVE_BOLT;
+	int kdw_WH_FLAMETRAP;
+	int kdw_BO_ACIDIFIED_ZONE_WATER;
+	int kdw_BO_ACIDIFIED_ZONE_GROUND;
+	int kdw_BO_ACIDIFIED_ZONE_WIND;
+	int kdw_BO_ACIDIFIED_ZONE_FIRE;
+	int kdw_TR_STAGE_MANNER;
+	int kdw_TR_ROSEBLOSSOM;
+	int kdw_TR_RHYTHMSHOOTING;
+	int kdw_TR_METALIC_FURY;
+	int kdw_EM_DIAMOND_STORM;
+	int kdw_EM_LIGHTNING_LAND;
+	int kdw_EM_VENOM_SWAMP;
+	int kdw_EM_CONFLAGRATION;
+	int kdw_EM_TERRA_DRIVE;
+	int kdw_EM_ELEMENTAL_BUSTER;
+	int kdw_BO_WOODEN_THROWROCK;
+	int kdw_BO_WOODEN_ATTACK;
+	int kdw_BO_HELL_HOWLING;
+	int kdw_BO_HELL_DUSTY;
+	int kdw_BO_FAIRY_DUSTY;
+	int kdw_EM_ELEMENTAL_BUSTER_FIRE;
+	int kdw_EM_ELEMENTAL_BUSTER_WATER;
+	int kdw_EM_ELEMENTAL_BUSTER_WIND;
+	int kdw_EM_ELEMENTAL_BUSTER_GROUND;
+	int kdw_EM_ELEMENTAL_BUSTER_POISON;
+	int kdw_HLIF_BRAIN;
+	int kdw_HFLI_MOON;
+	int kdw_HFLI_SBR44;
+	int kdw_HVAN_CAPRICE;
+	int kdw_MH_NEEDLE_OF_PARALYZE;
+	int kdw_MH_POISON_MIST;
+	int kdw_MH_ERASER_CUTTER;
+	int kdw_MH_XENO_SLASHER;
+	int kdw_MH_SONIC_CRAW;
+	int kdw_MH_SILVERVEIN_RUSH;
+	int kdw_MH_MIDNIGHT_FRENZY;
+	int kdw_MH_STAHL_HORN;
+	int kdw_MH_GOLDENE_FERSE;
+	int kdw_MH_HEILIGE_STANGE;
+	int kdw_MH_TINDER_BREAKER;
+	int kdw_MH_CBC;
+	int kdw_MH_EQC;
+	int kdw_MH_MAGMA_FLOW;
+	int kdw_MH_LAVA_SLIDE;
+	int kdw_EL_CIRCLE_OF_FIRE;
+	int kdw_EL_FIRE_MANTLE;
+	int kdw_EL_FIRE_ARROW;
+	int kdw_EL_FIRE_BOMB;
+	int kdw_EL_FIRE_WAVE;
+	int kdw_EL_ICE_NEEDLE;
+	int kdw_EL_WATER_SCREW;
+	int kdw_EL_TIDAL_WEAPON;
+	int kdw_EL_WIND_SLASH;
+	int kdw_EL_HURRICANE;
+	int kdw_EL_TYPOON_MIS;
+	int kdw_EL_STONE_HAMMER;
+	int kdw_EL_ROCK_CRUSHER;
+	int kdw_EL_STONE_RAIN;
+	int kdw_EM_EL_FLAMEROCK;
+	int kdw_EM_EL_AGE_OF_ICE;
+	int kdw_EM_EL_STORM_WIND;
+	int kdw_EM_EL_AVALANCHE;
+	int kdw_EM_EL_DEADLY_POISON;
+	int kdw_ABR_BATTLE_BUSTER;
+	int kdw_ABR_DUAL_CANNON_FIRE;
+	int kdw_ABR_INFINITY_BUSTER;
Index: src/map/pc.hpp
===================================================================
--- src/map/pc.hpp	(revision 8)
+++ src/map/pc.hpp	(working copy)
@@ -483,6 +483,1300 @@
 	t_tick ks_floodprotect_tick; // [Kill Steal Protection]
 	t_tick equipswitch_tick; // Equip switch
 
+//=========================================================================================
+// [keitenai] Spam Hack Protection
+//=========================================================================================
+		unsigned int k_tick_c = 0;
+		t_tick kdelay = 0;
+		t_tick spamtick_DEFAULT = 0;
+		t_tick spamtick_MO_RELOCDELAY = 0;
+		t_tick spamtick_SM_BASH = 0;
+		t_tick spamtick_SM_MAGNUM = 0;
+		t_tick spamtick_MG_NAPALMBEAT = 0;
+		t_tick spamtick_MG_SOULSTRIKE = 0;
+		t_tick spamtick_MG_COLDBOLT = 0;
+		t_tick spamtick_MG_FROSTDIVER = 0;
+		t_tick spamtick_MG_STONECURSE = 0;
+		t_tick spamtick_MG_FIREBALL = 0;
+		t_tick spamtick_MG_FIREWALL = 0;
+		t_tick spamtick_MG_FIREBOLT = 0;
+		t_tick spamtick_MG_LIGHTNINGBOLT = 0;
+		t_tick spamtick_MG_THUNDERSTORM = 0;
+		t_tick spamtick_AL_HEAL = 0;
+		t_tick spamtick_AL_DECAGI = 0;
+		t_tick spamtick_AL_CRUCIS = 0;
+		t_tick spamtick_MC_MAMMONITE = 0;
+		t_tick spamtick_AC_DOUBLE = 0;
+		t_tick spamtick_AC_SHOWER = 0;
+		t_tick spamtick_TF_POISON = 0;
+		t_tick spamtick_KN_PIERCE = 0;
+		t_tick spamtick_KN_BRANDISHSPEAR = 0;
+		t_tick spamtick_KN_SPEARSTAB = 0;
+		t_tick spamtick_KN_SPEARBOOMERANG = 0;
+		t_tick spamtick_KN_BOWLINGBASH = 0;
+		t_tick spamtick_PR_LEXDIVINA = 0;
+		t_tick spamtick_PR_TURNUNDEAD = 0;
+		t_tick spamtick_PR_LEXAETERNA = 0;
+		t_tick spamtick_PR_MAGNUS = 0;
+		t_tick spamtick_WZ_FIREPILLAR = 0;
+		t_tick spamtick_WZ_SIGHTRASHER = 0;
+		t_tick spamtick_WZ_FIREIVY = 0;
+		t_tick spamtick_WZ_METEOR = 0;
+		t_tick spamtick_WZ_JUPITEL = 0;
+		t_tick spamtick_WZ_VERMILION = 0;
+		t_tick spamtick_WZ_WATERBALL = 0;
+		t_tick spamtick_WZ_ICEWALL = 0;
+		t_tick spamtick_WZ_FROSTNOVA = 0;
+		t_tick spamtick_WZ_STORMGUST = 0;
+		t_tick spamtick_WZ_EARTHSPIKE = 0;
+		t_tick spamtick_WZ_HEAVENDRIVE = 0;
+		t_tick spamtick_WZ_QUAGMIRE = 0;
+		t_tick spamtick_WZ_ESTIMATION = 0;
+		t_tick spamtick_BS_HAMMERFALL = 0;
+		t_tick spamtick_HT_BLITZBEAT = 0;
+		t_tick spamtick_AS_SONICBLOW = 0;
+		t_tick spamtick_AS_GRIMTOOTH = 0;
+		t_tick spamtick_AC_CHARGEARROW = 0;
+		t_tick spamtick_TF_BACKSLIDING = 0;
+		t_tick spamtick_MC_CARTREVOLUTION = 0;
+		t_tick spamtick_AL_HOLYLIGHT = 0;
+		t_tick spamtick_RG_BACKSTAP = 0;
+		t_tick spamtick_RG_RAID = 0;
+		t_tick spamtick_RG_GRAFFITI = 0;
+		t_tick spamtick_RG_FLAGGRAFFITI = 0;
+		t_tick spamtick_RG_COMPULSION = 0;
+		t_tick spamtick_RG_PLAGIARISM = 0;
+		t_tick spamtick_AM_DEMONSTRATION = 0;
+		t_tick spamtick_AM_ACIDTERROR = 0;
+		t_tick spamtick_AM_POTIONPITCHER = 0;
+		t_tick spamtick_AM_CANNIBALIZE = 0;
+		t_tick spamtick_AM_SPHEREMINE = 0;
+		t_tick spamtick_AM_FLAMECONTROL = 0;
+		t_tick spamtick_AM_DRILLMASTER = 0;
+		t_tick spamtick_CR_SHIELDBOOMERANG = 0;
+		t_tick spamtick_CR_HOLYCROSS = 0;
+		t_tick spamtick_CR_GRANDCROSS = 0;
+		t_tick spamtick_MO_CALLSPIRITS = 0;
+		t_tick spamtick_MO_ABSORBSPIRITS = 0;
+		t_tick spamtick_MO_BODYRELOCATION = 0;
+		t_tick spamtick_MO_INVESTIGATE = 0;
+		t_tick spamtick_MO_FINGEROFFENSIVE = 0;
+		t_tick spamtick_MO_EXPLOSIONSPIRITS = 0;
+		t_tick spamtick_MO_EXTREMITYFIST = 0;
+		t_tick spamtick_MO_CHAINCOMBO = 0;
+		t_tick spamtick_MO_COMBOFINISH = 0;
+		t_tick spamtick_SA_CASTCANCEL = 0;
+		t_tick spamtick_SA_SPELLBREAKER = 0;
+		t_tick spamtick_SA_DISPELL = 0;
+		t_tick spamtick_SA_ABRACADABRA = 0;
+		t_tick spamtick_SA_MONOCELL = 0;
+		t_tick spamtick_SA_CLASSCHANGE = 0;
+		t_tick spamtick_SA_SUMMONMONSTER = 0;
+		t_tick spamtick_SA_REVERSEORCISH = 0;
+		t_tick spamtick_SA_DEATH = 0;
+		t_tick spamtick_SA_FORTUNE = 0;
+		t_tick spamtick_SA_TAMINGMONSTER = 0;
+		t_tick spamtick_SA_QUESTION = 0;
+		t_tick spamtick_SA_GRAVITY = 0;
+		t_tick spamtick_SA_LEVELUP = 0;
+		t_tick spamtick_SA_INSTANTDEATH = 0;
+		t_tick spamtick_SA_FULLRECOVERY = 0;
+		t_tick spamtick_SA_COMA = 0;
+		t_tick spamtick_BD_ADAPTATION = 0;
+		t_tick spamtick_BD_ENCORE = 0;
+		t_tick spamtick_BD_LULLABY = 0;
+		t_tick spamtick_BD_RICHMANKIM = 0;
+		t_tick spamtick_BA_MUSICALSTRIKE = 0;
+		t_tick spamtick_BA_DISSONANCE = 0;
+		t_tick spamtick_BA_FROSTJOKER = 0;
+		t_tick spamtick_BA_WHISTLE = 0;
+		t_tick spamtick_BA_ASSASSINCROSS = 0;
+		t_tick spamtick_BA_POEMBRAGI = 0;
+		t_tick spamtick_BA_APPLEIDUN = 0;
+		t_tick spamtick_DC_THROWARROW = 0;
+		t_tick spamtick_DC_UGLYDANCE = 0;
+		t_tick spamtick_DC_SCREAM = 0;
+		t_tick spamtick_DC_HUMMING = 0;
+		t_tick spamtick_DC_DONTFORGETME = 0;
+		t_tick spamtick_DC_FORTUNEKISS = 0;
+		t_tick spamtick_DC_SERVICEFORYOU = 0;
+		t_tick spamtick_LK_FURY = 0;
+		t_tick spamtick_HW_MAGICCRASHER = 0;
+		t_tick spamtick_PA_PRESSURE = 0;
+		t_tick spamtick_CH_PALMSTRIKE = 0;
+		t_tick spamtick_CH_TIGERFIST = 0;
+		t_tick spamtick_CH_CHAINCRUSH = 0;
+		t_tick spamtick_PF_SOULCHANGE = 0;
+		t_tick spamtick_PF_SOULBURN = 0;
+		t_tick spamtick_ASC_BREAKER = 0;
+		t_tick spamtick_SN_FALCONASSAULT = 0;
+		t_tick spamtick_SN_SHARPSHOOTING = 0;
+		t_tick spamtick_CR_ALCHEMY = 0;
+		t_tick spamtick_CR_SYNTHESISPOTION = 0;
+		t_tick spamtick_CG_ARROWVULCAN = 0;
+		t_tick spamtick_CG_MOONLIT = 0;
+		t_tick spamtick_CG_MARIONETTE = 0;
+		t_tick spamtick_LK_SPIRALPIERCE = 0;
+		t_tick spamtick_LK_HEADCRUSH = 0;
+		t_tick spamtick_LK_JOINTBEAT = 0;
+		t_tick spamtick_HW_NAPALMVULCAN = 0;
+		t_tick spamtick_CH_SOULCOLLECT = 0;
+		t_tick spamtick_PF_MINDBREAKER = 0;
+		t_tick spamtick_PF_SPIDERWEB = 0;
+		t_tick spamtick_ASC_METEORASSAULT = 0;
+		t_tick spamtick_TK_STORMKICK = 0;
+		t_tick spamtick_TK_DOWNKICK = 0;
+		t_tick spamtick_TK_TURNKICK = 0;
+		t_tick spamtick_TK_JUMPKICK = 0;
+		t_tick spamtick_TK_POWER = 0;
+		t_tick spamtick_TK_HIGHJUMP = 0;
+		t_tick spamtick_SL_KAIZEL = 0;
+		t_tick spamtick_SL_KAAHI = 0;
+		t_tick spamtick_SL_KAUPE = 0;
+		t_tick spamtick_SL_KAITE = 0;
+		t_tick spamtick_SL_KAINA = 0;
+		t_tick spamtick_SL_STIN = 0;
+		t_tick spamtick_SL_STUN = 0;
+		t_tick spamtick_SL_SMA = 0;
+		t_tick spamtick_SL_SWOO = 0;
+		t_tick spamtick_SL_SKE = 0;
+		t_tick spamtick_SL_SKA = 0;
+		t_tick spamtick_ST_FULLSTRIP = 0;
+		t_tick spamtick_WS_WEAPONREFINE = 0;
+		t_tick spamtick_CR_SLIMPITCHER = 0;
+		t_tick spamtick_CR_FULLPROTECTION = 0;
+		t_tick spamtick_PA_SHIELDCHAIN = 0;
+		t_tick spamtick_HP_MANARECHARGE = 0;
+		t_tick spamtick_PF_DOUBLECASTING = 0;
+		t_tick spamtick_HW_GANBANTEIN = 0;
+		t_tick spamtick_HW_GRAVITATION = 0;
+		t_tick spamtick_WS_CARTTERMINATION = 0;
+		t_tick spamtick_CG_HERMODE = 0;
+		t_tick spamtick_CG_TAROTCARD = 0;
+		t_tick spamtick_CR_ACIDDEMONSTRATION = 0;
+		t_tick spamtick_SL_HIGH = 0;
+		t_tick spamtick_GS_TRIPLEACTION = 0;
+		t_tick spamtick_GS_BULLSEYE = 0;
+		t_tick spamtick_GS_MADNESSCANCEL = 0;
+		t_tick spamtick_GS_INCREASING = 0;
+		t_tick spamtick_GS_MAGICALBULLET = 0;
+		t_tick spamtick_GS_CRACKER = 0;
+		t_tick spamtick_GS_SINGLEACTION = 0;
+		t_tick spamtick_GS_CHAINACTION = 0;
+		t_tick spamtick_GS_TRACKING = 0;
+		t_tick spamtick_GS_DISARM = 0;
+		t_tick spamtick_GS_PIERCINGSHOT = 0;
+		t_tick spamtick_GS_RAPIDSHOWER = 0;
+		t_tick spamtick_GS_DESPERADO = 0;
+		t_tick spamtick_GS_GATLINGFEVER = 0;
+		t_tick spamtick_GS_DUST = 0;
+		t_tick spamtick_GS_FULLBUSTER = 0;
+		t_tick spamtick_GS_SPREADATTACK = 0;
+		t_tick spamtick_GS_GROUNDDRIFT = 0;
+		t_tick spamtick_NJ_TOBIDOUGU = 0;
+		t_tick spamtick_NJ_SYURIKEN = 0;
+		t_tick spamtick_NJ_KUNAI = 0;
+		t_tick spamtick_NJ_HUUMA = 0;
+		t_tick spamtick_NJ_ZENYNAGE = 0;
+		t_tick spamtick_NJ_TATAMIGAESHI = 0;
+		t_tick spamtick_NJ_KASUMIKIRI = 0;
+		t_tick spamtick_NJ_SHADOWJUMP = 0;
+		t_tick spamtick_NJ_KIRIKAGE = 0;
+		t_tick spamtick_NJ_UTSUSEMI = 0;
+		t_tick spamtick_NJ_BUNSINJYUTSU = 0;
+		t_tick spamtick_NJ_NINPOU = 0;
+		t_tick spamtick_NJ_KOUENKA = 0;
+		t_tick spamtick_NJ_KAENSIN = 0;
+		t_tick spamtick_NJ_BAKUENRYU = 0;
+		t_tick spamtick_NJ_HYOUSENSOU = 0;
+		t_tick spamtick_NJ_SUITON = 0;
+		t_tick spamtick_NJ_HYOUSYOURAKU = 0;
+		t_tick spamtick_NJ_HUUJIN = 0;
+		t_tick spamtick_NJ_RAIGEKISAI = 0;
+		t_tick spamtick_NJ_KAMAITACHI = 0;
+		t_tick spamtick_NJ_NEN = 0;
+		t_tick spamtick_NJ_ISSEN = 0;
+		t_tick spamtick_KN_CHARGEATK = 0;
+		t_tick spamtick_AS_VENOMKNIFE = 0;
+		t_tick spamtick_RG_CLOSECONFINE = 0;
+		t_tick spamtick_WZ_SIGHTBLASTER = 0;
+		t_tick spamtick_HT_PHANTASMIC = 0;
+		t_tick spamtick_BA_PANGVOICE = 0;
+		t_tick spamtick_DC_WINKCHARM = 0;
+		t_tick spamtick_PR_REDEMPTIO = 0;
+		t_tick spamtick_MO_KITRANSLATION = 0;
+		t_tick spamtick_MO_BALKYOUNG = 0;
+		t_tick spamtick_RK_SONICWAVE = 0;
+		t_tick spamtick_RK_DEATHBOUND = 0;
+		t_tick spamtick_RK_HUNDREDSPEAR = 0;
+		t_tick spamtick_RK_WINDCUTTER = 0;
+		t_tick spamtick_RK_IGNITIONBREAK = 0;
+		t_tick spamtick_RK_DRAGONBREATH = 0;
+		t_tick spamtick_RK_CRUSHSTRIKE = 0;
+		t_tick spamtick_RK_STORMBLAST = 0;
+		t_tick spamtick_RK_PHANTOMTHRUST = 0;
+		t_tick spamtick_GC_CROSSIMPACT = 0;
+		t_tick spamtick_GC_WEAPONCRUSH = 0;
+		t_tick spamtick_GC_ROLLINGCUTTER = 0;
+		t_tick spamtick_GC_CROSSRIPPERSLASHER = 0;
+		t_tick spamtick_AB_JUDEX = 0;
+		t_tick spamtick_AB_ADORAMUS = 0;
+		t_tick spamtick_AB_CHEAL = 0;
+		t_tick spamtick_AB_EPICLESIS = 0;
+		t_tick spamtick_AB_PRAEFATIO = 0;
+		t_tick spamtick_AB_EUCHARISTICA = 0;
+		t_tick spamtick_AB_RENOVATIO = 0;
+		t_tick spamtick_AB_HIGHNESSHEAL = 0;
+		t_tick spamtick_AB_CLEARANCE = 0;
+		t_tick spamtick_AB_EXPIATIO = 0;
+		t_tick spamtick_AB_DUPLELIGHT = 0;
+		t_tick spamtick_AB_DUPLELIGHT_MELEE = 0;
+		t_tick spamtick_AB_DUPLELIGHT_MAGIC = 0;
+		t_tick spamtick_AB_SILENTIUM = 0;
+		t_tick spamtick_WL_WHITEIMPRISON = 0;
+		t_tick spamtick_WL_SOULEXPANSION = 0;
+		t_tick spamtick_WL_FROSTMISTY = 0;
+		t_tick spamtick_WL_JACKFROST = 0;
+		t_tick spamtick_WL_MARSHOFABYSS = 0;
+		t_tick spamtick_WL_RADIUS = 0;
+		t_tick spamtick_WL_STASIS = 0;
+		t_tick spamtick_WL_DRAINLIFE = 0;
+		t_tick spamtick_WL_CRIMSONROCK = 0;
+		t_tick spamtick_WL_HELLINFERNO = 0;
+		t_tick spamtick_WL_COMET = 0;
+		t_tick spamtick_WL_CHAINLIGHTNING = 0;
+		t_tick spamtick_WL_CHAINLIGHTNING_ATK = 0;
+		t_tick spamtick_WL_EARTHSTRAIN = 0;
+		t_tick spamtick_WL_TETRAVORTEX = 0;
+		t_tick spamtick_WL_TETRAVORTEX_FIRE = 0;
+		t_tick spamtick_WL_TETRAVORTEX_WATER = 0;
+		t_tick spamtick_WL_TETRAVORTEX_WIND = 0;
+		t_tick spamtick_WL_TETRAVORTEX_GROUND = 0;
+		t_tick spamtick_WL_RELEASE = 0;
+		t_tick spamtick_WL_READING_SB = 0;
+		t_tick spamtick_WL_FREEZE_SP = 0;
+		t_tick spamtick_RA_ARROWSTORM = 0;
+		t_tick spamtick_RA_AIMEDBOLT = 0;
+		t_tick spamtick_RA_WUGSTRIKE = 0;
+		t_tick spamtick_RA_WUGBITE = 0;
+		t_tick spamtick_NC_BOOSTKNUCKLE = 0;
+		t_tick spamtick_NC_PILEBUNKER = 0;
+		t_tick spamtick_NC_VULCANARM = 0;
+		t_tick spamtick_NC_FLAMELAUNCHER = 0;
+		t_tick spamtick_NC_COLDSLOWER = 0;
+		t_tick spamtick_NC_ARMSCANNON = 0;
+		t_tick spamtick_NC_ACCELERATION = 0;
+		t_tick spamtick_NC_F_SIDESLIDE = 0;
+		t_tick spamtick_NC_B_SIDESLIDE = 0;
+		t_tick spamtick_NC_MAINFRAME = 0;
+		t_tick spamtick_NC_SHAPESHIFT = 0;
+		t_tick spamtick_NC_INFRAREDSCAN = 0;
+		t_tick spamtick_NC_ANALYZE = 0;
+		t_tick spamtick_NC_MAGNETICFIELD = 0;
+		t_tick spamtick_NC_NEUTRALBARRIER = 0;
+		t_tick spamtick_NC_STEALTHFIELD = 0;
+		t_tick spamtick_NC_AXEBOOMERANG = 0;
+		t_tick spamtick_NC_POWERSWING = 0;
+		t_tick spamtick_NC_AXETORNADO = 0;
+		t_tick spamtick_NC_SILVERSNIPER = 0;
+		t_tick spamtick_NC_MAGICDECOY = 0;
+		t_tick spamtick_NC_DISJOINT = 0;
+		t_tick spamtick_SC_FATALMENACE = 0;
+		t_tick spamtick_SC_TRIANGLESHOT = 0;
+		t_tick spamtick_SC_INVISIBILITY = 0;
+		t_tick spamtick_SC_ENERVATION = 0;
+		t_tick spamtick_SC_GROOMY = 0;
+		t_tick spamtick_SC_IGNORANCE = 0;
+		t_tick spamtick_SC_LAZINESS = 0;
+		t_tick spamtick_SC_UNLUCKY = 0;
+		t_tick spamtick_SC_WEAKNESS = 0;
+		t_tick spamtick_SC_STRIPACCESSARY = 0;
+		t_tick spamtick_SC_MANHOLE = 0;
+		t_tick spamtick_SC_DIMENSIONDOOR = 0;
+		t_tick spamtick_SC_CHAOSPANIC = 0;
+		t_tick spamtick_SC_MAELSTROM = 0;
+		t_tick spamtick_SC_BLOODYLUST = 0;
+		t_tick spamtick_SC_FEINTBOMB = 0;
+		t_tick spamtick_LG_CANNONSPEAR = 0;
+		t_tick spamtick_LG_BANISHINGPOINT = 0;
+		t_tick spamtick_LG_TRAMPLE = 0;
+		t_tick spamtick_LG_PINPOINTATTACK = 0;
+		t_tick spamtick_LG_RAGEBURST = 0;
+		t_tick spamtick_LG_EXEEDBREAK = 0;
+		t_tick spamtick_LG_OVERBRAND = 0;
+		t_tick spamtick_LG_BANDING = 0;
+		t_tick spamtick_LG_MOONSLASHER = 0;
+		t_tick spamtick_LG_RAYOFGENESIS = 0;
+		t_tick spamtick_LG_PIETY = 0;
+		t_tick spamtick_LG_EARTHDRIVE = 0;
+		t_tick spamtick_LG_HESPERUSLIT = 0;
+		t_tick spamtick_SR_DRAGONCOMBO = 0;
+		t_tick spamtick_SR_SKYNETBLOW = 0;
+		t_tick spamtick_SR_EARTHSHAKER = 0;
+		t_tick spamtick_SR_FALLENEMPIRE = 0;
+		t_tick spamtick_SR_TIGERCANNON = 0;
+		t_tick spamtick_SR_HELLGATE = 0;
+		t_tick spamtick_SR_RAMPAGEBLASTER = 0;
+		t_tick spamtick_SR_CRESCENTELBOW = 0;
+		t_tick spamtick_SR_CURSEDCIRCLE = 0;
+		t_tick spamtick_SR_LIGHTNINGWALK = 0;
+		t_tick spamtick_SR_KNUCKLEARROW = 0;
+		t_tick spamtick_SR_WINDMILL = 0;
+		t_tick spamtick_SR_RAISINGDRAGON = 0;
+		t_tick spamtick_SR_GENTLETOUCH = 0;
+		t_tick spamtick_SR_ASSIMILATEPOWER = 0;
+		t_tick spamtick_SR_POWERVELOCITY = 0;
+		t_tick spamtick_SR_CRESCENTELBOW_AUTOSPELL = 0;
+		t_tick spamtick_SR_GATEOFHELL = 0;
+		t_tick spamtick_SR_GENTLETOUCH_QUIET = 0;
+		t_tick spamtick_SR_GENTLETOUCH_CURE = 0;
+		t_tick spamtick_SR_GENTLETOUCH_ENERGYGAIN = 0;
+		t_tick spamtick_SR_GENTLETOUCH_CHANGE = 0;
+		t_tick spamtick_SR_GENTLETOUCH_REVITALIZE = 0;
+		t_tick spamtick_WA_SWING_DANCE = 0;
+		t_tick spamtick_WA_SYMPHONY_OF_LOVER = 0;
+		t_tick spamtick_WA_MOONLIT_SERENADE = 0;
+		t_tick spamtick_MI_RUSH_WINDMILL = 0;
+		t_tick spamtick_MI_ECHOSONG = 0;
+		t_tick spamtick_MI_HARMONIZE = 0;
+		t_tick spamtick_WM_LESSON = 0;
+		t_tick spamtick_WM_METALICSOUND = 0;
+		t_tick spamtick_WM_REVERBERATION = 0;
+		t_tick spamtick_WM_REVERBERATION_MELEE = 0;
+		t_tick spamtick_WM_REVERBERATION_MAGIC = 0;
+		t_tick spamtick_WM_DOMINION_IMPULSE = 0;
+		t_tick spamtick_WM_SEVERE_RAINSTORM = 0;
+		t_tick spamtick_WM_SEVERE_RAINSTORM_MELEE = 0;
+		t_tick spamtick_WM_POEMOFNETHERWORLD = 0;
+		t_tick spamtick_WM_VOICEOFSIREN = 0;
+		t_tick spamtick_WM_DEADHILLHERE = 0;
+		t_tick spamtick_WM_LULLABY_DEEPSLEEP = 0;
+		t_tick spamtick_WM_SIRCLEOFNATURE = 0;
+		t_tick spamtick_WM_RANDOMIZESPELL = 0;
+		t_tick spamtick_WM_GLOOMYDAY = 0;
+		t_tick spamtick_WM_GREAT_ECHO = 0;
+		t_tick spamtick_WM_SONG_OF_MANA = 0;
+		t_tick spamtick_WM_DANCE_WITH_WUG = 0;
+		t_tick spamtick_WM_SOUND_OF_DESTRUCTION = 0;
+		t_tick spamtick_WM_SATURDAY_NIGHT_FEVER = 0;
+		t_tick spamtick_WM_LERADS_DEW = 0;
+		t_tick spamtick_WM_MELODYOFSINK = 0;
+		t_tick spamtick_WM_BEYOND_OF_WARCRY = 0;
+		t_tick spamtick_WM_UNLIMITED_HUMMING_VOICE = 0;
+		t_tick spamtick_SO_FIREWALK = 0;
+		t_tick spamtick_SO_ELECTRICWALK = 0;
+		t_tick spamtick_SO_SPELLFIST = 0;
+		t_tick spamtick_SO_EARTHGRAVE = 0;
+		t_tick spamtick_SO_DIAMONDDUST = 0;
+		t_tick spamtick_SO_POISON_BUSTER = 0;
+		t_tick spamtick_SO_PSYCHIC_WAVE = 0;
+		t_tick spamtick_SO_CLOUD_KILL = 0;
+		t_tick spamtick_SO_STRIKING = 0;
+		t_tick spamtick_SO_WARMER = 0;
+		t_tick spamtick_SO_VACUUM_EXTREME = 0;
+		t_tick spamtick_SO_VARETYR_SPEAR = 0;
+		t_tick spamtick_SO_ARRULLO = 0;
+		t_tick spamtick_SO_EL_CONTROL = 0;
+		t_tick spamtick_SO_EL_ACTION = 0;
+		t_tick spamtick_SO_EL_ANALYSIS = 0;
+		t_tick spamtick_SO_EL_SYMPATHY = 0;
+		t_tick spamtick_SO_EL_CURE = 0;
+		t_tick spamtick_GN_CART_TORNADO = 0;
+		t_tick spamtick_GN_CARTCANNON = 0;
+		t_tick spamtick_GN_THORNS_TRAP = 0;
+		t_tick spamtick_GN_BLOOD_SUCKER = 0;
+		t_tick spamtick_GN_SPORE_EXPLOSION = 0;
+		t_tick spamtick_GN_WALLOFTHORN = 0;
+		t_tick spamtick_GN_CRAZYWEED = 0;
+		t_tick spamtick_GN_CRAZYWEED_ATK = 0;
+		t_tick spamtick_GN_DEMONIC_FIRE = 0;
+		t_tick spamtick_GN_FIRE_EXPANSION = 0;
+		t_tick spamtick_GN_FIRE_EXPANSION_SMOKE_POWDER = 0;
+		t_tick spamtick_GN_FIRE_EXPANSION_TEAR_GAS = 0;
+		t_tick spamtick_GN_FIRE_EXPANSION_ACID = 0;
+		t_tick spamtick_GN_HELLS_PLANT = 0;
+		t_tick spamtick_GN_HELLS_PLANT_ATK = 0;
+		t_tick spamtick_GN_MANDRAGORA = 0;
+		t_tick spamtick_GN_SLINGITEM = 0;
+		t_tick spamtick_GN_SLINGITEM_RANGEMELEEATK = 0;
+		t_tick spamtick_GN_CHANGEMATERIAL = 0;
+		t_tick spamtick_AB_SECRAMENT = 0;
+		t_tick spamtick_SR_HOWLINGOFLION = 0;
+		t_tick spamtick_SR_RIDEINLIGHTNING = 0;
+		t_tick spamtick_LG_OVERBRAND_BRANDISH = 0;
+		t_tick spamtick_LG_OVERBRAND_PLUSATK = 0;
+		t_tick spamtick_RL_GLITTERING_GREED = 0;
+		t_tick spamtick_RL_RICHS_COIN = 0;
+		t_tick spamtick_RL_MASS_SPIRAL = 0;
+		t_tick spamtick_RL_BANISHING_BUSTER = 0;
+		t_tick spamtick_RL_B_TRAP = 0;
+		t_tick spamtick_RL_S_STORM = 0;
+		t_tick spamtick_RL_E_CHAIN = 0;
+		t_tick spamtick_RL_QD_SHOT = 0;
+		t_tick spamtick_RL_C_MARKER = 0;
+		t_tick spamtick_RL_FIREDANCE = 0;
+		t_tick spamtick_RL_H_MINE = 0;
+		t_tick spamtick_RL_P_ALTER = 0;
+		t_tick spamtick_RL_FALLEN_ANGEL = 0;
+		t_tick spamtick_RL_R_TRIP = 0;
+		t_tick spamtick_RL_D_TAIL = 0;
+		t_tick spamtick_RL_FIRE_RAIN = 0;
+		t_tick spamtick_RL_HEAT_BARREL = 0;
+		t_tick spamtick_RL_AM_BLAST = 0;
+		t_tick spamtick_RL_SLUGSHOT = 0;
+		t_tick spamtick_RL_HAMMER_OF_GOD = 0;
+		t_tick spamtick_RL_R_TRIP_PLUSATK = 0;
+		t_tick spamtick_RL_B_FLICKER_ATK = 0;
+		t_tick spamtick_KO_YAMIKUMO = 0;
+		t_tick spamtick_KO_JYUMONJIKIRI = 0;
+		t_tick spamtick_KO_SETSUDAN = 0;
+		t_tick spamtick_KO_BAKURETSU = 0;
+		t_tick spamtick_KO_HAPPOKUNAI = 0;
+		t_tick spamtick_KO_MUCHANAGE = 0;
+		t_tick spamtick_KO_HUUMARANKA = 0;
+		t_tick spamtick_KO_MAKIBISHI = 0;
+		t_tick spamtick_KO_MEIKYOUSISUI = 0;
+		t_tick spamtick_KO_ZANZOU = 0;
+		t_tick spamtick_KO_KYOUGAKU = 0;
+		t_tick spamtick_KO_JYUSATSU = 0;
+		t_tick spamtick_KO_KAHU_ENTEN = 0;
+		t_tick spamtick_KO_HYOUHU_HUBUKI = 0;
+		t_tick spamtick_KO_KAZEHU_SEIRAN = 0;
+		t_tick spamtick_KO_DOHU_KOUKAI = 0;
+		t_tick spamtick_KO_KAIHOU = 0;
+		t_tick spamtick_KO_ZENKAI = 0;
+		t_tick spamtick_KO_GENWAKU = 0;
+		t_tick spamtick_KO_IZAYOI = 0;
+		t_tick spamtick_KG_KAGEHUMI = 0;
+		t_tick spamtick_KG_KYOMU = 0;
+		t_tick spamtick_KG_KAGEMUSYA = 0;
+		t_tick spamtick_OB_ZANGETSU = 0;
+		t_tick spamtick_OB_OBOROGENSOU = 0;
+		t_tick spamtick_OB_OBOROGENSOU_TRANSITION_ATK = 0;
+		t_tick spamtick_OB_AKAITSUKI = 0;
+		t_tick spamtick_GC_DARKCROW = 0;
+		t_tick spamtick_RA_UNLIMIT = 0;
+		t_tick spamtick_GN_ILLUSIONDOPING = 0;
+		t_tick spamtick_RK_DRAGONBREATH_WATER = 0;
+		t_tick spamtick_RK_LUXANIMA = 0;
+		t_tick spamtick_NC_MAGMA_ERUPTION = 0;
+		t_tick spamtick_WM_FRIGG_SONG = 0;
+		t_tick spamtick_SO_ELEMENTAL_SHIELD = 0;
+		t_tick spamtick_SR_FLASHCOMBO = 0;
+		t_tick spamtick_SC_ESCAPE = 0;
+		t_tick spamtick_AB_OFFERTORIUM = 0;
+		t_tick spamtick_WL_TELEKINESIS_INTENSE = 0;
+		t_tick spamtick_ALL_FULL_THROTTLE = 0;
+		t_tick spamtick_SU_BITE = 0;
+		t_tick spamtick_SU_SCRATCH = 0;
+		t_tick spamtick_SU_STOOP = 0;
+		t_tick spamtick_SU_LOPE = 0;
+		t_tick spamtick_SU_SPRITEMABLE = 0;
+		t_tick spamtick_SU_POWEROFLAND = 0;
+		t_tick spamtick_SU_SV_STEMSPEAR = 0;
+		t_tick spamtick_SU_CN_POWDERING = 0;
+		t_tick spamtick_SU_CN_METEOR = 0;
+		t_tick spamtick_SU_SV_ROOTTWIST = 0;
+		t_tick spamtick_SU_SV_ROOTTWIST_ATK = 0;
+		t_tick spamtick_SU_POWEROFLIFE = 0;
+		t_tick spamtick_SU_SCAROFTAROU = 0;
+		t_tick spamtick_SU_PICKYPECK = 0;
+		t_tick spamtick_SU_PICKYPECK_DOUBLE_ATK = 0;
+		t_tick spamtick_SU_ARCLOUSEDASH = 0;
+		t_tick spamtick_SU_LUNATICCARROTBEAT = 0;
+		t_tick spamtick_SU_POWEROFSEA = 0;
+		t_tick spamtick_SU_TUNABELLY = 0;
+		t_tick spamtick_SU_TUNAPARTY = 0;
+		t_tick spamtick_SU_BUNCHOFSHRIMP = 0;
+		t_tick spamtick_SU_FRESHSHRIMP = 0;
+		t_tick spamtick_SU_CN_METEOR2 = 0;
+		t_tick spamtick_SU_LUNATICCARROTBEAT2 = 0;
+		t_tick spamtick_SU_SOULATTACK = 0;
+		t_tick spamtick_SU_POWEROFFLOCK = 0;
+		t_tick spamtick_SU_SVG_SPIRIT = 0;
+		t_tick spamtick_SU_HISS = 0;
+		t_tick spamtick_SU_NYANGGRASS = 0;
+		t_tick spamtick_SU_GROOMING = 0;
+		t_tick spamtick_SU_PURRING = 0;
+		t_tick spamtick_SU_SHRIMPARTY = 0;
+		t_tick spamtick_SU_SPIRITOFLIFE = 0;
+		t_tick spamtick_SU_MEOWMEOW = 0;
+		t_tick spamtick_SU_SPIRITOFLAND = 0;
+		t_tick spamtick_SU_CHATTERING = 0;
+		t_tick spamtick_SU_SPIRITOFSEA = 0;
+		t_tick spamtick_CG_SPECIALSINGER = 0;
+		t_tick spamtick_AB_VITUPERATUM = 0;
+		t_tick spamtick_AB_CONVENIO = 0;
+		t_tick spamtick_DK_SERVANTWEAPON = 0;
+		t_tick spamtick_DK_SERVANT_W_SIGN = 0;
+		t_tick spamtick_DK_SERVANT_W_PHANTOM = 0;
+		t_tick spamtick_DK_SERVANT_W_DEMOL = 0;
+		t_tick spamtick_DK_CHARGINGPIERCE = 0;
+		t_tick spamtick_DK_HACKANDSLASHER = 0;
+		t_tick spamtick_DK_DRAGONIC_AURA = 0;
+		t_tick spamtick_DK_MADNESS_CRUSHER = 0;
+		t_tick spamtick_DK_VIGOR = 0;
+		t_tick spamtick_DK_STORMSLASH = 0;
+		t_tick spamtick_AG_DEADLY_PROJECTION = 0;
+		t_tick spamtick_AG_DESTRUCTIVE_HURRICANE = 0;
+		t_tick spamtick_AG_RAIN_OF_CRYSTAL = 0;
+		t_tick spamtick_AG_MYSTERY_ILLUSION = 0;
+		t_tick spamtick_AG_VIOLENT_QUAKE = 0;
+		t_tick spamtick_AG_SOUL_VC_STRIKE = 0;
+		t_tick spamtick_AG_STRANTUM_TREMOR = 0;
+		t_tick spamtick_AG_ALL_BLOOM = 0;
+		t_tick spamtick_AG_CRYSTAL_IMPACT = 0;
+		t_tick spamtick_AG_TORNADO_STORM = 0;
+		t_tick spamtick_AG_FLORAL_FLARE_ROAD = 0;
+		t_tick spamtick_AG_ASTRAL_STRIKE = 0;
+		t_tick spamtick_AG_CLIMAX = 0;
+		t_tick spamtick_AG_ROCK_DOWN = 0;
+		t_tick spamtick_AG_STORM_CANNON = 0;
+		t_tick spamtick_AG_CRIMSON_ARROW = 0;
+		t_tick spamtick_AG_FROZEN_SLASH = 0;
+		t_tick spamtick_IQ_POWERFUL_FAITH = 0;
+		t_tick spamtick_IQ_FIRM_FAITH = 0;
+		t_tick spamtick_IQ_WILL_OF_FAITH = 0;
+		t_tick spamtick_IQ_OLEUM_SANCTUM = 0;
+		t_tick spamtick_IQ_SINCERE_FAITH = 0;
+		t_tick spamtick_IQ_MASSIVE_F_BLASTER = 0;
+		t_tick spamtick_IQ_EXPOSION_BLASTER = 0;
+		t_tick spamtick_IQ_FIRST_BRAND = 0;
+		t_tick spamtick_IQ_FIRST_FAITH_POWER = 0;
+		t_tick spamtick_IQ_JUDGE = 0;
+		t_tick spamtick_IQ_SECOND_FLAME = 0;
+		t_tick spamtick_IQ_SECOND_FAITH = 0;
+		t_tick spamtick_IQ_SECOND_JUDGEMENT = 0;
+		t_tick spamtick_IQ_THIRD_PUNISH = 0;
+		t_tick spamtick_IQ_THIRD_FLAME_BOMB = 0;
+		t_tick spamtick_IQ_THIRD_CONSECRATION = 0;
+		t_tick spamtick_IQ_THIRD_EXOR_FLAME = 0;
+		t_tick spamtick_IG_GUARD_STANCE = 0;
+		t_tick spamtick_IG_GUARDIAN_SHIELD = 0;
+		t_tick spamtick_IG_REBOUND_SHIELD = 0;
+		t_tick spamtick_IG_ATTACK_STANCE = 0;
+		t_tick spamtick_IG_ULTIMATE_SACRIFICE = 0;
+		t_tick spamtick_IG_HOLY_SHIELD = 0;
+		t_tick spamtick_IG_GRAND_JUDGEMENT = 0;
+		t_tick spamtick_IG_JUDGEMENT_CROSS = 0;
+		t_tick spamtick_IG_SHIELD_SHOOTING = 0;
+		t_tick spamtick_IG_OVERSLASH = 0;
+		t_tick spamtick_IG_CROSS_RAIN = 0;
+		t_tick spamtick_CD_REPARATIO = 0;
+		t_tick spamtick_CD_MEDIALE_VOTUM = 0;
+		t_tick spamtick_CD_ARGUTUS_VITA = 0;
+		t_tick spamtick_CD_ARGUTUS_TELUM = 0;
+		t_tick spamtick_CD_ARBITRIUM = 0;
+		t_tick spamtick_CD_PRESENS_ACIES = 0;
+		t_tick spamtick_CD_EFFLIGO = 0;
+		t_tick spamtick_CD_COMPETENTIA = 0;
+		t_tick spamtick_CD_PNEUMATICUS_PROCELLA = 0;
+		t_tick spamtick_CD_DILECTIO_HEAL = 0;
+		t_tick spamtick_CD_RELIGIO = 0;
+		t_tick spamtick_CD_BENEDICTUM = 0;
+		t_tick spamtick_CD_PETITIO = 0;
+		t_tick spamtick_CD_FRAMEN = 0;
+		t_tick spamtick_SHC_SHADOW_EXCEED = 0;
+		t_tick spamtick_SHC_DANCING_KNIFE = 0;
+		t_tick spamtick_SHC_SAVAGE_IMPACT = 0;
+		t_tick spamtick_SHC_ETERNAL_SLASH = 0;
+		t_tick spamtick_SHC_POTENT_VENOM = 0;
+		t_tick spamtick_SHC_SHADOW_STAB = 0;
+		t_tick spamtick_SHC_IMPACT_CRATER = 0;
+		t_tick spamtick_SHC_ENCHANTING_SHADOW = 0;
+		t_tick spamtick_SHC_FATAL_SHADOW_CROW = 0;
+		t_tick spamtick_MT_AXE_STOMP = 0;
+		t_tick spamtick_MT_RUSH_QUAKE = 0;
+		t_tick spamtick_MT_M_MACHINE = 0;
+		t_tick spamtick_MT_A_MACHINE = 0;
+		t_tick spamtick_MT_D_MACHINE = 0;
+		t_tick spamtick_MT_TWOAXEDEF = 0;
+		t_tick spamtick_MT_ABR_M = 0;
+		t_tick spamtick_MT_SUMMON_ABR_BATTLE_WARIOR = 0;
+		t_tick spamtick_MT_SUMMON_ABR_DUAL_CANNON = 0;
+		t_tick spamtick_MT_SUMMON_ABR_MOTHER_NET = 0;
+		t_tick spamtick_MT_SUMMON_ABR_INFINITY = 0;
+		t_tick spamtick_AG_DESTRUCTIVE_HURRICANE_CLIMAX = 0;
+		t_tick spamtick_ABC_STRIP_SHADOW = 0;
+		t_tick spamtick_ABC_ABYSS_DAGGER = 0;
+		t_tick spamtick_ABC_UNLUCKY_RUSH = 0;
+		t_tick spamtick_ABC_CHAIN_REACTION_SHOT = 0;
+		t_tick spamtick_ABC_FROM_THE_ABYSS = 0;
+		t_tick spamtick_ABC_ABYSS_SLAYER = 0;
+		t_tick spamtick_ABC_ABYSS_STRIKE = 0;
+		t_tick spamtick_ABC_DEFT_STAB = 0;
+		t_tick spamtick_ABC_ABYSS_SQUARE = 0;
+		t_tick spamtick_ABC_FRENZY_SHOT = 0;
+		t_tick spamtick_WH_NATUREFRIENDLY = 0;
+		t_tick spamtick_WH_HAWKRUSH = 0;
+		t_tick spamtick_WH_HAWKBOOMERANG = 0;
+		t_tick spamtick_WH_GALESTORM = 0;
+		t_tick spamtick_WH_DEEPBLINDTRAP = 0;
+		t_tick spamtick_WH_SOLIDTRAP = 0;
+		t_tick spamtick_WH_SWIFTTRAP = 0;
+		t_tick spamtick_WH_CRESCIVE_BOLT = 0;
+		t_tick spamtick_WH_FLAMETRAP = 0;
+		t_tick spamtick_BO_ACIDIFIED_ZONE_WATER = 0;
+		t_tick spamtick_BO_ACIDIFIED_ZONE_GROUND = 0;
+		t_tick spamtick_BO_ACIDIFIED_ZONE_WIND = 0;
+		t_tick spamtick_BO_ACIDIFIED_ZONE_FIRE = 0;
+		t_tick spamtick_TR_STAGE_MANNER = 0;
+		t_tick spamtick_TR_ROSEBLOSSOM = 0;
+		t_tick spamtick_TR_RHYTHMSHOOTING = 0;
+		t_tick spamtick_TR_METALIC_FURY = 0;
+		t_tick spamtick_EM_DIAMOND_STORM = 0;
+		t_tick spamtick_EM_LIGHTNING_LAND = 0;
+		t_tick spamtick_EM_VENOM_SWAMP = 0;
+		t_tick spamtick_EM_CONFLAGRATION = 0;
+		t_tick spamtick_EM_TERRA_DRIVE = 0;
+		t_tick spamtick_EM_ELEMENTAL_BUSTER = 0;
+		t_tick spamtick_BO_WOODEN_THROWROCK = 0;
+		t_tick spamtick_BO_WOODEN_ATTACK = 0;
+		t_tick spamtick_BO_HELL_HOWLING = 0;
+		t_tick spamtick_BO_HELL_DUSTY = 0;
+		t_tick spamtick_BO_FAIRY_DUSTY = 0;
+		t_tick spamtick_EM_ELEMENTAL_BUSTER_FIRE = 0;
+		t_tick spamtick_EM_ELEMENTAL_BUSTER_WATER = 0;
+		t_tick spamtick_EM_ELEMENTAL_BUSTER_WIND = 0;
+		t_tick spamtick_EM_ELEMENTAL_BUSTER_GROUND = 0;
+		t_tick spamtick_EM_ELEMENTAL_BUSTER_POISON = 0;
+
+		unsigned int spamcount_DEFAULT = 0;
+		unsigned int spamcount_MO_RELOCDELAY = 0;
+		unsigned int spamcount_SM_BASH = 0;
+		unsigned int spamcount_SM_MAGNUM = 0;
+		unsigned int spamcount_MG_NAPALMBEAT = 0;
+		unsigned int spamcount_MG_SOULSTRIKE = 0;
+		unsigned int spamcount_MG_COLDBOLT = 0;
+		unsigned int spamcount_MG_FROSTDIVER = 0;
+		unsigned int spamcount_MG_STONECURSE = 0;
+		unsigned int spamcount_MG_FIREBALL = 0;
+		unsigned int spamcount_MG_FIREWALL = 0;
+		unsigned int spamcount_MG_FIREBOLT = 0;
+		unsigned int spamcount_MG_LIGHTNINGBOLT = 0;
+		unsigned int spamcount_MG_THUNDERSTORM = 0;
+		unsigned int spamcount_AL_HEAL = 0;
+		unsigned int spamcount_AL_DECAGI = 0;
+		unsigned int spamcount_AL_CRUCIS = 0;
+		unsigned int spamcount_MC_MAMMONITE = 0;
+		unsigned int spamcount_AC_DOUBLE = 0;
+		unsigned int spamcount_AC_SHOWER = 0;
+		unsigned int spamcount_TF_POISON = 0;
+		unsigned int spamcount_KN_PIERCE = 0;
+		unsigned int spamcount_KN_BRANDISHSPEAR = 0;
+		unsigned int spamcount_KN_SPEARSTAB = 0;
+		unsigned int spamcount_KN_SPEARBOOMERANG = 0;
+		unsigned int spamcount_KN_BOWLINGBASH = 0;
+		unsigned int spamcount_PR_LEXDIVINA = 0;
+		unsigned int spamcount_PR_TURNUNDEAD = 0;
+		unsigned int spamcount_PR_LEXAETERNA = 0;
+		unsigned int spamcount_PR_MAGNUS = 0;
+		unsigned int spamcount_WZ_FIREPILLAR = 0;
+		unsigned int spamcount_WZ_SIGHTRASHER = 0;
+		unsigned int spamcount_WZ_FIREIVY = 0;
+		unsigned int spamcount_WZ_METEOR = 0;
+		unsigned int spamcount_WZ_JUPITEL = 0;
+		unsigned int spamcount_WZ_VERMILION = 0;
+		unsigned int spamcount_WZ_WATERBALL = 0;
+		unsigned int spamcount_WZ_ICEWALL = 0;
+		unsigned int spamcount_WZ_FROSTNOVA = 0;
+		unsigned int spamcount_WZ_STORMGUST = 0;
+		unsigned int spamcount_WZ_EARTHSPIKE = 0;
+		unsigned int spamcount_WZ_HEAVENDRIVE = 0;
+		unsigned int spamcount_WZ_QUAGMIRE = 0;
+		unsigned int spamcount_WZ_ESTIMATION = 0;
+		unsigned int spamcount_BS_HAMMERFALL = 0;
+		unsigned int spamcount_HT_BLITZBEAT = 0;
+		unsigned int spamcount_AS_SONICBLOW = 0;
+		unsigned int spamcount_AS_GRIMTOOTH = 0;
+		unsigned int spamcount_AC_CHARGEARROW = 0;
+		unsigned int spamcount_TF_BACKSLIDING = 0;
+		unsigned int spamcount_MC_CARTREVOLUTION = 0;
+		unsigned int spamcount_AL_HOLYLIGHT = 0;
+		unsigned int spamcount_RG_BACKSTAP = 0;
+		unsigned int spamcount_RG_RAID = 0;
+		unsigned int spamcount_RG_GRAFFITI = 0;
+		unsigned int spamcount_RG_FLAGGRAFFITI = 0;
+		unsigned int spamcount_RG_COMPULSION = 0;
+		unsigned int spamcount_RG_PLAGIARISM = 0;
+		unsigned int spamcount_AM_DEMONSTRATION = 0;
+		unsigned int spamcount_AM_ACIDTERROR = 0;
+		unsigned int spamcount_AM_POTIONPITCHER = 0;
+		unsigned int spamcount_AM_CANNIBALIZE = 0;
+		unsigned int spamcount_AM_SPHEREMINE = 0;
+		unsigned int spamcount_AM_FLAMECONTROL = 0;
+		unsigned int spamcount_AM_DRILLMASTER = 0;
+		unsigned int spamcount_CR_SHIELDBOOMERANG = 0;
+		unsigned int spamcount_CR_HOLYCROSS = 0;
+		unsigned int spamcount_CR_GRANDCROSS = 0;
+		unsigned int spamcount_MO_CALLSPIRITS = 0;
+		unsigned int spamcount_MO_ABSORBSPIRITS = 0;
+		unsigned int spamcount_MO_BODYRELOCATION = 0;
+		unsigned int spamcount_MO_INVESTIGATE = 0;
+		unsigned int spamcount_MO_FINGEROFFENSIVE = 0;
+		unsigned int spamcount_MO_EXPLOSIONSPIRITS = 0;
+		unsigned int spamcount_MO_EXTREMITYFIST = 0;
+		unsigned int spamcount_MO_CHAINCOMBO = 0;
+		unsigned int spamcount_MO_COMBOFINISH = 0;
+		unsigned int spamcount_SA_CASTCANCEL = 0;
+		unsigned int spamcount_SA_SPELLBREAKER = 0;
+		unsigned int spamcount_SA_DISPELL = 0;
+		unsigned int spamcount_SA_ABRACADABRA = 0;
+		unsigned int spamcount_SA_MONOCELL = 0;
+		unsigned int spamcount_SA_CLASSCHANGE = 0;
+		unsigned int spamcount_SA_SUMMONMONSTER = 0;
+		unsigned int spamcount_SA_REVERSEORCISH = 0;
+		unsigned int spamcount_SA_DEATH = 0;
+		unsigned int spamcount_SA_FORTUNE = 0;
+		unsigned int spamcount_SA_TAMINGMONSTER = 0;
+		unsigned int spamcount_SA_QUESTION = 0;
+		unsigned int spamcount_SA_GRAVITY = 0;
+		unsigned int spamcount_SA_LEVELUP = 0;
+		unsigned int spamcount_SA_INSTANTDEATH = 0;
+		unsigned int spamcount_SA_FULLRECOVERY = 0;
+		unsigned int spamcount_SA_COMA = 0;
+		unsigned int spamcount_BD_ADAPTATION = 0;
+		unsigned int spamcount_BD_ENCORE = 0;
+		unsigned int spamcount_BD_LULLABY = 0;
+		unsigned int spamcount_BD_RICHMANKIM = 0;
+		unsigned int spamcount_BA_MUSICALSTRIKE = 0;
+		unsigned int spamcount_BA_DISSONANCE = 0;
+		unsigned int spamcount_BA_FROSTJOKER = 0;
+		unsigned int spamcount_BA_WHISTLE = 0;
+		unsigned int spamcount_BA_ASSASSINCROSS = 0;
+		unsigned int spamcount_BA_POEMBRAGI = 0;
+		unsigned int spamcount_BA_APPLEIDUN = 0;
+		unsigned int spamcount_DC_THROWARROW = 0;
+		unsigned int spamcount_DC_UGLYDANCE = 0;
+		unsigned int spamcount_DC_SCREAM = 0;
+		unsigned int spamcount_DC_HUMMING = 0;
+		unsigned int spamcount_DC_DONTFORGETME = 0;
+		unsigned int spamcount_DC_FORTUNEKISS = 0;
+		unsigned int spamcount_DC_SERVICEFORYOU = 0;
+		unsigned int spamcount_LK_FURY = 0;
+		unsigned int spamcount_HW_MAGICCRASHER = 0;
+		unsigned int spamcount_PA_PRESSURE = 0;
+		unsigned int spamcount_CH_PALMSTRIKE = 0;
+		unsigned int spamcount_CH_TIGERFIST = 0;
+		unsigned int spamcount_CH_CHAINCRUSH = 0;
+		unsigned int spamcount_PF_SOULCHANGE = 0;
+		unsigned int spamcount_PF_SOULBURN = 0;
+		unsigned int spamcount_ASC_BREAKER = 0;
+		unsigned int spamcount_SN_FALCONASSAULT = 0;
+		unsigned int spamcount_SN_SHARPSHOOTING = 0;
+		unsigned int spamcount_CR_ALCHEMY = 0;
+		unsigned int spamcount_CR_SYNTHESISPOTION = 0;
+		unsigned int spamcount_CG_ARROWVULCAN = 0;
+		unsigned int spamcount_CG_MOONLIT = 0;
+		unsigned int spamcount_CG_MARIONETTE = 0;
+		unsigned int spamcount_LK_SPIRALPIERCE = 0;
+		unsigned int spamcount_LK_HEADCRUSH = 0;
+		unsigned int spamcount_LK_JOINTBEAT = 0;
+		unsigned int spamcount_HW_NAPALMVULCAN = 0;
+		unsigned int spamcount_CH_SOULCOLLECT = 0;
+		unsigned int spamcount_PF_MINDBREAKER = 0;
+		unsigned int spamcount_PF_SPIDERWEB = 0;
+		unsigned int spamcount_ASC_METEORASSAULT = 0;
+		unsigned int spamcount_TK_STORMKICK = 0;
+		unsigned int spamcount_TK_DOWNKICK = 0;
+		unsigned int spamcount_TK_TURNKICK = 0;
+		unsigned int spamcount_TK_JUMPKICK = 0;
+		unsigned int spamcount_TK_POWER = 0;
+		unsigned int spamcount_TK_HIGHJUMP = 0;
+		unsigned int spamcount_SL_KAIZEL = 0;
+		unsigned int spamcount_SL_KAAHI = 0;
+		unsigned int spamcount_SL_KAUPE = 0;
+		unsigned int spamcount_SL_KAITE = 0;
+		unsigned int spamcount_SL_KAINA = 0;
+		unsigned int spamcount_SL_STIN = 0;
+		unsigned int spamcount_SL_STUN = 0;
+		unsigned int spamcount_SL_SMA = 0;
+		unsigned int spamcount_SL_SWOO = 0;
+		unsigned int spamcount_SL_SKE = 0;
+		unsigned int spamcount_SL_SKA = 0;
+		unsigned int spamcount_ST_FULLSTRIP = 0;
+		unsigned int spamcount_CR_SLIMPITCHER = 0;
+		unsigned int spamcount_CR_FULLPROTECTION = 0;
+		unsigned int spamcount_PA_SHIELDCHAIN = 0;
+		unsigned int spamcount_HP_MANARECHARGE = 0;
+		unsigned int spamcount_PF_DOUBLECASTING = 0;
+		unsigned int spamcount_HW_GANBANTEIN = 0;
+		unsigned int spamcount_HW_GRAVITATION = 0;
+		unsigned int spamcount_WS_CARTTERMINATION = 0;
+		unsigned int spamcount_CG_HERMODE = 0;
+		unsigned int spamcount_CG_TAROTCARD = 0;
+		unsigned int spamcount_CR_ACIDDEMONSTRATION = 0;
+		unsigned int spamcount_SL_HIGH = 0;
+		unsigned int spamcount_GS_TRIPLEACTION = 0;
+		unsigned int spamcount_GS_BULLSEYE = 0;
+		unsigned int spamcount_GS_MADNESSCANCEL = 0;
+		unsigned int spamcount_GS_INCREASING = 0;
+		unsigned int spamcount_GS_MAGICALBULLET = 0;
+		unsigned int spamcount_GS_CRACKER = 0;
+		unsigned int spamcount_GS_SINGLEACTION = 0;
+		unsigned int spamcount_GS_CHAINACTION = 0;
+		unsigned int spamcount_GS_TRACKING = 0;
+		unsigned int spamcount_GS_DISARM = 0;
+		unsigned int spamcount_GS_PIERCINGSHOT = 0;
+		unsigned int spamcount_GS_RAPIDSHOWER = 0;
+		unsigned int spamcount_GS_DESPERADO = 0;
+		unsigned int spamcount_GS_GATLINGFEVER = 0;
+		unsigned int spamcount_GS_DUST = 0;
+		unsigned int spamcount_GS_FULLBUSTER = 0;
+		unsigned int spamcount_GS_SPREADATTACK = 0;
+		unsigned int spamcount_GS_GROUNDDRIFT = 0;
+		unsigned int spamcount_NJ_TOBIDOUGU = 0;
+		unsigned int spamcount_NJ_SYURIKEN = 0;
+		unsigned int spamcount_NJ_KUNAI = 0;
+		unsigned int spamcount_NJ_HUUMA = 0;
+		unsigned int spamcount_NJ_ZENYNAGE = 0;
+		unsigned int spamcount_NJ_TATAMIGAESHI = 0;
+		unsigned int spamcount_NJ_KASUMIKIRI = 0;
+		unsigned int spamcount_NJ_SHADOWJUMP = 0;
+		unsigned int spamcount_NJ_KIRIKAGE = 0;
+		unsigned int spamcount_NJ_UTSUSEMI = 0;
+		unsigned int spamcount_NJ_BUNSINJYUTSU = 0;
+		unsigned int spamcount_NJ_NINPOU = 0;
+		unsigned int spamcount_NJ_KOUENKA = 0;
+		unsigned int spamcount_NJ_KAENSIN = 0;
+		unsigned int spamcount_NJ_BAKUENRYU = 0;
+		unsigned int spamcount_NJ_HYOUSENSOU = 0;
+		unsigned int spamcount_NJ_SUITON = 0;
+		unsigned int spamcount_NJ_HYOUSYOURAKU = 0;
+		unsigned int spamcount_NJ_HUUJIN = 0;
+		unsigned int spamcount_NJ_RAIGEKISAI = 0;
+		unsigned int spamcount_NJ_KAMAITACHI = 0;
+		unsigned int spamcount_NJ_NEN = 0;
+		unsigned int spamcount_NJ_ISSEN = 0;
+		unsigned int spamcount_KN_CHARGEATK = 0;
+		unsigned int spamcount_AS_VENOMKNIFE = 0;
+		unsigned int spamcount_RG_CLOSECONFINE = 0;
+		unsigned int spamcount_WZ_SIGHTBLASTER = 0;
+		unsigned int spamcount_HT_PHANTASMIC = 0;
+		unsigned int spamcount_BA_PANGVOICE = 0;
+		unsigned int spamcount_DC_WINKCHARM = 0;
+		unsigned int spamcount_PR_REDEMPTIO = 0;
+		unsigned int spamcount_MO_KITRANSLATION = 0;
+		unsigned int spamcount_MO_BALKYOUNG = 0;
+		unsigned int spamcount_RK_SONICWAVE = 0;
+		unsigned int spamcount_RK_DEATHBOUND = 0;
+		unsigned int spamcount_RK_HUNDREDSPEAR = 0;
+		unsigned int spamcount_RK_WINDCUTTER = 0;
+		unsigned int spamcount_RK_IGNITIONBREAK = 0;
+		unsigned int spamcount_RK_DRAGONBREATH = 0;
+		unsigned int spamcount_RK_CRUSHSTRIKE = 0;
+		unsigned int spamcount_RK_STORMBLAST = 0;
+		unsigned int spamcount_RK_PHANTOMTHRUST = 0;
+		unsigned int spamcount_GC_CROSSIMPACT = 0;
+		unsigned int spamcount_GC_WEAPONCRUSH = 0;
+		unsigned int spamcount_GC_ROLLINGCUTTER = 0;
+		unsigned int spamcount_GC_CROSSRIPPERSLASHER = 0;
+		unsigned int spamcount_AB_JUDEX = 0;
+		unsigned int spamcount_AB_ADORAMUS = 0;
+		unsigned int spamcount_AB_CHEAL = 0;
+		unsigned int spamcount_AB_EPICLESIS = 0;
+		unsigned int spamcount_AB_PRAEFATIO = 0;
+		unsigned int spamcount_AB_EUCHARISTICA = 0;
+		unsigned int spamcount_AB_RENOVATIO = 0;
+		unsigned int spamcount_AB_HIGHNESSHEAL = 0;
+		unsigned int spamcount_AB_CLEARANCE = 0;
+		unsigned int spamcount_AB_EXPIATIO = 0;
+		unsigned int spamcount_AB_DUPLELIGHT = 0;
+		unsigned int spamcount_AB_DUPLELIGHT_MELEE = 0;
+		unsigned int spamcount_AB_DUPLELIGHT_MAGIC = 0;
+		unsigned int spamcount_AB_SILENTIUM = 0;
+		unsigned int spamcount_WL_WHITEIMPRISON = 0;
+		unsigned int spamcount_WL_SOULEXPANSION = 0;
+		unsigned int spamcount_WL_FROSTMISTY = 0;
+		unsigned int spamcount_WL_JACKFROST = 0;
+		unsigned int spamcount_WL_MARSHOFABYSS = 0;
+		unsigned int spamcount_WL_RADIUS = 0;
+		unsigned int spamcount_WL_STASIS = 0;
+		unsigned int spamcount_WL_DRAINLIFE = 0;
+		unsigned int spamcount_WL_CRIMSONROCK = 0;
+		unsigned int spamcount_WL_HELLINFERNO = 0;
+		unsigned int spamcount_WL_COMET = 0;
+		unsigned int spamcount_WL_CHAINLIGHTNING = 0;
+		unsigned int spamcount_WL_EARTHSTRAIN = 0;
+		unsigned int spamcount_WL_TETRAVORTEX = 0;
+		unsigned int spamcount_WL_RELEASE = 0;
+		unsigned int spamcount_WL_READING_SB = 0;
+		unsigned int spamcount_WL_FREEZE_SP = 0;
+		unsigned int spamcount_RA_ARROWSTORM = 0;
+		unsigned int spamcount_RA_AIMEDBOLT = 0;
+		unsigned int spamcount_RA_WUGSTRIKE = 0;
+		unsigned int spamcount_RA_WUGBITE = 0;
+		unsigned int spamcount_NC_BOOSTKNUCKLE = 0;
+		unsigned int spamcount_NC_PILEBUNKER = 0;
+		unsigned int spamcount_NC_VULCANARM = 0;
+		unsigned int spamcount_NC_FLAMELAUNCHER = 0;
+		unsigned int spamcount_NC_COLDSLOWER = 0;
+		unsigned int spamcount_NC_ARMSCANNON = 0;
+		unsigned int spamcount_NC_ACCELERATION = 0;
+		unsigned int spamcount_NC_F_SIDESLIDE = 0;
+		unsigned int spamcount_NC_B_SIDESLIDE = 0;
+		unsigned int spamcount_NC_MAINFRAME = 0;
+		unsigned int spamcount_NC_SHAPESHIFT = 0;
+		unsigned int spamcount_NC_INFRAREDSCAN = 0;
+		unsigned int spamcount_NC_ANALYZE = 0;
+		unsigned int spamcount_NC_MAGNETICFIELD = 0;
+		unsigned int spamcount_NC_NEUTRALBARRIER = 0;
+		unsigned int spamcount_NC_STEALTHFIELD = 0;
+		unsigned int spamcount_NC_AXEBOOMERANG = 0;
+		unsigned int spamcount_NC_POWERSWING = 0;
+		unsigned int spamcount_NC_AXETORNADO = 0;
+		unsigned int spamcount_NC_SILVERSNIPER = 0;
+		unsigned int spamcount_NC_MAGICDECOY = 0;
+		unsigned int spamcount_NC_DISJOINT = 0;
+		unsigned int spamcount_SC_FATALMENACE = 0;
+		unsigned int spamcount_SC_AUTOSHADOWSPELL = 0;
+		unsigned int spamcount_SC_TRIANGLESHOT = 0;
+		unsigned int spamcount_SC_INVISIBILITY = 0;
+		unsigned int spamcount_SC_ENERVATION = 0;
+		unsigned int spamcount_SC_GROOMY = 0;
+		unsigned int spamcount_SC_IGNORANCE = 0;
+		unsigned int spamcount_SC_LAZINESS = 0;
+		unsigned int spamcount_SC_UNLUCKY = 0;
+		unsigned int spamcount_SC_WEAKNESS = 0;
+		unsigned int spamcount_SC_STRIPACCESSARY = 0;
+		unsigned int spamcount_SC_MANHOLE = 0;
+		unsigned int spamcount_SC_DIMENSIONDOOR = 0;
+		unsigned int spamcount_SC_CHAOSPANIC = 0;
+		unsigned int spamcount_SC_MAELSTROM = 0;
+		unsigned int spamcount_SC_BLOODYLUST = 0;
+		unsigned int spamcount_SC_FEINTBOMB = 0;
+		unsigned int spamcount_LG_CANNONSPEAR = 0;
+		unsigned int spamcount_LG_BANISHINGPOINT = 0;
+		unsigned int spamcount_LG_TRAMPLE = 0;
+		unsigned int spamcount_LG_PINPOINTATTACK = 0;
+		unsigned int spamcount_LG_RAGEBURST = 0;
+		unsigned int spamcount_LG_EXEEDBREAK = 0;
+		unsigned int spamcount_LG_OVERBRAND = 0;
+		unsigned int spamcount_LG_BANDING = 0;
+		unsigned int spamcount_LG_MOONSLASHER = 0;
+		unsigned int spamcount_LG_RAYOFGENESIS = 0;
+		unsigned int spamcount_LG_PIETY = 0;
+		unsigned int spamcount_LG_EARTHDRIVE = 0;
+		unsigned int spamcount_LG_HESPERUSLIT = 0;
+		unsigned int spamcount_SR_DRAGONCOMBO = 0;
+		unsigned int spamcount_SR_SKYNETBLOW = 0;
+		unsigned int spamcount_SR_EARTHSHAKER = 0;
+		unsigned int spamcount_SR_FALLENEMPIRE = 0;
+		unsigned int spamcount_SR_TIGERCANNON = 0;
+		unsigned int spamcount_SR_HELLGATE = 0;
+		unsigned int spamcount_SR_RAMPAGEBLASTER = 0;
+		unsigned int spamcount_SR_CRESCENTELBOW = 0;
+		unsigned int spamcount_SR_CURSEDCIRCLE = 0;
+		unsigned int spamcount_SR_LIGHTNINGWALK = 0;
+		unsigned int spamcount_SR_KNUCKLEARROW = 0;
+		unsigned int spamcount_SR_WINDMILL = 0;
+		unsigned int spamcount_SR_RAISINGDRAGON = 0;
+		unsigned int spamcount_SR_GENTLETOUCH = 0;
+		unsigned int spamcount_SR_ASSIMILATEPOWER = 0;
+		unsigned int spamcount_SR_POWERVELOCITY = 0;
+		unsigned int spamcount_SR_CRESCENTELBOW_AUTOSPELL = 0;
+		unsigned int spamcount_SR_GATEOFHELL = 0;
+		unsigned int spamcount_SR_GENTLETOUCH_QUIET = 0;
+		unsigned int spamcount_SR_GENTLETOUCH_CURE = 0;
+		unsigned int spamcount_SR_GENTLETOUCH_ENERGYGAIN = 0;
+		unsigned int spamcount_SR_GENTLETOUCH_CHANGE = 0;
+		unsigned int spamcount_SR_GENTLETOUCH_REVITALIZE = 0;
+		unsigned int spamcount_WA_SWING_DANCE = 0;
+		unsigned int spamcount_WA_SYMPHONY_OF_LOVER = 0;
+		unsigned int spamcount_WA_MOONLIT_SERENADE = 0;
+		unsigned int spamcount_MI_RUSH_WINDMILL = 0;
+		unsigned int spamcount_MI_ECHOSONG = 0;
+		unsigned int spamcount_MI_HARMONIZE = 0;
+		unsigned int spamcount_WM_LESSON = 0;
+		unsigned int spamcount_WM_METALICSOUND = 0;
+		unsigned int spamcount_WM_REVERBERATION = 0;
+		unsigned int spamcount_WM_REVERBERATION_MELEE = 0;
+		unsigned int spamcount_WM_REVERBERATION_MAGIC = 0;
+		unsigned int spamcount_WM_DOMINION_IMPULSE = 0;
+		unsigned int spamcount_WM_SEVERE_RAINSTORM = 0;
+		unsigned int spamcount_WM_SEVERE_RAINSTORM_MELEE = 0;
+		unsigned int spamcount_WM_POEMOFNETHERWORLD = 0;
+		unsigned int spamcount_WM_VOICEOFSIREN = 0;
+		unsigned int spamcount_WM_DEADHILLHERE = 0;
+		unsigned int spamcount_WM_LULLABY_DEEPSLEEP = 0;
+		unsigned int spamcount_WM_SIRCLEOFNATURE = 0;
+		unsigned int spamcount_WM_RANDOMIZESPELL = 0;
+		unsigned int spamcount_WM_GLOOMYDAY = 0;
+		unsigned int spamcount_WM_GREAT_ECHO = 0;
+		unsigned int spamcount_WM_SONG_OF_MANA = 0;
+		unsigned int spamcount_WM_DANCE_WITH_WUG = 0;
+		unsigned int spamcount_WM_SOUND_OF_DESTRUCTION = 0;
+		unsigned int spamcount_WM_SATURDAY_NIGHT_FEVER = 0;
+		unsigned int spamcount_WM_LERADS_DEW = 0;
+		unsigned int spamcount_WM_MELODYOFSINK = 0;
+		unsigned int spamcount_WM_BEYOND_OF_WARCRY = 0;
+		unsigned int spamcount_WM_UNLIMITED_HUMMING_VOICE = 0;
+		unsigned int spamcount_SO_FIREWALK = 0;
+		unsigned int spamcount_SO_ELECTRICWALK = 0;
+		unsigned int spamcount_SO_SPELLFIST = 0;
+		unsigned int spamcount_SO_EARTHGRAVE = 0;
+		unsigned int spamcount_SO_DIAMONDDUST = 0;
+		unsigned int spamcount_SO_POISON_BUSTER = 0;
+		unsigned int spamcount_SO_PSYCHIC_WAVE = 0;
+		unsigned int spamcount_SO_CLOUD_KILL = 0;
+		unsigned int spamcount_SO_STRIKING = 0;
+		unsigned int spamcount_SO_WARMER = 0;
+		unsigned int spamcount_SO_VACUUM_EXTREME = 0;
+		unsigned int spamcount_SO_VARETYR_SPEAR = 0;
+		unsigned int spamcount_SO_ARRULLO = 0;
+		unsigned int spamcount_SO_EL_CONTROL = 0;
+		unsigned int spamcount_SO_EL_ACTION = 0;
+		unsigned int spamcount_SO_EL_ANALYSIS = 0;
+		unsigned int spamcount_SO_EL_SYMPATHY = 0;
+		unsigned int spamcount_SO_EL_CURE = 0;
+		unsigned int spamcount_GN_CART_TORNADO = 0;
+		unsigned int spamcount_GN_CARTCANNON = 0;
+		unsigned int spamcount_GN_THORNS_TRAP = 0;
+		unsigned int spamcount_GN_BLOOD_SUCKER = 0;
+		unsigned int spamcount_GN_SPORE_EXPLOSION = 0;
+		unsigned int spamcount_GN_WALLOFTHORN = 0;
+		unsigned int spamcount_GN_CRAZYWEED = 0;
+		unsigned int spamcount_GN_DEMONIC_FIRE = 0;
+		unsigned int spamcount_GN_FIRE_EXPANSION = 0;
+		unsigned int spamcount_GN_HELLS_PLANT = 0;
+		unsigned int spamcount_GN_MANDRAGORA = 0;
+		unsigned int spamcount_GN_SLINGITEM = 0;
+		unsigned int spamcount_GN_CHANGEMATERIAL = 0;
+		unsigned int spamcount_AB_SECRAMENT = 0;
+		unsigned int spamcount_SR_HOWLINGOFLION = 0;
+		unsigned int spamcount_SR_RIDEINLIGHTNING = 0;
+		unsigned int spamcount_LG_OVERBRAND_BRANDISH = 0;
+		unsigned int spamcount_RL_GLITTERING_GREED = 0;
+		unsigned int spamcount_RL_RICHS_COIN = 0;
+		unsigned int spamcount_RL_MASS_SPIRAL = 0;
+		unsigned int spamcount_RL_BANISHING_BUSTER = 0;
+		unsigned int spamcount_RL_B_TRAP = 0;
+		unsigned int spamcount_RL_S_STORM = 0;
+		unsigned int spamcount_RL_E_CHAIN = 0;
+		unsigned int spamcount_RL_QD_SHOT = 0;
+		unsigned int spamcount_RL_C_MARKER = 0;
+		unsigned int spamcount_RL_FIREDANCE = 0;
+		unsigned int spamcount_RL_H_MINE = 0;
+		unsigned int spamcount_RL_P_ALTER = 0;
+		unsigned int spamcount_RL_FALLEN_ANGEL = 0;
+		unsigned int spamcount_RL_R_TRIP = 0;
+		unsigned int spamcount_RL_D_TAIL = 0;
+		unsigned int spamcount_RL_FIRE_RAIN = 0;
+		unsigned int spamcount_RL_HEAT_BARREL = 0;
+		unsigned int spamcount_RL_AM_BLAST = 0;
+		unsigned int spamcount_RL_SLUGSHOT = 0;
+		unsigned int spamcount_RL_HAMMER_OF_GOD = 0;
+		unsigned int spamcount_KO_YAMIKUMO = 0;
+		unsigned int spamcount_KO_JYUMONJIKIRI = 0;
+		unsigned int spamcount_KO_SETSUDAN = 0;
+		unsigned int spamcount_KO_BAKURETSU = 0;
+		unsigned int spamcount_KO_HAPPOKUNAI = 0;
+		unsigned int spamcount_KO_MUCHANAGE = 0;
+		unsigned int spamcount_KO_HUUMARANKA = 0;
+		unsigned int spamcount_KO_MAKIBISHI = 0;
+		unsigned int spamcount_KO_MEIKYOUSISUI = 0;
+		unsigned int spamcount_KO_ZANZOU = 0;
+		unsigned int spamcount_KO_KYOUGAKU = 0;
+		unsigned int spamcount_KO_JYUSATSU = 0;
+		unsigned int spamcount_KO_KAHU_ENTEN = 0;
+		unsigned int spamcount_KO_HYOUHU_HUBUKI = 0;
+		unsigned int spamcount_KO_KAZEHU_SEIRAN = 0;
+		unsigned int spamcount_KO_DOHU_KOUKAI = 0;
+		unsigned int spamcount_KO_KAIHOU = 0;
+		unsigned int spamcount_KO_ZENKAI = 0;
+		unsigned int spamcount_KO_GENWAKU = 0;
+		unsigned int spamcount_KO_IZAYOI = 0;
+		unsigned int spamcount_KG_KAGEHUMI = 0;
+		unsigned int spamcount_KG_KYOMU = 0;
+		unsigned int spamcount_KG_KAGEMUSYA = 0;
+		unsigned int spamcount_OB_ZANGETSU = 0;
+		unsigned int spamcount_OB_OBOROGENSOU = 0;
+		unsigned int spamcount_OB_AKAITSUKI = 0;
+		unsigned int spamcount_GC_DARKCROW = 0;
+		unsigned int spamcount_RA_UNLIMIT = 0;
+		unsigned int spamcount_GN_ILLUSIONDOPING = 0;
+		unsigned int spamcount_RK_DRAGONBREATH_WATER = 0;
+		unsigned int spamcount_RK_LUXANIMA = 0;
+		unsigned int spamcount_NC_MAGMA_ERUPTION = 0;
+		unsigned int spamcount_WM_FRIGG_SONG = 0;
+		unsigned int spamcount_SO_ELEMENTAL_SHIELD = 0;
+		unsigned int spamcount_SR_FLASHCOMBO = 0;
+		unsigned int spamcount_SC_ESCAPE = 0;
+		unsigned int spamcount_AB_OFFERTORIUM = 0;
+		unsigned int spamcount_WL_TELEKINESIS_INTENSE = 0;
+		unsigned int spamcount_ALL_FULL_THROTTLE = 0;
+		unsigned int spamcount_SU_BITE = 0;
+		unsigned int spamcount_SU_SCRATCH = 0;
+		unsigned int spamcount_SU_STOOP = 0;
+		unsigned int spamcount_SU_LOPE = 0;
+		unsigned int spamcount_SU_SPRITEMABLE = 0;
+		unsigned int spamcount_SU_POWEROFLAND = 0;
+		unsigned int spamcount_SU_SV_STEMSPEAR = 0;
+		unsigned int spamcount_SU_CN_POWDERING = 0;
+		unsigned int spamcount_SU_CN_METEOR = 0;
+		unsigned int spamcount_SU_SV_ROOTTWIST = 0;
+		unsigned int spamcount_SU_POWEROFLIFE = 0;
+		unsigned int spamcount_SU_SCAROFTAROU = 0;
+		unsigned int spamcount_SU_PICKYPECK = 0;
+		unsigned int spamcount_SU_ARCLOUSEDASH = 0;
+		unsigned int spamcount_SU_LUNATICCARROTBEAT = 0;
+		unsigned int spamcount_SU_POWEROFSEA = 0;
+		unsigned int spamcount_SU_TUNABELLY = 0;
+		unsigned int spamcount_SU_TUNAPARTY = 0;
+		unsigned int spamcount_SU_BUNCHOFSHRIMP = 0;
+		unsigned int spamcount_SU_FRESHSHRIMP = 0;
+		unsigned int spamcount_SU_CN_METEOR2 = 0;
+		unsigned int spamcount_SU_LUNATICCARROTBEAT2 = 0;
+		unsigned int spamcount_SU_SOULATTACK = 0;
+		unsigned int spamcount_SU_POWEROFFLOCK = 0;
+		unsigned int spamcount_SU_SVG_SPIRIT = 0;
+		unsigned int spamcount_SU_HISS = 0;
+		unsigned int spamcount_SU_NYANGGRASS = 0;
+		unsigned int spamcount_SU_GROOMING = 0;
+		unsigned int spamcount_SU_PURRING = 0;
+		unsigned int spamcount_SU_SHRIMPARTY = 0;
+		unsigned int spamcount_SU_SPIRITOFLIFE = 0;
+		unsigned int spamcount_SU_MEOWMEOW = 0;
+		unsigned int spamcount_SU_SPIRITOFLAND = 0;
+		unsigned int spamcount_SU_CHATTERING = 0;
+		unsigned int spamcount_SU_SPIRITOFSEA = 0;
+		unsigned int spamcount_CG_SPECIALSINGER = 0;
+		unsigned int spamcount_AB_VITUPERATUM = 0;
+		unsigned int spamcount_AB_CONVENIO = 0;
+		unsigned int spamcount_DK_SERVANTWEAPON = 0;
+		unsigned int spamcount_DK_SERVANT_W_SIGN = 0;
+		unsigned int spamcount_DK_SERVANT_W_PHANTOM = 0;
+		unsigned int spamcount_DK_SERVANT_W_DEMOL = 0;
+		unsigned int spamcount_DK_CHARGINGPIERCE = 0;
+		unsigned int spamcount_DK_HACKANDSLASHER = 0;
+		unsigned int spamcount_DK_DRAGONIC_AURA = 0;
+		unsigned int spamcount_DK_MADNESS_CRUSHER = 0;
+		unsigned int spamcount_DK_VIGOR = 0;
+		unsigned int spamcount_DK_STORMSLASH = 0;
+		unsigned int spamcount_AG_DEADLY_PROJECTION = 0;
+		unsigned int spamcount_AG_DESTRUCTIVE_HURRICANE = 0;
+		unsigned int spamcount_AG_RAIN_OF_CRYSTAL = 0;
+		unsigned int spamcount_AG_MYSTERY_ILLUSION = 0;
+		unsigned int spamcount_AG_VIOLENT_QUAKE = 0;
+		unsigned int spamcount_AG_SOUL_VC_STRIKE = 0;
+		unsigned int spamcount_AG_STRANTUM_TREMOR = 0;
+		unsigned int spamcount_AG_ALL_BLOOM = 0;
+		unsigned int spamcount_AG_CRYSTAL_IMPACT = 0;
+		unsigned int spamcount_AG_TORNADO_STORM = 0;
+		unsigned int spamcount_AG_FLORAL_FLARE_ROAD = 0;
+		unsigned int spamcount_AG_ASTRAL_STRIKE = 0;
+		unsigned int spamcount_AG_CLIMAX = 0;
+		unsigned int spamcount_AG_ROCK_DOWN = 0;
+		unsigned int spamcount_AG_STORM_CANNON = 0;
+		unsigned int spamcount_AG_CRIMSON_ARROW = 0;
+		unsigned int spamcount_AG_FROZEN_SLASH = 0;
+		unsigned int spamcount_IQ_POWERFUL_FAITH = 0;
+		unsigned int spamcount_IQ_FIRM_FAITH = 0;
+		unsigned int spamcount_IQ_WILL_OF_FAITH = 0;
+		unsigned int spamcount_IQ_OLEUM_SANCTUM = 0;
+		unsigned int spamcount_IQ_SINCERE_FAITH = 0;
+		unsigned int spamcount_IQ_MASSIVE_F_BLASTER = 0;
+		unsigned int spamcount_IQ_EXPOSION_BLASTER = 0;
+		unsigned int spamcount_IQ_FIRST_BRAND = 0;
+		unsigned int spamcount_IQ_FIRST_FAITH_POWER = 0;
+		unsigned int spamcount_IQ_JUDGE = 0;
+		unsigned int spamcount_IQ_SECOND_FLAME = 0;
+		unsigned int spamcount_IQ_SECOND_FAITH = 0;
+		unsigned int spamcount_IQ_SECOND_JUDGEMENT = 0;
+		unsigned int spamcount_IQ_THIRD_PUNISH = 0;
+		unsigned int spamcount_IQ_THIRD_FLAME_BOMB = 0;
+		unsigned int spamcount_IQ_THIRD_CONSECRATION = 0;
+		unsigned int spamcount_IQ_THIRD_EXOR_FLAME = 0;
+		unsigned int spamcount_IG_GUARD_STANCE = 0;
+		unsigned int spamcount_IG_GUARDIAN_SHIELD = 0;
+		unsigned int spamcount_IG_REBOUND_SHIELD = 0;
+		unsigned int spamcount_IG_ATTACK_STANCE = 0;
+		unsigned int spamcount_IG_ULTIMATE_SACRIFICE = 0;
+		unsigned int spamcount_IG_HOLY_SHIELD = 0;
+		unsigned int spamcount_IG_GRAND_JUDGEMENT = 0;
+		unsigned int spamcount_IG_JUDGEMENT_CROSS = 0;
+		unsigned int spamcount_IG_SHIELD_SHOOTING = 0;
+		unsigned int spamcount_IG_OVERSLASH = 0;
+		unsigned int spamcount_IG_CROSS_RAIN = 0;
+		unsigned int spamcount_CD_REPARATIO = 0;
+		unsigned int spamcount_CD_MEDIALE_VOTUM = 0;
+		unsigned int spamcount_CD_ARGUTUS_VITA = 0;
+		unsigned int spamcount_CD_ARGUTUS_TELUM = 0;
+		unsigned int spamcount_CD_ARBITRIUM = 0;
+		unsigned int spamcount_CD_PRESENS_ACIES = 0;
+		unsigned int spamcount_CD_EFFLIGO = 0;
+		unsigned int spamcount_CD_COMPETENTIA = 0;
+		unsigned int spamcount_CD_PNEUMATICUS_PROCELLA = 0;
+		unsigned int spamcount_CD_DILECTIO_HEAL = 0;
+		unsigned int spamcount_CD_RELIGIO = 0;
+		unsigned int spamcount_CD_BENEDICTUM = 0;
+		unsigned int spamcount_CD_PETITIO = 0;
+		unsigned int spamcount_CD_FRAMEN = 0;
+		unsigned int spamcount_SHC_SHADOW_EXCEED = 0;
+		unsigned int spamcount_SHC_DANCING_KNIFE = 0;
+		unsigned int spamcount_SHC_SAVAGE_IMPACT = 0;
+		unsigned int spamcount_SHC_ETERNAL_SLASH = 0;
+		unsigned int spamcount_SHC_POTENT_VENOM = 0;
+		unsigned int spamcount_SHC_SHADOW_STAB = 0;
+		unsigned int spamcount_SHC_IMPACT_CRATER = 0;
+		unsigned int spamcount_SHC_ENCHANTING_SHADOW = 0;
+		unsigned int spamcount_SHC_FATAL_SHADOW_CROW = 0;
+		unsigned int spamcount_MT_AXE_STOMP = 0;
+		unsigned int spamcount_MT_RUSH_QUAKE = 0;
+		unsigned int spamcount_MT_M_MACHINE = 0;
+		unsigned int spamcount_MT_A_MACHINE = 0;
+		unsigned int spamcount_MT_D_MACHINE = 0;
+		unsigned int spamcount_MT_TWOAXEDEF = 0;
+		unsigned int spamcount_MT_ABR_M = 0;
+		unsigned int spamcount_MT_SUMMON_ABR_BATTLE_WARIOR = 0;
+		unsigned int spamcount_MT_SUMMON_ABR_DUAL_CANNON = 0;
+		unsigned int spamcount_MT_SUMMON_ABR_MOTHER_NET = 0;
+		unsigned int spamcount_MT_SUMMON_ABR_INFINITY = 0;
+		unsigned int spamcount_AG_DESTRUCTIVE_HURRICANE_CLIMAX = 0;
+		unsigned int spamcount_ABC_STRIP_SHADOW = 0;
+		unsigned int spamcount_ABC_ABYSS_DAGGER = 0;
+		unsigned int spamcount_ABC_UNLUCKY_RUSH = 0;
+		unsigned int spamcount_ABC_CHAIN_REACTION_SHOT = 0;
+		unsigned int spamcount_ABC_FROM_THE_ABYSS = 0;
+		unsigned int spamcount_ABC_ABYSS_SLAYER = 0;
+		unsigned int spamcount_ABC_ABYSS_STRIKE = 0;
+		unsigned int spamcount_ABC_DEFT_STAB = 0;
+		unsigned int spamcount_ABC_ABYSS_SQUARE = 0;
+		unsigned int spamcount_ABC_FRENZY_SHOT = 0;
+		unsigned int spamcount_WH_NATUREFRIENDLY = 0;
+		unsigned int spamcount_WH_HAWKRUSH = 0;
+		unsigned int spamcount_WH_HAWKBOOMERANG = 0;
+		unsigned int spamcount_WH_GALESTORM = 0;
+		unsigned int spamcount_WH_DEEPBLINDTRAP = 0;
+		unsigned int spamcount_WH_SOLIDTRAP = 0;
+		unsigned int spamcount_WH_SWIFTTRAP = 0;
+		unsigned int spamcount_WH_CRESCIVE_BOLT = 0;
+		unsigned int spamcount_WH_FLAMETRAP = 0;
+		unsigned int spamcount_BO_ACIDIFIED_ZONE_WATER = 0;
+		unsigned int spamcount_BO_ACIDIFIED_ZONE_GROUND = 0;
+		unsigned int spamcount_BO_ACIDIFIED_ZONE_WIND = 0;
+		unsigned int spamcount_BO_ACIDIFIED_ZONE_FIRE = 0;
+		unsigned int spamcount_TR_STAGE_MANNER = 0;
+		unsigned int spamcount_TR_ROSEBLOSSOM = 0;
+		unsigned int spamcount_TR_RHYTHMSHOOTING = 0;
+		unsigned int spamcount_TR_METALIC_FURY = 0;
+		unsigned int spamcount_EM_DIAMOND_STORM = 0;
+		unsigned int spamcount_EM_LIGHTNING_LAND = 0;
+		unsigned int spamcount_EM_VENOM_SWAMP = 0;
+		unsigned int spamcount_EM_CONFLAGRATION = 0;
+		unsigned int spamcount_EM_TERRA_DRIVE = 0;
+		unsigned int spamcount_EM_ELEMENTAL_BUSTER = 0;
+		unsigned int spamcount_BO_WOODEN_THROWROCK = 0;
+		unsigned int spamcount_BO_WOODEN_ATTACK = 0;
+		unsigned int spamcount_BO_HELL_HOWLING = 0;
+		unsigned int spamcount_BO_HELL_DUSTY = 0;
+		unsigned int spamcount_BO_FAIRY_DUSTY = 0;
+		unsigned int spamcount_EM_ELEMENTAL_BUSTER_FIRE = 0;
+		unsigned int spamcount_EM_ELEMENTAL_BUSTER_WATER = 0;
+		unsigned int spamcount_EM_ELEMENTAL_BUSTER_WIND = 0;
+		unsigned int spamcount_EM_ELEMENTAL_BUSTER_GROUND = 0;
+		unsigned int spamcount_EM_ELEMENTAL_BUSTER_POISON = 0;
+//=========================================================================================
 	struct s_item_delay {
 		t_itemid nameid;
 		t_tick tick;
Index: src/map/skill.hpp
===================================================================
--- src/map/skill.hpp	(revision 8)
+++ src/map/skill.hpp	(working copy)
@@ -36,6 +36,9 @@
 #define SKILL_NAME_LENGTH 31 /// Max Skill Name length
 #define SKILL_DESC_LENGTH 31 /// Max Skill Desc length
 
+// [keitenai] SpeedHack Protection
+#define Acceptable_Packet battle_config.MAX_PACKET_COUNTER
+
 /// Used with tracking the hitcount of Earthquake for skills that can avoid the first attack
 #define NPC_EARTHQUAKE_FLAG 0x800
 
Index: src/map/unit.cpp
===================================================================
--- src/map/unit.cpp	(revision 8)
+++ src/map/unit.cpp	(working copy)
@@ -1581,6 +1581,34 @@
 	return 1;
 }
 
+//==========================================
+// [keitenai] Delay System
+//==========================================
+bool k_tick_check(struct map_session_data *sd, t_tick k_tick_t, int k_tick_c, int kdelay_n, int kdelay_w) {
+	char msg[200];
+	int m_castle = 0;
+
+	if (map_getmapflag(sd->bl.m, MF_GVG_CASTLE) || map_getmapflag(sd->bl.m, MF_GVG_TE_CASTLE)){
+		m_castle = 1;
+		sd->kdelay = kdelay_w;
+	}
+	else
+		sd->kdelay = kdelay_n;
+
+	if (DIFF_TICK(k_tick_t, gettick()) > 0) {
+		if (battle_config.KEITENAI_SHOW_DELAY) {
+			sprintf(msg, "[ %I64i ] second(s) skill use delay", (k_tick_t - gettick()) / 1000);
+			clif_messagecolor(&sd->bl, color_table[COLOR_RED], msg, false, SELF);
+		}
+		if ((m_castle && (k_tick_c > (kdelay_w / Acceptable_Packet))) || k_tick_c > (kdelay_n / Acceptable_Packet))
+			clif_authfail_fd(sd->fd, 9); // Disconnect Player
+
+		sd->k_tick_c = k_tick_c + 1;
+		return true;
+	}
+	return false;
+}
+
 /**
  * Performs checks for a unit using a skill and executes after cast time completion
  * @param src: Object using skill
@@ -2071,9 +2099,660 @@
 
 		if( sd && (pc_checkskill(sd,SA_FREECAST) > 0 || skill_id == LG_EXEEDBREAK) )
 			status_calc_bl(&sd->bl, { SCB_SPEED, SCB_ASPD });
-	} else
-		skill_castend_id(ud->skilltimer,tick,src->id,0);
+	} else {
 
+		/** [keitenai] Speed Hack Protection **/
+		if (sd && battle_config.KEITENAI_DELAY_SYSTEM) {
+			sd->k_tick_c = 0;
+			sd->kdelay = 0;
+
+			switch (skill_id) {
+			case SM_BASH:                          if (k_tick_check(sd, sd->spamtick_SM_BASH,                          sd->spamcount_SM_BASH,                          battle_config.kd_SM_BASH,                          battle_config.kdw_SM_BASH))                          { sd->spamcount_SM_BASH = sd->k_tick_c; return 0; }                          sd->spamcount_SM_BASH = 0;                          sd->spamtick_SM_BASH = tick + sd->kdelay;                          break;
+			case SM_MAGNUM:                        if (k_tick_check(sd, sd->spamtick_SM_MAGNUM,                        sd->spamcount_SM_MAGNUM,                        battle_config.kd_SM_MAGNUM,                        battle_config.kdw_SM_MAGNUM))                        { sd->spamcount_SM_MAGNUM = sd->k_tick_c; return 0; }                        sd->spamcount_SM_MAGNUM = 0;                        sd->spamtick_SM_MAGNUM = tick + sd->kdelay;                        break;
+			case MG_NAPALMBEAT:                    if (k_tick_check(sd, sd->spamtick_MG_NAPALMBEAT,                    sd->spamcount_MG_NAPALMBEAT,                    battle_config.kd_MG_NAPALMBEAT,                    battle_config.kdw_MG_NAPALMBEAT))                    { sd->spamcount_MG_NAPALMBEAT = sd->k_tick_c; return 0; }                    sd->spamcount_MG_NAPALMBEAT = 0;                    sd->spamtick_MG_NAPALMBEAT = tick + sd->kdelay;                    break;
+			case MG_SOULSTRIKE:                    if (k_tick_check(sd, sd->spamtick_MG_SOULSTRIKE,                    sd->spamcount_MG_SOULSTRIKE,                    battle_config.kd_MG_SOULSTRIKE,                    battle_config.kdw_MG_SOULSTRIKE))                    { sd->spamcount_MG_SOULSTRIKE = sd->k_tick_c; return 0; }                    sd->spamcount_MG_SOULSTRIKE = 0;                    sd->spamtick_MG_SOULSTRIKE = tick + sd->kdelay;                    break;
+			case MG_COLDBOLT:                      if (k_tick_check(sd, sd->spamtick_MG_COLDBOLT,                      sd->spamcount_MG_COLDBOLT,                      battle_config.kd_MG_COLDBOLT,                      battle_config.kdw_MG_COLDBOLT))                      { sd->spamcount_MG_COLDBOLT = sd->k_tick_c; return 0; }                      sd->spamcount_MG_COLDBOLT = 0;                      sd->spamtick_MG_COLDBOLT = tick + sd->kdelay;                      break;
+			case MG_FROSTDIVER:                    if (k_tick_check(sd, sd->spamtick_MG_FROSTDIVER,                    sd->spamcount_MG_FROSTDIVER,                    battle_config.kd_MG_FROSTDIVER,                    battle_config.kdw_MG_FROSTDIVER))                    { sd->spamcount_MG_FROSTDIVER = sd->k_tick_c; return 0; }                    sd->spamcount_MG_FROSTDIVER = 0;                    sd->spamtick_MG_FROSTDIVER = tick + sd->kdelay;                    break;
+			case MG_STONECURSE:                    if (k_tick_check(sd, sd->spamtick_MG_STONECURSE,                    sd->spamcount_MG_STONECURSE,                    battle_config.kd_MG_STONECURSE,                    battle_config.kdw_MG_STONECURSE))                    { sd->spamcount_MG_STONECURSE = sd->k_tick_c; return 0; }                    sd->spamcount_MG_STONECURSE = 0;                    sd->spamtick_MG_STONECURSE = tick + sd->kdelay;                    break;
+			case MG_FIREBALL:                      if (k_tick_check(sd, sd->spamtick_MG_FIREBALL,                      sd->spamcount_MG_FIREBALL,                      battle_config.kd_MG_FIREBALL,                      battle_config.kdw_MG_FIREBALL))                      { sd->spamcount_MG_FIREBALL = sd->k_tick_c; return 0; }                      sd->spamcount_MG_FIREBALL = 0;                      sd->spamtick_MG_FIREBALL = tick + sd->kdelay;                      break;
+			case MG_FIREWALL:                      if (k_tick_check(sd, sd->spamtick_MG_FIREWALL,                      sd->spamcount_MG_FIREWALL,                      battle_config.kd_MG_FIREWALL,                      battle_config.kdw_MG_FIREWALL))                      { sd->spamcount_MG_FIREWALL = sd->k_tick_c; return 0; }                      sd->spamcount_MG_FIREWALL = 0;                      sd->spamtick_MG_FIREWALL = tick + sd->kdelay;                      break;
+			case MG_FIREBOLT:                      if (k_tick_check(sd, sd->spamtick_MG_FIREBOLT,                      sd->spamcount_MG_FIREBOLT,                      battle_config.kd_MG_FIREBOLT,                      battle_config.kdw_MG_FIREBOLT))                      { sd->spamcount_MG_FIREBOLT = sd->k_tick_c; return 0; }                      sd->spamcount_MG_FIREBOLT = 0;                      sd->spamtick_MG_FIREBOLT = tick + sd->kdelay;                      break;
+			case MG_LIGHTNINGBOLT:                 if (k_tick_check(sd, sd->spamtick_MG_LIGHTNINGBOLT,                 sd->spamcount_MG_LIGHTNINGBOLT,                 battle_config.kd_MG_LIGHTNINGBOLT,                 battle_config.kdw_MG_LIGHTNINGBOLT))                 { sd->spamcount_MG_LIGHTNINGBOLT = sd->k_tick_c; return 0; }                 sd->spamcount_MG_LIGHTNINGBOLT = 0;                 sd->spamtick_MG_LIGHTNINGBOLT = tick + sd->kdelay;                 break;
+			case MG_THUNDERSTORM:                  if (k_tick_check(sd, sd->spamtick_MG_THUNDERSTORM,                  sd->spamcount_MG_THUNDERSTORM,                  battle_config.kd_MG_THUNDERSTORM,                  battle_config.kdw_MG_THUNDERSTORM))                  { sd->spamcount_MG_THUNDERSTORM = sd->k_tick_c; return 0; }                  sd->spamcount_MG_THUNDERSTORM = 0;                  sd->spamtick_MG_THUNDERSTORM = tick + sd->kdelay;                  break;
+			case AL_HEAL:                          if (k_tick_check(sd, sd->spamtick_AL_HEAL,                          sd->spamcount_AL_HEAL,                          battle_config.kd_AL_HEAL,                          battle_config.kdw_AL_HEAL))                          { sd->spamcount_AL_HEAL = sd->k_tick_c; return 0; }                          sd->spamcount_AL_HEAL = 0;                          sd->spamtick_AL_HEAL = tick + sd->kdelay;                          break;
+			case AL_DECAGI:                        if (k_tick_check(sd, sd->spamtick_AL_DECAGI,                        sd->spamcount_AL_DECAGI,                        battle_config.kd_AL_DECAGI,                        battle_config.kdw_AL_DECAGI))                        { sd->spamcount_AL_DECAGI = sd->k_tick_c; return 0; }                        sd->spamcount_AL_DECAGI = 0;                        sd->spamtick_AL_DECAGI = tick + sd->kdelay;                        break;
+			case AL_CRUCIS:                        if (k_tick_check(sd, sd->spamtick_AL_CRUCIS,                        sd->spamcount_AL_CRUCIS,                        battle_config.kd_AL_CRUCIS,                        battle_config.kdw_AL_CRUCIS))                        { sd->spamcount_AL_CRUCIS = sd->k_tick_c; return 0; }                        sd->spamcount_AL_CRUCIS = 0;                        sd->spamtick_AL_CRUCIS = tick + sd->kdelay;                        break;
+			case MC_MAMMONITE:                     if (k_tick_check(sd, sd->spamtick_MC_MAMMONITE,                     sd->spamcount_MC_MAMMONITE,                     battle_config.kd_MC_MAMMONITE,                     battle_config.kdw_MC_MAMMONITE))                     { sd->spamcount_MC_MAMMONITE = sd->k_tick_c; return 0; }                     sd->spamcount_MC_MAMMONITE = 0;                     sd->spamtick_MC_MAMMONITE = tick + sd->kdelay;                     break;
+			case AC_DOUBLE:                        if (k_tick_check(sd, sd->spamtick_AC_DOUBLE,                        sd->spamcount_AC_DOUBLE,                        battle_config.kd_AC_DOUBLE,                        battle_config.kdw_AC_DOUBLE))                        { sd->spamcount_AC_DOUBLE = sd->k_tick_c; return 0; }                        sd->spamcount_AC_DOUBLE = 0;                        sd->spamtick_AC_DOUBLE = tick + sd->kdelay;                        break;
+			case AC_SHOWER:                        if (k_tick_check(sd, sd->spamtick_AC_SHOWER,                        sd->spamcount_AC_SHOWER,                        battle_config.kd_AC_SHOWER,                        battle_config.kdw_AC_SHOWER))                        { sd->spamcount_AC_SHOWER = sd->k_tick_c; return 0; }                        sd->spamcount_AC_SHOWER = 0;                        sd->spamtick_AC_SHOWER = tick + sd->kdelay;                        break;
+			case TF_POISON:                        if (k_tick_check(sd, sd->spamtick_TF_POISON,                        sd->spamcount_TF_POISON,                        battle_config.kd_TF_POISON,                        battle_config.kdw_TF_POISON))                        { sd->spamcount_TF_POISON = sd->k_tick_c; return 0; }                        sd->spamcount_TF_POISON = 0;                        sd->spamtick_TF_POISON = tick + sd->kdelay;                        break;
+			case KN_PIERCE:                        if (k_tick_check(sd, sd->spamtick_KN_PIERCE,                        sd->spamcount_KN_PIERCE,                        battle_config.kd_KN_PIERCE,                        battle_config.kdw_KN_PIERCE))                        { sd->spamcount_KN_PIERCE = sd->k_tick_c; return 0; }                        sd->spamcount_KN_PIERCE = 0;                        sd->spamtick_KN_PIERCE = tick + sd->kdelay;                        break;
+			case KN_BRANDISHSPEAR:                 if (k_tick_check(sd, sd->spamtick_KN_BRANDISHSPEAR,                 sd->spamcount_KN_BRANDISHSPEAR,                 battle_config.kd_KN_BRANDISHSPEAR,                 battle_config.kdw_KN_BRANDISHSPEAR))                 { sd->spamcount_KN_BRANDISHSPEAR = sd->k_tick_c; return 0; }                 sd->spamcount_KN_BRANDISHSPEAR = 0;                 sd->spamtick_KN_BRANDISHSPEAR = tick + sd->kdelay;                 break;
+			case KN_SPEARSTAB:                     if (k_tick_check(sd, sd->spamtick_KN_SPEARSTAB,                     sd->spamcount_KN_SPEARSTAB,                     battle_config.kd_KN_SPEARSTAB,                     battle_config.kdw_KN_SPEARSTAB))                     { sd->spamcount_KN_SPEARSTAB = sd->k_tick_c; return 0; }                     sd->spamcount_KN_SPEARSTAB = 0;                     sd->spamtick_KN_SPEARSTAB = tick + sd->kdelay;                     break;
+			case KN_SPEARBOOMERANG:                if (k_tick_check(sd, sd->spamtick_KN_SPEARBOOMERANG,                sd->spamcount_KN_SPEARBOOMERANG,                battle_config.kd_KN_SPEARBOOMERANG,                battle_config.kdw_KN_SPEARBOOMERANG))                { sd->spamcount_KN_SPEARBOOMERANG = sd->k_tick_c; return 0; }                sd->spamcount_KN_SPEARBOOMERANG = 0;                sd->spamtick_KN_SPEARBOOMERANG = tick + sd->kdelay;                break;
+			case KN_BOWLINGBASH:                   if (k_tick_check(sd, sd->spamtick_KN_BOWLINGBASH,                   sd->spamcount_KN_BOWLINGBASH,                   battle_config.kd_KN_BOWLINGBASH,                   battle_config.kdw_KN_BOWLINGBASH))                   { sd->spamcount_KN_BOWLINGBASH = sd->k_tick_c; return 0; }                   sd->spamcount_KN_BOWLINGBASH = 0;                   sd->spamtick_KN_BOWLINGBASH = tick + sd->kdelay;                   break;
+			case PR_LEXDIVINA:                     if (k_tick_check(sd, sd->spamtick_PR_LEXDIVINA,                     sd->spamcount_PR_LEXDIVINA,                     battle_config.kd_PR_LEXDIVINA,                     battle_config.kdw_PR_LEXDIVINA))                     { sd->spamcount_PR_LEXDIVINA = sd->k_tick_c; return 0; }                     sd->spamcount_PR_LEXDIVINA = 0;                     sd->spamtick_PR_LEXDIVINA = tick + sd->kdelay;                     break;
+			case PR_TURNUNDEAD:                    if (k_tick_check(sd, sd->spamtick_PR_TURNUNDEAD,                    sd->spamcount_PR_TURNUNDEAD,                    battle_config.kd_PR_TURNUNDEAD,                    battle_config.kdw_PR_TURNUNDEAD))                    { sd->spamcount_PR_TURNUNDEAD = sd->k_tick_c; return 0; }                    sd->spamcount_PR_TURNUNDEAD = 0;                    sd->spamtick_PR_TURNUNDEAD = tick + sd->kdelay;                    break;
+			case PR_LEXAETERNA:                    if (k_tick_check(sd, sd->spamtick_PR_LEXAETERNA,                    sd->spamcount_PR_LEXAETERNA,                    battle_config.kd_PR_LEXAETERNA,                    battle_config.kdw_PR_LEXAETERNA))                    { sd->spamcount_PR_LEXAETERNA = sd->k_tick_c; return 0; }                    sd->spamcount_PR_LEXAETERNA = 0;                    sd->spamtick_PR_LEXAETERNA = tick + sd->kdelay;                    break;
+			case PR_MAGNUS:                        if (k_tick_check(sd, sd->spamtick_PR_MAGNUS,                        sd->spamcount_PR_MAGNUS,                        battle_config.kd_PR_MAGNUS,                        battle_config.kdw_PR_MAGNUS))                        { sd->spamcount_PR_MAGNUS = sd->k_tick_c; return 0; }                        sd->spamcount_PR_MAGNUS = 0;                        sd->spamtick_PR_MAGNUS = tick + sd->kdelay;                        break;
+			case WZ_FIREPILLAR:                    if (k_tick_check(sd, sd->spamtick_WZ_FIREPILLAR,                    sd->spamcount_WZ_FIREPILLAR,                    battle_config.kd_WZ_FIREPILLAR,                    battle_config.kdw_WZ_FIREPILLAR))                    { sd->spamcount_WZ_FIREPILLAR = sd->k_tick_c; return 0; }                    sd->spamcount_WZ_FIREPILLAR = 0;                    sd->spamtick_WZ_FIREPILLAR = tick + sd->kdelay;                    break;
+			case WZ_SIGHTRASHER:                   if (k_tick_check(sd, sd->spamtick_WZ_SIGHTRASHER,                   sd->spamcount_WZ_SIGHTRASHER,                   battle_config.kd_WZ_SIGHTRASHER,                   battle_config.kdw_WZ_SIGHTRASHER))                   { sd->spamcount_WZ_SIGHTRASHER = sd->k_tick_c; return 0; }                   sd->spamcount_WZ_SIGHTRASHER = 0;                   sd->spamtick_WZ_SIGHTRASHER = tick + sd->kdelay;                   break;
+			case WZ_FIREIVY:                       if (k_tick_check(sd, sd->spamtick_WZ_FIREIVY,                       sd->spamcount_WZ_FIREIVY,                       battle_config.kd_WZ_FIREIVY,                       battle_config.kdw_WZ_FIREIVY))                       { sd->spamcount_WZ_FIREIVY = sd->k_tick_c; return 0; }                       sd->spamcount_WZ_FIREIVY = 0;                       sd->spamtick_WZ_FIREIVY = tick + sd->kdelay;                       break;
+			case WZ_METEOR:                        if (k_tick_check(sd, sd->spamtick_WZ_METEOR,                        sd->spamcount_WZ_METEOR,                        battle_config.kd_WZ_METEOR,                        battle_config.kdw_WZ_METEOR))                        { sd->spamcount_WZ_METEOR = sd->k_tick_c; return 0; }                        sd->spamcount_WZ_METEOR = 0;                        sd->spamtick_WZ_METEOR = tick + sd->kdelay;                        break;
+			case WZ_JUPITEL:                       if (k_tick_check(sd, sd->spamtick_WZ_JUPITEL,                       sd->spamcount_WZ_JUPITEL,                       battle_config.kd_WZ_JUPITEL,                       battle_config.kdw_WZ_JUPITEL))                       { sd->spamcount_WZ_JUPITEL = sd->k_tick_c; return 0; }                       sd->spamcount_WZ_JUPITEL = 0;                       sd->spamtick_WZ_JUPITEL = tick + sd->kdelay;                       break;
+			case WZ_VERMILION:                     if (k_tick_check(sd, sd->spamtick_WZ_VERMILION,                     sd->spamcount_WZ_VERMILION,                     battle_config.kd_WZ_VERMILION,                     battle_config.kdw_WZ_VERMILION))                     { sd->spamcount_WZ_VERMILION = sd->k_tick_c; return 0; }                     sd->spamcount_WZ_VERMILION = 0;                     sd->spamtick_WZ_VERMILION = tick + sd->kdelay;                     break;
+			case WZ_WATERBALL:                     if (k_tick_check(sd, sd->spamtick_WZ_WATERBALL,                     sd->spamcount_WZ_WATERBALL,                     battle_config.kd_WZ_WATERBALL,                     battle_config.kdw_WZ_WATERBALL))                     { sd->spamcount_WZ_WATERBALL = sd->k_tick_c; return 0; }                     sd->spamcount_WZ_WATERBALL = 0;                     sd->spamtick_WZ_WATERBALL = tick + sd->kdelay;                     break;
+			case WZ_ICEWALL:                       if (k_tick_check(sd, sd->spamtick_WZ_ICEWALL,                       sd->spamcount_WZ_ICEWALL,                       battle_config.kd_WZ_ICEWALL,                       battle_config.kdw_WZ_ICEWALL))                       { sd->spamcount_WZ_ICEWALL = sd->k_tick_c; return 0; }                       sd->spamcount_WZ_ICEWALL = 0;                       sd->spamtick_WZ_ICEWALL = tick + sd->kdelay;                       break;
+			case WZ_FROSTNOVA:                     if (k_tick_check(sd, sd->spamtick_WZ_FROSTNOVA,                     sd->spamcount_WZ_FROSTNOVA,                     battle_config.kd_WZ_FROSTNOVA,                     battle_config.kdw_WZ_FROSTNOVA))                     { sd->spamcount_WZ_FROSTNOVA = sd->k_tick_c; return 0; }                     sd->spamcount_WZ_FROSTNOVA = 0;                     sd->spamtick_WZ_FROSTNOVA = tick + sd->kdelay;                     break;
+			case WZ_STORMGUST:                     if (k_tick_check(sd, sd->spamtick_WZ_STORMGUST,                     sd->spamcount_WZ_STORMGUST,                     battle_config.kd_WZ_STORMGUST,                     battle_config.kdw_WZ_STORMGUST))                     { sd->spamcount_WZ_STORMGUST = sd->k_tick_c; return 0; }                     sd->spamcount_WZ_STORMGUST = 0;                     sd->spamtick_WZ_STORMGUST = tick + sd->kdelay;                     break;
+			case WZ_EARTHSPIKE:                    if (k_tick_check(sd, sd->spamtick_WZ_EARTHSPIKE,                    sd->spamcount_WZ_EARTHSPIKE,                    battle_config.kd_WZ_EARTHSPIKE,                    battle_config.kdw_WZ_EARTHSPIKE))                    { sd->spamcount_WZ_EARTHSPIKE = sd->k_tick_c; return 0; }                    sd->spamcount_WZ_EARTHSPIKE = 0;                    sd->spamtick_WZ_EARTHSPIKE = tick + sd->kdelay;                    break;
+			case WZ_HEAVENDRIVE:                   if (k_tick_check(sd, sd->spamtick_WZ_HEAVENDRIVE,                   sd->spamcount_WZ_HEAVENDRIVE,                   battle_config.kd_WZ_HEAVENDRIVE,                   battle_config.kdw_WZ_HEAVENDRIVE))                   { sd->spamcount_WZ_HEAVENDRIVE = sd->k_tick_c; return 0; }                   sd->spamcount_WZ_HEAVENDRIVE = 0;                   sd->spamtick_WZ_HEAVENDRIVE = tick + sd->kdelay;                   break;
+			case WZ_QUAGMIRE:                      if (k_tick_check(sd, sd->spamtick_WZ_QUAGMIRE,                      sd->spamcount_WZ_QUAGMIRE,                      battle_config.kd_WZ_QUAGMIRE,                      battle_config.kdw_WZ_QUAGMIRE))                      { sd->spamcount_WZ_QUAGMIRE = sd->k_tick_c; return 0; }                      sd->spamcount_WZ_QUAGMIRE = 0;                      sd->spamtick_WZ_QUAGMIRE = tick + sd->kdelay;                      break;
+			case WZ_ESTIMATION:                    if (k_tick_check(sd, sd->spamtick_WZ_ESTIMATION,                    sd->spamcount_WZ_ESTIMATION,                    battle_config.kd_WZ_ESTIMATION,                    battle_config.kdw_WZ_ESTIMATION))                    { sd->spamcount_WZ_ESTIMATION = sd->k_tick_c; return 0; }                    sd->spamcount_WZ_ESTIMATION = 0;                    sd->spamtick_WZ_ESTIMATION = tick + sd->kdelay;                    break;
+			case BS_HAMMERFALL:                    if (k_tick_check(sd, sd->spamtick_BS_HAMMERFALL,                    sd->spamcount_BS_HAMMERFALL,                    battle_config.kd_BS_HAMMERFALL,                    battle_config.kdw_BS_HAMMERFALL))                    { sd->spamcount_BS_HAMMERFALL = sd->k_tick_c; return 0; }                    sd->spamcount_BS_HAMMERFALL = 0;                    sd->spamtick_BS_HAMMERFALL = tick + sd->kdelay;                    break;
+			case HT_BLITZBEAT:                     if (k_tick_check(sd, sd->spamtick_HT_BLITZBEAT,                     sd->spamcount_HT_BLITZBEAT,                     battle_config.kd_HT_BLITZBEAT,                     battle_config.kdw_HT_BLITZBEAT))                     { sd->spamcount_HT_BLITZBEAT = sd->k_tick_c; return 0; }                     sd->spamcount_HT_BLITZBEAT = 0;                     sd->spamtick_HT_BLITZBEAT = tick + sd->kdelay;                     break;
+			case AS_SONICBLOW:                     if (k_tick_check(sd, sd->spamtick_AS_SONICBLOW,                     sd->spamcount_AS_SONICBLOW,                     battle_config.kd_AS_SONICBLOW,                     battle_config.kdw_AS_SONICBLOW))                     { sd->spamcount_AS_SONICBLOW = sd->k_tick_c; return 0; }                     sd->spamcount_AS_SONICBLOW = 0;                     sd->spamtick_AS_SONICBLOW = tick + sd->kdelay;                     break;
+			case AS_GRIMTOOTH:                     if (k_tick_check(sd, sd->spamtick_AS_GRIMTOOTH,                     sd->spamcount_AS_GRIMTOOTH,                     battle_config.kd_AS_GRIMTOOTH,                     battle_config.kdw_AS_GRIMTOOTH))                     { sd->spamcount_AS_GRIMTOOTH = sd->k_tick_c; return 0; }                     sd->spamcount_AS_GRIMTOOTH = 0;                     sd->spamtick_AS_GRIMTOOTH = tick + sd->kdelay;                     break;
+			case AC_CHARGEARROW:                   if (k_tick_check(sd, sd->spamtick_AC_CHARGEARROW,                   sd->spamcount_AC_CHARGEARROW,                   battle_config.kd_AC_CHARGEARROW,                   battle_config.kdw_AC_CHARGEARROW))                   { sd->spamcount_AC_CHARGEARROW = sd->k_tick_c; return 0; }                   sd->spamcount_AC_CHARGEARROW = 0;                   sd->spamtick_AC_CHARGEARROW = tick + sd->kdelay;                   break;
+			case TF_BACKSLIDING:                   if (k_tick_check(sd, sd->spamtick_TF_BACKSLIDING,                   sd->spamcount_TF_BACKSLIDING,                   battle_config.kd_TF_BACKSLIDING,                   battle_config.kdw_TF_BACKSLIDING))                   { sd->spamcount_TF_BACKSLIDING = sd->k_tick_c; return 0; }                   sd->spamcount_TF_BACKSLIDING = 0;                   sd->spamtick_TF_BACKSLIDING = tick + sd->kdelay;                   break;
+			case MC_CARTREVOLUTION:                if (k_tick_check(sd, sd->spamtick_MC_CARTREVOLUTION,                sd->spamcount_MC_CARTREVOLUTION,                battle_config.kd_MC_CARTREVOLUTION,                battle_config.kdw_MC_CARTREVOLUTION))                { sd->spamcount_MC_CARTREVOLUTION = sd->k_tick_c; return 0; }                sd->spamcount_MC_CARTREVOLUTION = 0;                sd->spamtick_MC_CARTREVOLUTION = tick + sd->kdelay;                break;
+			case AL_HOLYLIGHT:                     if (k_tick_check(sd, sd->spamtick_AL_HOLYLIGHT,                     sd->spamcount_AL_HOLYLIGHT,                     battle_config.kd_AL_HOLYLIGHT,                     battle_config.kdw_AL_HOLYLIGHT))                     { sd->spamcount_AL_HOLYLIGHT = sd->k_tick_c; return 0; }                     sd->spamcount_AL_HOLYLIGHT = 0;                     sd->spamtick_AL_HOLYLIGHT = tick + sd->kdelay;                     break;
+			case RG_BACKSTAP:                      if (k_tick_check(sd, sd->spamtick_RG_BACKSTAP,                      sd->spamcount_RG_BACKSTAP,                      battle_config.kd_RG_BACKSTAP,                      battle_config.kdw_RG_BACKSTAP))                      { sd->spamcount_RG_BACKSTAP = sd->k_tick_c; return 0; }                      sd->spamcount_RG_BACKSTAP = 0;                      sd->spamtick_RG_BACKSTAP = tick + sd->kdelay;                      break;
+			case RG_RAID:                          if (k_tick_check(sd, sd->spamtick_RG_RAID,                          sd->spamcount_RG_RAID,                          battle_config.kd_RG_RAID,                          battle_config.kdw_RG_RAID))                          { sd->spamcount_RG_RAID = sd->k_tick_c; return 0; }                          sd->spamcount_RG_RAID = 0;                          sd->spamtick_RG_RAID = tick + sd->kdelay;                          break;
+			case RG_GRAFFITI:                      if (k_tick_check(sd, sd->spamtick_RG_GRAFFITI,                      sd->spamcount_RG_GRAFFITI,                      battle_config.kd_RG_GRAFFITI,                      battle_config.kdw_RG_GRAFFITI))                      { sd->spamcount_RG_GRAFFITI = sd->k_tick_c; return 0; }                      sd->spamcount_RG_GRAFFITI = 0;                      sd->spamtick_RG_GRAFFITI = tick + sd->kdelay;                      break;
+			case RG_FLAGGRAFFITI:                  if (k_tick_check(sd, sd->spamtick_RG_FLAGGRAFFITI,                  sd->spamcount_RG_FLAGGRAFFITI,                  battle_config.kd_RG_FLAGGRAFFITI,                  battle_config.kdw_RG_FLAGGRAFFITI))                  { sd->spamcount_RG_FLAGGRAFFITI = sd->k_tick_c; return 0; }                  sd->spamcount_RG_FLAGGRAFFITI = 0;                  sd->spamtick_RG_FLAGGRAFFITI = tick + sd->kdelay;                  break;
+			case RG_COMPULSION:                    if (k_tick_check(sd, sd->spamtick_RG_COMPULSION,                    sd->spamcount_RG_COMPULSION,                    battle_config.kd_RG_COMPULSION,                    battle_config.kdw_RG_COMPULSION))                    { sd->spamcount_RG_COMPULSION = sd->k_tick_c; return 0; }                    sd->spamcount_RG_COMPULSION = 0;                    sd->spamtick_RG_COMPULSION = tick + sd->kdelay;                    break;
+			case RG_PLAGIARISM:                    if (k_tick_check(sd, sd->spamtick_RG_PLAGIARISM,                    sd->spamcount_RG_PLAGIARISM,                    battle_config.kd_RG_PLAGIARISM,                    battle_config.kdw_RG_PLAGIARISM))                    { sd->spamcount_RG_PLAGIARISM = sd->k_tick_c; return 0; }                    sd->spamcount_RG_PLAGIARISM = 0;                    sd->spamtick_RG_PLAGIARISM = tick + sd->kdelay;                    break;
+			case AM_DEMONSTRATION:                 if (k_tick_check(sd, sd->spamtick_AM_DEMONSTRATION,                 sd->spamcount_AM_DEMONSTRATION,                 battle_config.kd_AM_DEMONSTRATION,                 battle_config.kdw_AM_DEMONSTRATION))                 { sd->spamcount_AM_DEMONSTRATION = sd->k_tick_c; return 0; }                 sd->spamcount_AM_DEMONSTRATION = 0;                 sd->spamtick_AM_DEMONSTRATION = tick + sd->kdelay;                 break;
+			case AM_ACIDTERROR:                    if (k_tick_check(sd, sd->spamtick_AM_ACIDTERROR,                    sd->spamcount_AM_ACIDTERROR,                    battle_config.kd_AM_ACIDTERROR,                    battle_config.kdw_AM_ACIDTERROR))                    { sd->spamcount_AM_ACIDTERROR = sd->k_tick_c; return 0; }                    sd->spamcount_AM_ACIDTERROR = 0;                    sd->spamtick_AM_ACIDTERROR = tick + sd->kdelay;                    break;
+			case AM_POTIONPITCHER:                 if (k_tick_check(sd, sd->spamtick_AM_POTIONPITCHER,                 sd->spamcount_AM_POTIONPITCHER,                 battle_config.kd_AM_POTIONPITCHER,                 battle_config.kdw_AM_POTIONPITCHER))                 { sd->spamcount_AM_POTIONPITCHER = sd->k_tick_c; return 0; }                 sd->spamcount_AM_POTIONPITCHER = 0;                 sd->spamtick_AM_POTIONPITCHER = tick + sd->kdelay;                 break;
+			case AM_CANNIBALIZE:                   if (k_tick_check(sd, sd->spamtick_AM_CANNIBALIZE,                   sd->spamcount_AM_CANNIBALIZE,                   battle_config.kd_AM_CANNIBALIZE,                   battle_config.kdw_AM_CANNIBALIZE))                   { sd->spamcount_AM_CANNIBALIZE = sd->k_tick_c; return 0; }                   sd->spamcount_AM_CANNIBALIZE = 0;                   sd->spamtick_AM_CANNIBALIZE = tick + sd->kdelay;                   break;
+			case AM_SPHEREMINE:                    if (k_tick_check(sd, sd->spamtick_AM_SPHEREMINE,                    sd->spamcount_AM_SPHEREMINE,                    battle_config.kd_AM_SPHEREMINE,                    battle_config.kdw_AM_SPHEREMINE))                    { sd->spamcount_AM_SPHEREMINE = sd->k_tick_c; return 0; }                    sd->spamcount_AM_SPHEREMINE = 0;                    sd->spamtick_AM_SPHEREMINE = tick + sd->kdelay;                    break;
+			case AM_FLAMECONTROL:                  if (k_tick_check(sd, sd->spamtick_AM_FLAMECONTROL,                  sd->spamcount_AM_FLAMECONTROL,                  battle_config.kd_AM_FLAMECONTROL,                  battle_config.kdw_AM_FLAMECONTROL))                  { sd->spamcount_AM_FLAMECONTROL = sd->k_tick_c; return 0; }                  sd->spamcount_AM_FLAMECONTROL = 0;                  sd->spamtick_AM_FLAMECONTROL = tick + sd->kdelay;                  break;
+			case AM_DRILLMASTER:                   if (k_tick_check(sd, sd->spamtick_AM_DRILLMASTER,                   sd->spamcount_AM_DRILLMASTER,                   battle_config.kd_AM_DRILLMASTER,                   battle_config.kdw_AM_DRILLMASTER))                   { sd->spamcount_AM_DRILLMASTER = sd->k_tick_c; return 0; }                   sd->spamcount_AM_DRILLMASTER = 0;                   sd->spamtick_AM_DRILLMASTER = tick + sd->kdelay;                   break;
+			case CR_SHIELDBOOMERANG:               if (k_tick_check(sd, sd->spamtick_CR_SHIELDBOOMERANG,               sd->spamcount_CR_SHIELDBOOMERANG,               battle_config.kd_CR_SHIELDBOOMERANG,               battle_config.kdw_CR_SHIELDBOOMERANG))               { sd->spamcount_CR_SHIELDBOOMERANG = sd->k_tick_c; return 0; }               sd->spamcount_CR_SHIELDBOOMERANG = 0;               sd->spamtick_CR_SHIELDBOOMERANG = tick + sd->kdelay;               break;
+			case CR_HOLYCROSS:                     if (k_tick_check(sd, sd->spamtick_CR_HOLYCROSS,                     sd->spamcount_CR_HOLYCROSS,                     battle_config.kd_CR_HOLYCROSS,                     battle_config.kdw_CR_HOLYCROSS))                     { sd->spamcount_CR_HOLYCROSS = sd->k_tick_c; return 0; }                     sd->spamcount_CR_HOLYCROSS = 0;                     sd->spamtick_CR_HOLYCROSS = tick + sd->kdelay;                     break;
+			case CR_GRANDCROSS:                    if (k_tick_check(sd, sd->spamtick_CR_GRANDCROSS,                    sd->spamcount_CR_GRANDCROSS,                    battle_config.kd_CR_GRANDCROSS,                    battle_config.kdw_CR_GRANDCROSS))                    { sd->spamcount_CR_GRANDCROSS = sd->k_tick_c; return 0; }                    sd->spamcount_CR_GRANDCROSS = 0;                    sd->spamtick_CR_GRANDCROSS = tick + sd->kdelay;                    break;
+			case MO_CALLSPIRITS:                   if (k_tick_check(sd, sd->spamtick_MO_CALLSPIRITS,                   sd->spamcount_MO_CALLSPIRITS,                   battle_config.kd_MO_CALLSPIRITS,                   battle_config.kdw_MO_CALLSPIRITS))                   { sd->spamcount_MO_CALLSPIRITS = sd->k_tick_c; return 0; }                   sd->spamcount_MO_CALLSPIRITS = 0;                   sd->spamtick_MO_CALLSPIRITS = tick + sd->kdelay;                   break;
+			case MO_ABSORBSPIRITS:                 if (k_tick_check(sd, sd->spamtick_MO_ABSORBSPIRITS,                 sd->spamcount_MO_ABSORBSPIRITS,                 battle_config.kd_MO_ABSORBSPIRITS,                 battle_config.kdw_MO_ABSORBSPIRITS))                 { sd->spamcount_MO_ABSORBSPIRITS = sd->k_tick_c; return 0; }                 sd->spamcount_MO_ABSORBSPIRITS = 0;                 sd->spamtick_MO_ABSORBSPIRITS = tick + sd->kdelay;                 break;
+			case MO_BODYRELOCATION:                if (k_tick_check(sd, sd->spamtick_MO_BODYRELOCATION,                sd->spamcount_MO_BODYRELOCATION,                battle_config.kd_MO_BODYRELOCATION,                battle_config.kdw_MO_BODYRELOCATION))                { sd->spamcount_MO_BODYRELOCATION = sd->k_tick_c; return 0; }                sd->spamcount_MO_BODYRELOCATION = 0;                sd->spamtick_MO_BODYRELOCATION = tick + sd->kdelay;                break;
+			case MO_INVESTIGATE:                   if (k_tick_check(sd, sd->spamtick_MO_INVESTIGATE,                   sd->spamcount_MO_INVESTIGATE,                   battle_config.kd_MO_INVESTIGATE,                   battle_config.kdw_MO_INVESTIGATE))                   { sd->spamcount_MO_INVESTIGATE = sd->k_tick_c; return 0; }                   sd->spamcount_MO_INVESTIGATE = 0;                   sd->spamtick_MO_INVESTIGATE = tick + sd->kdelay;                   break;
+			case MO_FINGEROFFENSIVE:               if (k_tick_check(sd, sd->spamtick_MO_FINGEROFFENSIVE,               sd->spamcount_MO_FINGEROFFENSIVE,               battle_config.kd_MO_FINGEROFFENSIVE,               battle_config.kdw_MO_FINGEROFFENSIVE))               { sd->spamcount_MO_FINGEROFFENSIVE = sd->k_tick_c; return 0; }               sd->spamcount_MO_FINGEROFFENSIVE = 0;               sd->spamtick_MO_FINGEROFFENSIVE = tick + sd->kdelay;               break;
+			case MO_EXPLOSIONSPIRITS:              if (k_tick_check(sd, sd->spamtick_MO_EXPLOSIONSPIRITS,              sd->spamcount_MO_EXPLOSIONSPIRITS,              battle_config.kd_MO_EXPLOSIONSPIRITS,              battle_config.kdw_MO_EXPLOSIONSPIRITS))              { sd->spamcount_MO_EXPLOSIONSPIRITS = sd->k_tick_c; return 0; }              sd->spamcount_MO_EXPLOSIONSPIRITS = 0;              sd->spamtick_MO_EXPLOSIONSPIRITS = tick + sd->kdelay;              break;
+			case MO_EXTREMITYFIST:                 if (k_tick_check(sd, sd->spamtick_MO_EXTREMITYFIST,                 sd->spamcount_MO_EXTREMITYFIST,                 battle_config.kd_MO_EXTREMITYFIST,                 battle_config.kdw_MO_EXTREMITYFIST))                 { sd->spamcount_MO_EXTREMITYFIST = sd->k_tick_c; return 0; }                 sd->spamcount_MO_EXTREMITYFIST = 0;                 sd->spamtick_MO_EXTREMITYFIST = tick + sd->kdelay;                 break;
+			case MO_CHAINCOMBO:                    if (k_tick_check(sd, sd->spamtick_MO_CHAINCOMBO,                    sd->spamcount_MO_CHAINCOMBO,                    battle_config.kd_MO_CHAINCOMBO,                    battle_config.kdw_MO_CHAINCOMBO))                    { sd->spamcount_MO_CHAINCOMBO = sd->k_tick_c; return 0; }                    sd->spamcount_MO_CHAINCOMBO = 0;                    sd->spamtick_MO_CHAINCOMBO = tick + sd->kdelay;                    break;
+			case MO_COMBOFINISH:                   if (k_tick_check(sd, sd->spamtick_MO_COMBOFINISH,                   sd->spamcount_MO_COMBOFINISH,                   battle_config.kd_MO_COMBOFINISH,                   battle_config.kdw_MO_COMBOFINISH))                   { sd->spamcount_MO_COMBOFINISH = sd->k_tick_c; return 0; }                   sd->spamcount_MO_COMBOFINISH = 0;                   sd->spamtick_MO_COMBOFINISH = tick + sd->kdelay;                   break;
+			case SA_CASTCANCEL:                    if (k_tick_check(sd, sd->spamtick_SA_CASTCANCEL,                    sd->spamcount_SA_CASTCANCEL,                    battle_config.kd_SA_CASTCANCEL,                    battle_config.kdw_SA_CASTCANCEL))                    { sd->spamcount_SA_CASTCANCEL = sd->k_tick_c; return 0; }                    sd->spamcount_SA_CASTCANCEL = 0;                    sd->spamtick_SA_CASTCANCEL = tick + sd->kdelay;                    break;
+			case SA_SPELLBREAKER:                  if (k_tick_check(sd, sd->spamtick_SA_SPELLBREAKER,                  sd->spamcount_SA_SPELLBREAKER,                  battle_config.kd_SA_SPELLBREAKER,                  battle_config.kdw_SA_SPELLBREAKER))                  { sd->spamcount_SA_SPELLBREAKER = sd->k_tick_c; return 0; }                  sd->spamcount_SA_SPELLBREAKER = 0;                  sd->spamtick_SA_SPELLBREAKER = tick + sd->kdelay;                  break;
+			case SA_DISPELL:                       if (k_tick_check(sd, sd->spamtick_SA_DISPELL,                       sd->spamcount_SA_DISPELL,                       battle_config.kd_SA_DISPELL,                       battle_config.kdw_SA_DISPELL))                       { sd->spamcount_SA_DISPELL = sd->k_tick_c; return 0; }                       sd->spamcount_SA_DISPELL = 0;                       sd->spamtick_SA_DISPELL = tick + sd->kdelay;                       break;
+			case SA_ABRACADABRA:                   if (k_tick_check(sd, sd->spamtick_SA_ABRACADABRA,                   sd->spamcount_SA_ABRACADABRA,                   battle_config.kd_SA_ABRACADABRA,                   battle_config.kdw_SA_ABRACADABRA))                   { sd->spamcount_SA_ABRACADABRA = sd->k_tick_c; return 0; }                   sd->spamcount_SA_ABRACADABRA = 0;                   sd->spamtick_SA_ABRACADABRA = tick + sd->kdelay;                   break;
+			case SA_MONOCELL:                      if (k_tick_check(sd, sd->spamtick_SA_MONOCELL,                      sd->spamcount_SA_MONOCELL,                      battle_config.kd_SA_MONOCELL,                      battle_config.kdw_SA_MONOCELL))                      { sd->spamcount_SA_MONOCELL = sd->k_tick_c; return 0; }                      sd->spamcount_SA_MONOCELL = 0;                      sd->spamtick_SA_MONOCELL = tick + sd->kdelay;                      break;
+			case SA_CLASSCHANGE:                   if (k_tick_check(sd, sd->spamtick_SA_CLASSCHANGE,                   sd->spamcount_SA_CLASSCHANGE,                   battle_config.kd_SA_CLASSCHANGE,                   battle_config.kdw_SA_CLASSCHANGE))                   { sd->spamcount_SA_CLASSCHANGE = sd->k_tick_c; return 0; }                   sd->spamcount_SA_CLASSCHANGE = 0;                   sd->spamtick_SA_CLASSCHANGE = tick + sd->kdelay;                   break;
+			case SA_SUMMONMONSTER:                 if (k_tick_check(sd, sd->spamtick_SA_SUMMONMONSTER,                 sd->spamcount_SA_SUMMONMONSTER,                 battle_config.kd_SA_SUMMONMONSTER,                 battle_config.kdw_SA_SUMMONMONSTER))                 { sd->spamcount_SA_SUMMONMONSTER = sd->k_tick_c; return 0; }                 sd->spamcount_SA_SUMMONMONSTER = 0;                 sd->spamtick_SA_SUMMONMONSTER = tick + sd->kdelay;                 break;
+			case SA_REVERSEORCISH:                 if (k_tick_check(sd, sd->spamtick_SA_REVERSEORCISH,                 sd->spamcount_SA_REVERSEORCISH,                 battle_config.kd_SA_REVERSEORCISH,                 battle_config.kdw_SA_REVERSEORCISH))                 { sd->spamcount_SA_REVERSEORCISH = sd->k_tick_c; return 0; }                 sd->spamcount_SA_REVERSEORCISH = 0;                 sd->spamtick_SA_REVERSEORCISH = tick + sd->kdelay;                 break;
+			case SA_DEATH:                         if (k_tick_check(sd, sd->spamtick_SA_DEATH,                         sd->spamcount_SA_DEATH,                         battle_config.kd_SA_DEATH,                         battle_config.kdw_SA_DEATH))                         { sd->spamcount_SA_DEATH = sd->k_tick_c; return 0; }                         sd->spamcount_SA_DEATH = 0;                         sd->spamtick_SA_DEATH = tick + sd->kdelay;                         break;
+			case SA_FORTUNE:                       if (k_tick_check(sd, sd->spamtick_SA_FORTUNE,                       sd->spamcount_SA_FORTUNE,                       battle_config.kd_SA_FORTUNE,                       battle_config.kdw_SA_FORTUNE))                       { sd->spamcount_SA_FORTUNE = sd->k_tick_c; return 0; }                       sd->spamcount_SA_FORTUNE = 0;                       sd->spamtick_SA_FORTUNE = tick + sd->kdelay;                       break;
+			case SA_TAMINGMONSTER:                 if (k_tick_check(sd, sd->spamtick_SA_TAMINGMONSTER,                 sd->spamcount_SA_TAMINGMONSTER,                 battle_config.kd_SA_TAMINGMONSTER,                 battle_config.kdw_SA_TAMINGMONSTER))                 { sd->spamcount_SA_TAMINGMONSTER = sd->k_tick_c; return 0; }                 sd->spamcount_SA_TAMINGMONSTER = 0;                 sd->spamtick_SA_TAMINGMONSTER = tick + sd->kdelay;                 break;
+			case SA_QUESTION:                      if (k_tick_check(sd, sd->spamtick_SA_QUESTION,                      sd->spamcount_SA_QUESTION,                      battle_config.kd_SA_QUESTION,                      battle_config.kdw_SA_QUESTION))                      { sd->spamcount_SA_QUESTION = sd->k_tick_c; return 0; }                      sd->spamcount_SA_QUESTION = 0;                      sd->spamtick_SA_QUESTION = tick + sd->kdelay;                      break;
+			case SA_GRAVITY:                       if (k_tick_check(sd, sd->spamtick_SA_GRAVITY,                       sd->spamcount_SA_GRAVITY,                       battle_config.kd_SA_GRAVITY,                       battle_config.kdw_SA_GRAVITY))                       { sd->spamcount_SA_GRAVITY = sd->k_tick_c; return 0; }                       sd->spamcount_SA_GRAVITY = 0;                       sd->spamtick_SA_GRAVITY = tick + sd->kdelay;                       break;
+			case SA_LEVELUP:                       if (k_tick_check(sd, sd->spamtick_SA_LEVELUP,                       sd->spamcount_SA_LEVELUP,                       battle_config.kd_SA_LEVELUP,                       battle_config.kdw_SA_LEVELUP))                       { sd->spamcount_SA_LEVELUP = sd->k_tick_c; return 0; }                       sd->spamcount_SA_LEVELUP = 0;                       sd->spamtick_SA_LEVELUP = tick + sd->kdelay;                       break;
+			case SA_INSTANTDEATH:                  if (k_tick_check(sd, sd->spamtick_SA_INSTANTDEATH,                  sd->spamcount_SA_INSTANTDEATH,                  battle_config.kd_SA_INSTANTDEATH,                  battle_config.kdw_SA_INSTANTDEATH))                  { sd->spamcount_SA_INSTANTDEATH = sd->k_tick_c; return 0; }                  sd->spamcount_SA_INSTANTDEATH = 0;                  sd->spamtick_SA_INSTANTDEATH = tick + sd->kdelay;                  break;
+			case SA_FULLRECOVERY:                  if (k_tick_check(sd, sd->spamtick_SA_FULLRECOVERY,                  sd->spamcount_SA_FULLRECOVERY,                  battle_config.kd_SA_FULLRECOVERY,                  battle_config.kdw_SA_FULLRECOVERY))                  { sd->spamcount_SA_FULLRECOVERY = sd->k_tick_c; return 0; }                  sd->spamcount_SA_FULLRECOVERY = 0;                  sd->spamtick_SA_FULLRECOVERY = tick + sd->kdelay;                  break;
+			case SA_COMA:                          if (k_tick_check(sd, sd->spamtick_SA_COMA,                          sd->spamcount_SA_COMA,                          battle_config.kd_SA_COMA,                          battle_config.kdw_SA_COMA))                          { sd->spamcount_SA_COMA = sd->k_tick_c; return 0; }                          sd->spamcount_SA_COMA = 0;                          sd->spamtick_SA_COMA = tick + sd->kdelay;                          break;
+			case BD_ADAPTATION:                    if (k_tick_check(sd, sd->spamtick_BD_ADAPTATION,                    sd->spamcount_BD_ADAPTATION,                    battle_config.kd_BD_ADAPTATION,                    battle_config.kdw_BD_ADAPTATION))                    { sd->spamcount_BD_ADAPTATION = sd->k_tick_c; return 0; }                    sd->spamcount_BD_ADAPTATION = 0;                    sd->spamtick_BD_ADAPTATION = tick + sd->kdelay;                    break;
+			case BD_ENCORE:                        if (k_tick_check(sd, sd->spamtick_BD_ENCORE,                        sd->spamcount_BD_ENCORE,                        battle_config.kd_BD_ENCORE,                        battle_config.kdw_BD_ENCORE))                        { sd->spamcount_BD_ENCORE = sd->k_tick_c; return 0; }                        sd->spamcount_BD_ENCORE = 0;                        sd->spamtick_BD_ENCORE = tick + sd->kdelay;                        break;
+			case BD_LULLABY:                       if (k_tick_check(sd, sd->spamtick_BD_LULLABY,                       sd->spamcount_BD_LULLABY,                       battle_config.kd_BD_LULLABY,                       battle_config.kdw_BD_LULLABY))                       { sd->spamcount_BD_LULLABY = sd->k_tick_c; return 0; }                       sd->spamcount_BD_LULLABY = 0;                       sd->spamtick_BD_LULLABY = tick + sd->kdelay;                       break;
+			case BD_RICHMANKIM:                    if (k_tick_check(sd, sd->spamtick_BD_RICHMANKIM,                    sd->spamcount_BD_RICHMANKIM,                    battle_config.kd_BD_RICHMANKIM,                    battle_config.kdw_BD_RICHMANKIM))                    { sd->spamcount_BD_RICHMANKIM = sd->k_tick_c; return 0; }                    sd->spamcount_BD_RICHMANKIM = 0;                    sd->spamtick_BD_RICHMANKIM = tick + sd->kdelay;                    break;
+			case BA_MUSICALSTRIKE:                 if (k_tick_check(sd, sd->spamtick_BA_MUSICALSTRIKE,                 sd->spamcount_BA_MUSICALSTRIKE,                 battle_config.kd_BA_MUSICALSTRIKE,                 battle_config.kdw_BA_MUSICALSTRIKE))                 { sd->spamcount_BA_MUSICALSTRIKE = sd->k_tick_c; return 0; }                 sd->spamcount_BA_MUSICALSTRIKE = 0;                 sd->spamtick_BA_MUSICALSTRIKE = tick + sd->kdelay;                 break;
+			case BA_DISSONANCE:                    if (k_tick_check(sd, sd->spamtick_BA_DISSONANCE,                    sd->spamcount_BA_DISSONANCE,                    battle_config.kd_BA_DISSONANCE,                    battle_config.kdw_BA_DISSONANCE))                    { sd->spamcount_BA_DISSONANCE = sd->k_tick_c; return 0; }                    sd->spamcount_BA_DISSONANCE = 0;                    sd->spamtick_BA_DISSONANCE = tick + sd->kdelay;                    break;
+			case BA_FROSTJOKER:                    if (k_tick_check(sd, sd->spamtick_BA_FROSTJOKER,                    sd->spamcount_BA_FROSTJOKER,                    battle_config.kd_BA_FROSTJOKER,                    battle_config.kdw_BA_FROSTJOKER))                    { sd->spamcount_BA_FROSTJOKER = sd->k_tick_c; return 0; }                    sd->spamcount_BA_FROSTJOKER = 0;                    sd->spamtick_BA_FROSTJOKER = tick + sd->kdelay;                    break;
+			case BA_WHISTLE:                       if (k_tick_check(sd, sd->spamtick_BA_WHISTLE,                       sd->spamcount_BA_WHISTLE,                       battle_config.kd_BA_WHISTLE,                       battle_config.kdw_BA_WHISTLE))                       { sd->spamcount_BA_WHISTLE = sd->k_tick_c; return 0; }                       sd->spamcount_BA_WHISTLE = 0;                       sd->spamtick_BA_WHISTLE = tick + sd->kdelay;                       break;
+			case BA_ASSASSINCROSS:                 if (k_tick_check(sd, sd->spamtick_BA_ASSASSINCROSS,                 sd->spamcount_BA_ASSASSINCROSS,                 battle_config.kd_BA_ASSASSINCROSS,                 battle_config.kdw_BA_ASSASSINCROSS))                 { sd->spamcount_BA_ASSASSINCROSS = sd->k_tick_c; return 0; }                 sd->spamcount_BA_ASSASSINCROSS = 0;                 sd->spamtick_BA_ASSASSINCROSS = tick + sd->kdelay;                 break;
+			case BA_POEMBRAGI:                     if (k_tick_check(sd, sd->spamtick_BA_POEMBRAGI,                     sd->spamcount_BA_POEMBRAGI,                     battle_config.kd_BA_POEMBRAGI,                     battle_config.kdw_BA_POEMBRAGI))                     { sd->spamcount_BA_POEMBRAGI = sd->k_tick_c; return 0; }                     sd->spamcount_BA_POEMBRAGI = 0;                     sd->spamtick_BA_POEMBRAGI = tick + sd->kdelay;                     break;
+			case BA_APPLEIDUN:                     if (k_tick_check(sd, sd->spamtick_BA_APPLEIDUN,                     sd->spamcount_BA_APPLEIDUN,                     battle_config.kd_BA_APPLEIDUN,                     battle_config.kdw_BA_APPLEIDUN))                     { sd->spamcount_BA_APPLEIDUN = sd->k_tick_c; return 0; }                     sd->spamcount_BA_APPLEIDUN = 0;                     sd->spamtick_BA_APPLEIDUN = tick + sd->kdelay;                     break;
+			case DC_THROWARROW:                    if (k_tick_check(sd, sd->spamtick_DC_THROWARROW,                    sd->spamcount_DC_THROWARROW,                    battle_config.kd_DC_THROWARROW,                    battle_config.kdw_DC_THROWARROW))                    { sd->spamcount_DC_THROWARROW = sd->k_tick_c; return 0; }                    sd->spamcount_DC_THROWARROW = 0;                    sd->spamtick_DC_THROWARROW = tick + sd->kdelay;                    break;
+			case DC_UGLYDANCE:                     if (k_tick_check(sd, sd->spamtick_DC_UGLYDANCE,                     sd->spamcount_DC_UGLYDANCE,                     battle_config.kd_DC_UGLYDANCE,                     battle_config.kdw_DC_UGLYDANCE))                     { sd->spamcount_DC_UGLYDANCE = sd->k_tick_c; return 0; }                     sd->spamcount_DC_UGLYDANCE = 0;                     sd->spamtick_DC_UGLYDANCE = tick + sd->kdelay;                     break;
+			case DC_SCREAM:                        if (k_tick_check(sd, sd->spamtick_DC_SCREAM,                        sd->spamcount_DC_SCREAM,                        battle_config.kd_DC_SCREAM,                        battle_config.kdw_DC_SCREAM))                        { sd->spamcount_DC_SCREAM = sd->k_tick_c; return 0; }                        sd->spamcount_DC_SCREAM = 0;                        sd->spamtick_DC_SCREAM = tick + sd->kdelay;                        break;
+			case DC_HUMMING:                       if (k_tick_check(sd, sd->spamtick_DC_HUMMING,                       sd->spamcount_DC_HUMMING,                       battle_config.kd_DC_HUMMING,                       battle_config.kdw_DC_HUMMING))                       { sd->spamcount_DC_HUMMING = sd->k_tick_c; return 0; }                       sd->spamcount_DC_HUMMING = 0;                       sd->spamtick_DC_HUMMING = tick + sd->kdelay;                       break;
+			case DC_DONTFORGETME:                  if (k_tick_check(sd, sd->spamtick_DC_DONTFORGETME,                  sd->spamcount_DC_DONTFORGETME,                  battle_config.kd_DC_DONTFORGETME,                  battle_config.kdw_DC_DONTFORGETME))                  { sd->spamcount_DC_DONTFORGETME = sd->k_tick_c; return 0; }                  sd->spamcount_DC_DONTFORGETME = 0;                  sd->spamtick_DC_DONTFORGETME = tick + sd->kdelay;                  break;
+			case DC_FORTUNEKISS:                   if (k_tick_check(sd, sd->spamtick_DC_FORTUNEKISS,                   sd->spamcount_DC_FORTUNEKISS,                   battle_config.kd_DC_FORTUNEKISS,                   battle_config.kdw_DC_FORTUNEKISS))                   { sd->spamcount_DC_FORTUNEKISS = sd->k_tick_c; return 0; }                   sd->spamcount_DC_FORTUNEKISS = 0;                   sd->spamtick_DC_FORTUNEKISS = tick + sd->kdelay;                   break;
+			case DC_SERVICEFORYOU:                 if (k_tick_check(sd, sd->spamtick_DC_SERVICEFORYOU,                 sd->spamcount_DC_SERVICEFORYOU,                 battle_config.kd_DC_SERVICEFORYOU,                 battle_config.kdw_DC_SERVICEFORYOU))                 { sd->spamcount_DC_SERVICEFORYOU = sd->k_tick_c; return 0; }                 sd->spamcount_DC_SERVICEFORYOU = 0;                 sd->spamtick_DC_SERVICEFORYOU = tick + sd->kdelay;                 break;
+			case LK_FURY:                          if (k_tick_check(sd, sd->spamtick_LK_FURY,                          sd->spamcount_LK_FURY,                          battle_config.kd_LK_FURY,                          battle_config.kdw_LK_FURY))                          { sd->spamcount_LK_FURY = sd->k_tick_c; return 0; }                          sd->spamcount_LK_FURY = 0;                          sd->spamtick_LK_FURY = tick + sd->kdelay;                          break;
+			case HW_MAGICCRASHER:                  if (k_tick_check(sd, sd->spamtick_HW_MAGICCRASHER,                  sd->spamcount_HW_MAGICCRASHER,                  battle_config.kd_HW_MAGICCRASHER,                  battle_config.kdw_HW_MAGICCRASHER))                  { sd->spamcount_HW_MAGICCRASHER = sd->k_tick_c; return 0; }                  sd->spamcount_HW_MAGICCRASHER = 0;                  sd->spamtick_HW_MAGICCRASHER = tick + sd->kdelay;                  break;
+			case PA_PRESSURE:                      if (k_tick_check(sd, sd->spamtick_PA_PRESSURE,                      sd->spamcount_PA_PRESSURE,                      battle_config.kd_PA_PRESSURE,                      battle_config.kdw_PA_PRESSURE))                      { sd->spamcount_PA_PRESSURE = sd->k_tick_c; return 0; }                      sd->spamcount_PA_PRESSURE = 0;                      sd->spamtick_PA_PRESSURE = tick + sd->kdelay;                      break;
+			case CH_PALMSTRIKE:                    if (k_tick_check(sd, sd->spamtick_CH_PALMSTRIKE,                    sd->spamcount_CH_PALMSTRIKE,                    battle_config.kd_CH_PALMSTRIKE,                    battle_config.kdw_CH_PALMSTRIKE))                    { sd->spamcount_CH_PALMSTRIKE = sd->k_tick_c; return 0; }                    sd->spamcount_CH_PALMSTRIKE = 0;                    sd->spamtick_CH_PALMSTRIKE = tick + sd->kdelay;                    break;
+			case CH_TIGERFIST:                     if (k_tick_check(sd, sd->spamtick_CH_TIGERFIST,                     sd->spamcount_CH_TIGERFIST,                     battle_config.kd_CH_TIGERFIST,                     battle_config.kdw_CH_TIGERFIST))                     { sd->spamcount_CH_TIGERFIST = sd->k_tick_c; return 0; }                     sd->spamcount_CH_TIGERFIST = 0;                     sd->spamtick_CH_TIGERFIST = tick + sd->kdelay;                     break;
+			case CH_CHAINCRUSH:                    if (k_tick_check(sd, sd->spamtick_CH_CHAINCRUSH,                    sd->spamcount_CH_CHAINCRUSH,                    battle_config.kd_CH_CHAINCRUSH,                    battle_config.kdw_CH_CHAINCRUSH))                    { sd->spamcount_CH_CHAINCRUSH = sd->k_tick_c; return 0; }                    sd->spamcount_CH_CHAINCRUSH = 0;                    sd->spamtick_CH_CHAINCRUSH = tick + sd->kdelay;                    break;
+			case PF_SOULCHANGE:                    if (k_tick_check(sd, sd->spamtick_PF_SOULCHANGE,                    sd->spamcount_PF_SOULCHANGE,                    battle_config.kd_PF_SOULCHANGE,                    battle_config.kdw_PF_SOULCHANGE))                    { sd->spamcount_PF_SOULCHANGE = sd->k_tick_c; return 0; }                    sd->spamcount_PF_SOULCHANGE = 0;                    sd->spamtick_PF_SOULCHANGE = tick + sd->kdelay;                    break;
+			case PF_SOULBURN:                      if (k_tick_check(sd, sd->spamtick_PF_SOULBURN,                      sd->spamcount_PF_SOULBURN,                      battle_config.kd_PF_SOULBURN,                      battle_config.kdw_PF_SOULBURN))                      { sd->spamcount_PF_SOULBURN = sd->k_tick_c; return 0; }                      sd->spamcount_PF_SOULBURN = 0;                      sd->spamtick_PF_SOULBURN = tick + sd->kdelay;                      break;
+			case ASC_BREAKER:                      if (k_tick_check(sd, sd->spamtick_ASC_BREAKER,                      sd->spamcount_ASC_BREAKER,                      battle_config.kd_ASC_BREAKER,                      battle_config.kdw_ASC_BREAKER))                      { sd->spamcount_ASC_BREAKER = sd->k_tick_c; return 0; }                      sd->spamcount_ASC_BREAKER = 0;                      sd->spamtick_ASC_BREAKER = tick + sd->kdelay;                      break;
+			case SN_FALCONASSAULT:                 if (k_tick_check(sd, sd->spamtick_SN_FALCONASSAULT,                 sd->spamcount_SN_FALCONASSAULT,                 battle_config.kd_SN_FALCONASSAULT,                 battle_config.kdw_SN_FALCONASSAULT))                 { sd->spamcount_SN_FALCONASSAULT = sd->k_tick_c; return 0; }                 sd->spamcount_SN_FALCONASSAULT = 0;                 sd->spamtick_SN_FALCONASSAULT = tick + sd->kdelay;                 break;
+			case SN_SHARPSHOOTING:                 if (k_tick_check(sd, sd->spamtick_SN_SHARPSHOOTING,                 sd->spamcount_SN_SHARPSHOOTING,                 battle_config.kd_SN_SHARPSHOOTING,                 battle_config.kdw_SN_SHARPSHOOTING))                 { sd->spamcount_SN_SHARPSHOOTING = sd->k_tick_c; return 0; }                 sd->spamcount_SN_SHARPSHOOTING = 0;                 sd->spamtick_SN_SHARPSHOOTING = tick + sd->kdelay;                 break;
+			case CR_ALCHEMY:                       if (k_tick_check(sd, sd->spamtick_CR_ALCHEMY,                       sd->spamcount_CR_ALCHEMY,                       battle_config.kd_CR_ALCHEMY,                       battle_config.kdw_CR_ALCHEMY))                       { sd->spamcount_CR_ALCHEMY = sd->k_tick_c; return 0; }                       sd->spamcount_CR_ALCHEMY = 0;                       sd->spamtick_CR_ALCHEMY = tick + sd->kdelay;                       break;
+			case CR_SYNTHESISPOTION:               if (k_tick_check(sd, sd->spamtick_CR_SYNTHESISPOTION,               sd->spamcount_CR_SYNTHESISPOTION,               battle_config.kd_CR_SYNTHESISPOTION,               battle_config.kdw_CR_SYNTHESISPOTION))               { sd->spamcount_CR_SYNTHESISPOTION = sd->k_tick_c; return 0; }               sd->spamcount_CR_SYNTHESISPOTION = 0;               sd->spamtick_CR_SYNTHESISPOTION = tick + sd->kdelay;               break;
+			case CG_ARROWVULCAN:                   if (k_tick_check(sd, sd->spamtick_CG_ARROWVULCAN,                   sd->spamcount_CG_ARROWVULCAN,                   battle_config.kd_CG_ARROWVULCAN,                   battle_config.kdw_CG_ARROWVULCAN))                   { sd->spamcount_CG_ARROWVULCAN = sd->k_tick_c; return 0; }                   sd->spamcount_CG_ARROWVULCAN = 0;                   sd->spamtick_CG_ARROWVULCAN = tick + sd->kdelay;                   break;
+			case CG_MOONLIT:                       if (k_tick_check(sd, sd->spamtick_CG_MOONLIT,                       sd->spamcount_CG_MOONLIT,                       battle_config.kd_CG_MOONLIT,                       battle_config.kdw_CG_MOONLIT))                       { sd->spamcount_CG_MOONLIT = sd->k_tick_c; return 0; }                       sd->spamcount_CG_MOONLIT = 0;                       sd->spamtick_CG_MOONLIT = tick + sd->kdelay;                       break;
+			case CG_MARIONETTE:                    if (k_tick_check(sd, sd->spamtick_CG_MARIONETTE,                    sd->spamcount_CG_MARIONETTE,                    battle_config.kd_CG_MARIONETTE,                    battle_config.kdw_CG_MARIONETTE))                    { sd->spamcount_CG_MARIONETTE = sd->k_tick_c; return 0; }                    sd->spamcount_CG_MARIONETTE = 0;                    sd->spamtick_CG_MARIONETTE = tick + sd->kdelay;                    break;
+			case LK_SPIRALPIERCE:                  if (k_tick_check(sd, sd->spamtick_LK_SPIRALPIERCE,                  sd->spamcount_LK_SPIRALPIERCE,                  battle_config.kd_LK_SPIRALPIERCE,                  battle_config.kdw_LK_SPIRALPIERCE))                  { sd->spamcount_LK_SPIRALPIERCE = sd->k_tick_c; return 0; }                  sd->spamcount_LK_SPIRALPIERCE = 0;                  sd->spamtick_LK_SPIRALPIERCE = tick + sd->kdelay;                  break;
+			case LK_HEADCRUSH:                     if (k_tick_check(sd, sd->spamtick_LK_HEADCRUSH,                     sd->spamcount_LK_HEADCRUSH,                     battle_config.kd_LK_HEADCRUSH,                     battle_config.kdw_LK_HEADCRUSH))                     { sd->spamcount_LK_HEADCRUSH = sd->k_tick_c; return 0; }                     sd->spamcount_LK_HEADCRUSH = 0;                     sd->spamtick_LK_HEADCRUSH = tick + sd->kdelay;                     break;
+			case LK_JOINTBEAT:                     if (k_tick_check(sd, sd->spamtick_LK_JOINTBEAT,                     sd->spamcount_LK_JOINTBEAT,                     battle_config.kd_LK_JOINTBEAT,                     battle_config.kdw_LK_JOINTBEAT))                     { sd->spamcount_LK_JOINTBEAT = sd->k_tick_c; return 0; }                     sd->spamcount_LK_JOINTBEAT = 0;                     sd->spamtick_LK_JOINTBEAT = tick + sd->kdelay;                     break;
+			case HW_NAPALMVULCAN:                  if (k_tick_check(sd, sd->spamtick_HW_NAPALMVULCAN,                  sd->spamcount_HW_NAPALMVULCAN,                  battle_config.kd_HW_NAPALMVULCAN,                  battle_config.kdw_HW_NAPALMVULCAN))                  { sd->spamcount_HW_NAPALMVULCAN = sd->k_tick_c; return 0; }                  sd->spamcount_HW_NAPALMVULCAN = 0;                  sd->spamtick_HW_NAPALMVULCAN = tick + sd->kdelay;                  break;
+			case CH_SOULCOLLECT:                   if (k_tick_check(sd, sd->spamtick_CH_SOULCOLLECT,                   sd->spamcount_CH_SOULCOLLECT,                   battle_config.kd_CH_SOULCOLLECT,                   battle_config.kdw_CH_SOULCOLLECT))                   { sd->spamcount_CH_SOULCOLLECT = sd->k_tick_c; return 0; }                   sd->spamcount_CH_SOULCOLLECT = 0;                   sd->spamtick_CH_SOULCOLLECT = tick + sd->kdelay;                   break;
+			case PF_MINDBREAKER:                   if (k_tick_check(sd, sd->spamtick_PF_MINDBREAKER,                   sd->spamcount_PF_MINDBREAKER,                   battle_config.kd_PF_MINDBREAKER,                   battle_config.kdw_PF_MINDBREAKER))                   { sd->spamcount_PF_MINDBREAKER = sd->k_tick_c; return 0; }                   sd->spamcount_PF_MINDBREAKER = 0;                   sd->spamtick_PF_MINDBREAKER = tick + sd->kdelay;                   break;
+			case PF_SPIDERWEB:                     if (k_tick_check(sd, sd->spamtick_PF_SPIDERWEB,                     sd->spamcount_PF_SPIDERWEB,                     battle_config.kd_PF_SPIDERWEB,                     battle_config.kdw_PF_SPIDERWEB))                     { sd->spamcount_PF_SPIDERWEB = sd->k_tick_c; return 0; }                     sd->spamcount_PF_SPIDERWEB = 0;                     sd->spamtick_PF_SPIDERWEB = tick + sd->kdelay;                     break;
+			case ASC_METEORASSAULT:                if (k_tick_check(sd, sd->spamtick_ASC_METEORASSAULT,                sd->spamcount_ASC_METEORASSAULT,                battle_config.kd_ASC_METEORASSAULT,                battle_config.kdw_ASC_METEORASSAULT))                { sd->spamcount_ASC_METEORASSAULT = sd->k_tick_c; return 0; }                sd->spamcount_ASC_METEORASSAULT = 0;                sd->spamtick_ASC_METEORASSAULT = tick + sd->kdelay;                break;
+			case TK_STORMKICK:                     if (k_tick_check(sd, sd->spamtick_TK_STORMKICK,                     sd->spamcount_TK_STORMKICK,                     battle_config.kd_TK_STORMKICK,                     battle_config.kdw_TK_STORMKICK))                     { sd->spamcount_TK_STORMKICK = sd->k_tick_c; return 0; }                     sd->spamcount_TK_STORMKICK = 0;                     sd->spamtick_TK_STORMKICK = tick + sd->kdelay;                     break;
+			case TK_DOWNKICK:                      if (k_tick_check(sd, sd->spamtick_TK_DOWNKICK,                      sd->spamcount_TK_DOWNKICK,                      battle_config.kd_TK_DOWNKICK,                      battle_config.kdw_TK_DOWNKICK))                      { sd->spamcount_TK_DOWNKICK = sd->k_tick_c; return 0; }                      sd->spamcount_TK_DOWNKICK = 0;                      sd->spamtick_TK_DOWNKICK = tick + sd->kdelay;                      break;
+			case TK_TURNKICK:                      if (k_tick_check(sd, sd->spamtick_TK_TURNKICK,                      sd->spamcount_TK_TURNKICK,                      battle_config.kd_TK_TURNKICK,                      battle_config.kdw_TK_TURNKICK))                      { sd->spamcount_TK_TURNKICK = sd->k_tick_c; return 0; }                      sd->spamcount_TK_TURNKICK = 0;                      sd->spamtick_TK_TURNKICK = tick + sd->kdelay;                      break;
+			case TK_JUMPKICK:                      if (k_tick_check(sd, sd->spamtick_TK_JUMPKICK,                      sd->spamcount_TK_JUMPKICK,                      battle_config.kd_TK_JUMPKICK,                      battle_config.kdw_TK_JUMPKICK))                      { sd->spamcount_TK_JUMPKICK = sd->k_tick_c; return 0; }                      sd->spamcount_TK_JUMPKICK = 0;                      sd->spamtick_TK_JUMPKICK = tick + sd->kdelay;                      break;
+			case TK_POWER:                         if (k_tick_check(sd, sd->spamtick_TK_POWER,                         sd->spamcount_TK_POWER,                         battle_config.kd_TK_POWER,                         battle_config.kdw_TK_POWER))                         { sd->spamcount_TK_POWER = sd->k_tick_c; return 0; }                         sd->spamcount_TK_POWER = 0;                         sd->spamtick_TK_POWER = tick + sd->kdelay;                         break;
+			case TK_HIGHJUMP:                      if (k_tick_check(sd, sd->spamtick_TK_HIGHJUMP,                      sd->spamcount_TK_HIGHJUMP,                      battle_config.kd_TK_HIGHJUMP,                      battle_config.kdw_TK_HIGHJUMP))                      { sd->spamcount_TK_HIGHJUMP = sd->k_tick_c; return 0; }                      sd->spamcount_TK_HIGHJUMP = 0;                      sd->spamtick_TK_HIGHJUMP = tick + sd->kdelay;                      break;
+			case SL_KAIZEL:                        if (k_tick_check(sd, sd->spamtick_SL_KAIZEL,                        sd->spamcount_SL_KAIZEL,                        battle_config.kd_SL_KAIZEL,                        battle_config.kdw_SL_KAIZEL))                        { sd->spamcount_SL_KAIZEL = sd->k_tick_c; return 0; }                        sd->spamcount_SL_KAIZEL = 0;                        sd->spamtick_SL_KAIZEL = tick + sd->kdelay;                        break;
+			case SL_KAAHI:                         if (k_tick_check(sd, sd->spamtick_SL_KAAHI,                         sd->spamcount_SL_KAAHI,                         battle_config.kd_SL_KAAHI,                         battle_config.kdw_SL_KAAHI))                         { sd->spamcount_SL_KAAHI = sd->k_tick_c; return 0; }                         sd->spamcount_SL_KAAHI = 0;                         sd->spamtick_SL_KAAHI = tick + sd->kdelay;                         break;
+			case SL_KAUPE:                         if (k_tick_check(sd, sd->spamtick_SL_KAUPE,                         sd->spamcount_SL_KAUPE,                         battle_config.kd_SL_KAUPE,                         battle_config.kdw_SL_KAUPE))                         { sd->spamcount_SL_KAUPE = sd->k_tick_c; return 0; }                         sd->spamcount_SL_KAUPE = 0;                         sd->spamtick_SL_KAUPE = tick + sd->kdelay;                         break;
+			case SL_KAITE:                         if (k_tick_check(sd, sd->spamtick_SL_KAITE,                         sd->spamcount_SL_KAITE,                         battle_config.kd_SL_KAITE,                         battle_config.kdw_SL_KAITE))                         { sd->spamcount_SL_KAITE = sd->k_tick_c; return 0; }                         sd->spamcount_SL_KAITE = 0;                         sd->spamtick_SL_KAITE = tick + sd->kdelay;                         break;
+			case SL_KAINA:                         if (k_tick_check(sd, sd->spamtick_SL_KAINA,                         sd->spamcount_SL_KAINA,                         battle_config.kd_SL_KAINA,                         battle_config.kdw_SL_KAINA))                         { sd->spamcount_SL_KAINA = sd->k_tick_c; return 0; }                         sd->spamcount_SL_KAINA = 0;                         sd->spamtick_SL_KAINA = tick + sd->kdelay;                         break;
+			case SL_STIN:                          if (k_tick_check(sd, sd->spamtick_SL_STIN,                          sd->spamcount_SL_STIN,                          battle_config.kd_SL_STIN,                          battle_config.kdw_SL_STIN))                          { sd->spamcount_SL_STIN = sd->k_tick_c; return 0; }                          sd->spamcount_SL_STIN = 0;                          sd->spamtick_SL_STIN = tick + sd->kdelay;                          break;
+			case SL_STUN:                          if (k_tick_check(sd, sd->spamtick_SL_STUN,                          sd->spamcount_SL_STUN,                          battle_config.kd_SL_STUN,                          battle_config.kdw_SL_STUN))                          { sd->spamcount_SL_STUN = sd->k_tick_c; return 0; }                          sd->spamcount_SL_STUN = 0;                          sd->spamtick_SL_STUN = tick + sd->kdelay;                          break;
+			case SL_SMA:                           if (k_tick_check(sd, sd->spamtick_SL_SMA,                           sd->spamcount_SL_SMA,                           battle_config.kd_SL_SMA,                           battle_config.kdw_SL_SMA))                           { sd->spamcount_SL_SMA = sd->k_tick_c; return 0; }                           sd->spamcount_SL_SMA = 0;                           sd->spamtick_SL_SMA = tick + sd->kdelay;                           break;
+			case SL_SWOO:                          if (k_tick_check(sd, sd->spamtick_SL_SWOO,                          sd->spamcount_SL_SWOO,                          battle_config.kd_SL_SWOO,                          battle_config.kdw_SL_SWOO))                          { sd->spamcount_SL_SWOO = sd->k_tick_c; return 0; }                          sd->spamcount_SL_SWOO = 0;                          sd->spamtick_SL_SWOO = tick + sd->kdelay;                          break;
+			case SL_SKE:                           if (k_tick_check(sd, sd->spamtick_SL_SKE,                           sd->spamcount_SL_SKE,                           battle_config.kd_SL_SKE,                           battle_config.kdw_SL_SKE))                           { sd->spamcount_SL_SKE = sd->k_tick_c; return 0; }                           sd->spamcount_SL_SKE = 0;                           sd->spamtick_SL_SKE = tick + sd->kdelay;                           break;
+			case SL_SKA:                           if (k_tick_check(sd, sd->spamtick_SL_SKA,                           sd->spamcount_SL_SKA,                           battle_config.kd_SL_SKA,                           battle_config.kdw_SL_SKA))                           { sd->spamcount_SL_SKA = sd->k_tick_c; return 0; }                           sd->spamcount_SL_SKA = 0;                           sd->spamtick_SL_SKA = tick + sd->kdelay;                           break;
+			case ST_FULLSTRIP:                     if (k_tick_check(sd, sd->spamtick_ST_FULLSTRIP,                     sd->spamcount_ST_FULLSTRIP,                     battle_config.kd_ST_FULLSTRIP,                     battle_config.kdw_ST_FULLSTRIP))                     { sd->spamcount_ST_FULLSTRIP = sd->k_tick_c; return 0; }                     sd->spamcount_ST_FULLSTRIP = 0;                     sd->spamtick_ST_FULLSTRIP = tick + sd->kdelay;                     break;
+			case CR_SLIMPITCHER:                   if (k_tick_check(sd, sd->spamtick_CR_SLIMPITCHER,                   sd->spamcount_CR_SLIMPITCHER,                   battle_config.kd_CR_SLIMPITCHER,                   battle_config.kdw_CR_SLIMPITCHER))                   { sd->spamcount_CR_SLIMPITCHER = sd->k_tick_c; return 0; }                   sd->spamcount_CR_SLIMPITCHER = 0;                   sd->spamtick_CR_SLIMPITCHER = tick + sd->kdelay;                   break;
+			case CR_FULLPROTECTION:                if (k_tick_check(sd, sd->spamtick_CR_FULLPROTECTION,                sd->spamcount_CR_FULLPROTECTION,                battle_config.kd_CR_FULLPROTECTION,                battle_config.kdw_CR_FULLPROTECTION))                { sd->spamcount_CR_FULLPROTECTION = sd->k_tick_c; return 0; }                sd->spamcount_CR_FULLPROTECTION = 0;                sd->spamtick_CR_FULLPROTECTION = tick + sd->kdelay;                break;
+			case PA_SHIELDCHAIN:                   if (k_tick_check(sd, sd->spamtick_PA_SHIELDCHAIN,                   sd->spamcount_PA_SHIELDCHAIN,                   battle_config.kd_PA_SHIELDCHAIN,                   battle_config.kdw_PA_SHIELDCHAIN))                   { sd->spamcount_PA_SHIELDCHAIN = sd->k_tick_c; return 0; }                   sd->spamcount_PA_SHIELDCHAIN = 0;                   sd->spamtick_PA_SHIELDCHAIN = tick + sd->kdelay;                   break;
+			case HP_MANARECHARGE:                  if (k_tick_check(sd, sd->spamtick_HP_MANARECHARGE,                  sd->spamcount_HP_MANARECHARGE,                  battle_config.kd_HP_MANARECHARGE,                  battle_config.kdw_HP_MANARECHARGE))                  { sd->spamcount_HP_MANARECHARGE = sd->k_tick_c; return 0; }                  sd->spamcount_HP_MANARECHARGE = 0;                  sd->spamtick_HP_MANARECHARGE = tick + sd->kdelay;                  break;
+			case PF_DOUBLECASTING:                 if (k_tick_check(sd, sd->spamtick_PF_DOUBLECASTING,                 sd->spamcount_PF_DOUBLECASTING,                 battle_config.kd_PF_DOUBLECASTING,                 battle_config.kdw_PF_DOUBLECASTING))                 { sd->spamcount_PF_DOUBLECASTING = sd->k_tick_c; return 0; }                 sd->spamcount_PF_DOUBLECASTING = 0;                 sd->spamtick_PF_DOUBLECASTING = tick + sd->kdelay;                 break;
+			case HW_GANBANTEIN:                    if (k_tick_check(sd, sd->spamtick_HW_GANBANTEIN,                    sd->spamcount_HW_GANBANTEIN,                    battle_config.kd_HW_GANBANTEIN,                    battle_config.kdw_HW_GANBANTEIN))                    { sd->spamcount_HW_GANBANTEIN = sd->k_tick_c; return 0; }                    sd->spamcount_HW_GANBANTEIN = 0;                    sd->spamtick_HW_GANBANTEIN = tick + sd->kdelay;                    break;
+			case HW_GRAVITATION:                   if (k_tick_check(sd, sd->spamtick_HW_GRAVITATION,                   sd->spamcount_HW_GRAVITATION,                   battle_config.kd_HW_GRAVITATION,                   battle_config.kdw_HW_GRAVITATION))                   { sd->spamcount_HW_GRAVITATION = sd->k_tick_c; return 0; }                   sd->spamcount_HW_GRAVITATION = 0;                   sd->spamtick_HW_GRAVITATION = tick + sd->kdelay;                   break;
+			case WS_CARTTERMINATION:               if (k_tick_check(sd, sd->spamtick_WS_CARTTERMINATION,               sd->spamcount_WS_CARTTERMINATION,               battle_config.kd_WS_CARTTERMINATION,               battle_config.kdw_WS_CARTTERMINATION))               { sd->spamcount_WS_CARTTERMINATION = sd->k_tick_c; return 0; }               sd->spamcount_WS_CARTTERMINATION = 0;               sd->spamtick_WS_CARTTERMINATION = tick + sd->kdelay;               break;
+			case CG_HERMODE:                       if (k_tick_check(sd, sd->spamtick_CG_HERMODE,                       sd->spamcount_CG_HERMODE,                       battle_config.kd_CG_HERMODE,                       battle_config.kdw_CG_HERMODE))                       { sd->spamcount_CG_HERMODE = sd->k_tick_c; return 0; }                       sd->spamcount_CG_HERMODE = 0;                       sd->spamtick_CG_HERMODE = tick + sd->kdelay;                       break;
+			case CG_TAROTCARD:                     if (k_tick_check(sd, sd->spamtick_CG_TAROTCARD,                     sd->spamcount_CG_TAROTCARD,                     battle_config.kd_CG_TAROTCARD,                     battle_config.kdw_CG_TAROTCARD))                     { sd->spamcount_CG_TAROTCARD = sd->k_tick_c; return 0; }                     sd->spamcount_CG_TAROTCARD = 0;                     sd->spamtick_CG_TAROTCARD = tick + sd->kdelay;                     break;
+			case CR_ACIDDEMONSTRATION:             if (k_tick_check(sd, sd->spamtick_CR_ACIDDEMONSTRATION,             sd->spamcount_CR_ACIDDEMONSTRATION,             battle_config.kd_CR_ACIDDEMONSTRATION,             battle_config.kdw_CR_ACIDDEMONSTRATION))             { sd->spamcount_CR_ACIDDEMONSTRATION = sd->k_tick_c; return 0; }             sd->spamcount_CR_ACIDDEMONSTRATION = 0;             sd->spamtick_CR_ACIDDEMONSTRATION = tick + sd->kdelay;             break;
+			case SL_HIGH:                          if (k_tick_check(sd, sd->spamtick_SL_HIGH,                          sd->spamcount_SL_HIGH,                          battle_config.kd_SL_HIGH,                          battle_config.kdw_SL_HIGH))                          { sd->spamcount_SL_HIGH = sd->k_tick_c; return 0; }                          sd->spamcount_SL_HIGH = 0;                          sd->spamtick_SL_HIGH = tick + sd->kdelay;                          break;
+			case GS_TRIPLEACTION:                  if (k_tick_check(sd, sd->spamtick_GS_TRIPLEACTION,                  sd->spamcount_GS_TRIPLEACTION,                  battle_config.kd_GS_TRIPLEACTION,                  battle_config.kdw_GS_TRIPLEACTION))                  { sd->spamcount_GS_TRIPLEACTION = sd->k_tick_c; return 0; }                  sd->spamcount_GS_TRIPLEACTION = 0;                  sd->spamtick_GS_TRIPLEACTION = tick + sd->kdelay;                  break;
+			case GS_BULLSEYE:                      if (k_tick_check(sd, sd->spamtick_GS_BULLSEYE,                      sd->spamcount_GS_BULLSEYE,                      battle_config.kd_GS_BULLSEYE,                      battle_config.kdw_GS_BULLSEYE))                      { sd->spamcount_GS_BULLSEYE = sd->k_tick_c; return 0; }                      sd->spamcount_GS_BULLSEYE = 0;                      sd->spamtick_GS_BULLSEYE = tick + sd->kdelay;                      break;
+			case GS_MADNESSCANCEL:                 if (k_tick_check(sd, sd->spamtick_GS_MADNESSCANCEL,                 sd->spamcount_GS_MADNESSCANCEL,                 battle_config.kd_GS_MADNESSCANCEL,                 battle_config.kdw_GS_MADNESSCANCEL))                 { sd->spamcount_GS_MADNESSCANCEL = sd->k_tick_c; return 0; }                 sd->spamcount_GS_MADNESSCANCEL = 0;                 sd->spamtick_GS_MADNESSCANCEL = tick + sd->kdelay;                 break;
+			case GS_INCREASING:                    if (k_tick_check(sd, sd->spamtick_GS_INCREASING,                    sd->spamcount_GS_INCREASING,                    battle_config.kd_GS_INCREASING,                    battle_config.kdw_GS_INCREASING))                    { sd->spamcount_GS_INCREASING = sd->k_tick_c; return 0; }                    sd->spamcount_GS_INCREASING = 0;                    sd->spamtick_GS_INCREASING = tick + sd->kdelay;                    break;
+			case GS_MAGICALBULLET:                 if (k_tick_check(sd, sd->spamtick_GS_MAGICALBULLET,                 sd->spamcount_GS_MAGICALBULLET,                 battle_config.kd_GS_MAGICALBULLET,                 battle_config.kdw_GS_MAGICALBULLET))                 { sd->spamcount_GS_MAGICALBULLET = sd->k_tick_c; return 0; }                 sd->spamcount_GS_MAGICALBULLET = 0;                 sd->spamtick_GS_MAGICALBULLET = tick + sd->kdelay;                 break;
+			case GS_CRACKER:                       if (k_tick_check(sd, sd->spamtick_GS_CRACKER,                       sd->spamcount_GS_CRACKER,                       battle_config.kd_GS_CRACKER,                       battle_config.kdw_GS_CRACKER))                       { sd->spamcount_GS_CRACKER = sd->k_tick_c; return 0; }                       sd->spamcount_GS_CRACKER = 0;                       sd->spamtick_GS_CRACKER = tick + sd->kdelay;                       break;
+			case GS_SINGLEACTION:                  if (k_tick_check(sd, sd->spamtick_GS_SINGLEACTION,                  sd->spamcount_GS_SINGLEACTION,                  battle_config.kd_GS_SINGLEACTION,                  battle_config.kdw_GS_SINGLEACTION))                  { sd->spamcount_GS_SINGLEACTION = sd->k_tick_c; return 0; }                  sd->spamcount_GS_SINGLEACTION = 0;                  sd->spamtick_GS_SINGLEACTION = tick + sd->kdelay;                  break;
+			case GS_CHAINACTION:                   if (k_tick_check(sd, sd->spamtick_GS_CHAINACTION,                   sd->spamcount_GS_CHAINACTION,                   battle_config.kd_GS_CHAINACTION,                   battle_config.kdw_GS_CHAINACTION))                   { sd->spamcount_GS_CHAINACTION = sd->k_tick_c; return 0; }                   sd->spamcount_GS_CHAINACTION = 0;                   sd->spamtick_GS_CHAINACTION = tick + sd->kdelay;                   break;
+			case GS_TRACKING:                      if (k_tick_check(sd, sd->spamtick_GS_TRACKING,                      sd->spamcount_GS_TRACKING,                      battle_config.kd_GS_TRACKING,                      battle_config.kdw_GS_TRACKING))                      { sd->spamcount_GS_TRACKING = sd->k_tick_c; return 0; }                      sd->spamcount_GS_TRACKING = 0;                      sd->spamtick_GS_TRACKING = tick + sd->kdelay;                      break;
+			case GS_DISARM:                        if (k_tick_check(sd, sd->spamtick_GS_DISARM,                        sd->spamcount_GS_DISARM,                        battle_config.kd_GS_DISARM,                        battle_config.kdw_GS_DISARM))                        { sd->spamcount_GS_DISARM = sd->k_tick_c; return 0; }                        sd->spamcount_GS_DISARM = 0;                        sd->spamtick_GS_DISARM = tick + sd->kdelay;                        break;
+			case GS_PIERCINGSHOT:                  if (k_tick_check(sd, sd->spamtick_GS_PIERCINGSHOT,                  sd->spamcount_GS_PIERCINGSHOT,                  battle_config.kd_GS_PIERCINGSHOT,                  battle_config.kdw_GS_PIERCINGSHOT))                  { sd->spamcount_GS_PIERCINGSHOT = sd->k_tick_c; return 0; }                  sd->spamcount_GS_PIERCINGSHOT = 0;                  sd->spamtick_GS_PIERCINGSHOT = tick + sd->kdelay;                  break;
+			case GS_RAPIDSHOWER:                   if (k_tick_check(sd, sd->spamtick_GS_RAPIDSHOWER,                   sd->spamcount_GS_RAPIDSHOWER,                   battle_config.kd_GS_RAPIDSHOWER,                   battle_config.kdw_GS_RAPIDSHOWER))                   { sd->spamcount_GS_RAPIDSHOWER = sd->k_tick_c; return 0; }                   sd->spamcount_GS_RAPIDSHOWER = 0;                   sd->spamtick_GS_RAPIDSHOWER = tick + sd->kdelay;                   break;
+			case GS_DESPERADO:                     if (k_tick_check(sd, sd->spamtick_GS_DESPERADO,                     sd->spamcount_GS_DESPERADO,                     battle_config.kd_GS_DESPERADO,                     battle_config.kdw_GS_DESPERADO))                     { sd->spamcount_GS_DESPERADO = sd->k_tick_c; return 0; }                     sd->spamcount_GS_DESPERADO = 0;                     sd->spamtick_GS_DESPERADO = tick + sd->kdelay;                     break;
+			case GS_GATLINGFEVER:                  if (k_tick_check(sd, sd->spamtick_GS_GATLINGFEVER,                  sd->spamcount_GS_GATLINGFEVER,                  battle_config.kd_GS_GATLINGFEVER,                  battle_config.kdw_GS_GATLINGFEVER))                  { sd->spamcount_GS_GATLINGFEVER = sd->k_tick_c; return 0; }                  sd->spamcount_GS_GATLINGFEVER = 0;                  sd->spamtick_GS_GATLINGFEVER = tick + sd->kdelay;                  break;
+			case GS_DUST:                          if (k_tick_check(sd, sd->spamtick_GS_DUST,                          sd->spamcount_GS_DUST,                          battle_config.kd_GS_DUST,                          battle_config.kdw_GS_DUST))                          { sd->spamcount_GS_DUST = sd->k_tick_c; return 0; }                          sd->spamcount_GS_DUST = 0;                          sd->spamtick_GS_DUST = tick + sd->kdelay;                          break;
+			case GS_FULLBUSTER:                    if (k_tick_check(sd, sd->spamtick_GS_FULLBUSTER,                    sd->spamcount_GS_FULLBUSTER,                    battle_config.kd_GS_FULLBUSTER,                    battle_config.kdw_GS_FULLBUSTER))                    { sd->spamcount_GS_FULLBUSTER = sd->k_tick_c; return 0; }                    sd->spamcount_GS_FULLBUSTER = 0;                    sd->spamtick_GS_FULLBUSTER = tick + sd->kdelay;                    break;
+			case GS_SPREADATTACK:                  if (k_tick_check(sd, sd->spamtick_GS_SPREADATTACK,                  sd->spamcount_GS_SPREADATTACK,                  battle_config.kd_GS_SPREADATTACK,                  battle_config.kdw_GS_SPREADATTACK))                  { sd->spamcount_GS_SPREADATTACK = sd->k_tick_c; return 0; }                  sd->spamcount_GS_SPREADATTACK = 0;                  sd->spamtick_GS_SPREADATTACK = tick + sd->kdelay;                  break;
+			case GS_GROUNDDRIFT:                   if (k_tick_check(sd, sd->spamtick_GS_GROUNDDRIFT,                   sd->spamcount_GS_GROUNDDRIFT,                   battle_config.kd_GS_GROUNDDRIFT,                   battle_config.kdw_GS_GROUNDDRIFT))                   { sd->spamcount_GS_GROUNDDRIFT = sd->k_tick_c; return 0; }                   sd->spamcount_GS_GROUNDDRIFT = 0;                   sd->spamtick_GS_GROUNDDRIFT = tick + sd->kdelay;                   break;
+			case NJ_TOBIDOUGU:                     if (k_tick_check(sd, sd->spamtick_NJ_TOBIDOUGU,                     sd->spamcount_NJ_TOBIDOUGU,                     battle_config.kd_NJ_TOBIDOUGU,                     battle_config.kdw_NJ_TOBIDOUGU))                     { sd->spamcount_NJ_TOBIDOUGU = sd->k_tick_c; return 0; }                     sd->spamcount_NJ_TOBIDOUGU = 0;                     sd->spamtick_NJ_TOBIDOUGU = tick + sd->kdelay;                     break;
+			case NJ_SYURIKEN:                      if (k_tick_check(sd, sd->spamtick_NJ_SYURIKEN,                      sd->spamcount_NJ_SYURIKEN,                      battle_config.kd_NJ_SYURIKEN,                      battle_config.kdw_NJ_SYURIKEN))                      { sd->spamcount_NJ_SYURIKEN = sd->k_tick_c; return 0; }                      sd->spamcount_NJ_SYURIKEN = 0;                      sd->spamtick_NJ_SYURIKEN = tick + sd->kdelay;                      break;
+			case NJ_KUNAI:                         if (k_tick_check(sd, sd->spamtick_NJ_KUNAI,                         sd->spamcount_NJ_KUNAI,                         battle_config.kd_NJ_KUNAI,                         battle_config.kdw_NJ_KUNAI))                         { sd->spamcount_NJ_KUNAI = sd->k_tick_c; return 0; }                         sd->spamcount_NJ_KUNAI = 0;                         sd->spamtick_NJ_KUNAI = tick + sd->kdelay;                         break;
+			case NJ_HUUMA:                         if (k_tick_check(sd, sd->spamtick_NJ_HUUMA,                         sd->spamcount_NJ_HUUMA,                         battle_config.kd_NJ_HUUMA,                         battle_config.kdw_NJ_HUUMA))                         { sd->spamcount_NJ_HUUMA = sd->k_tick_c; return 0; }                         sd->spamcount_NJ_HUUMA = 0;                         sd->spamtick_NJ_HUUMA = tick + sd->kdelay;                         break;
+			case NJ_ZENYNAGE:                      if (k_tick_check(sd, sd->spamtick_NJ_ZENYNAGE,                      sd->spamcount_NJ_ZENYNAGE,                      battle_config.kd_NJ_ZENYNAGE,                      battle_config.kdw_NJ_ZENYNAGE))                      { sd->spamcount_NJ_ZENYNAGE = sd->k_tick_c; return 0; }                      sd->spamcount_NJ_ZENYNAGE = 0;                      sd->spamtick_NJ_ZENYNAGE = tick + sd->kdelay;                      break;
+			case NJ_TATAMIGAESHI:                  if (k_tick_check(sd, sd->spamtick_NJ_TATAMIGAESHI,                  sd->spamcount_NJ_TATAMIGAESHI,                  battle_config.kd_NJ_TATAMIGAESHI,                  battle_config.kdw_NJ_TATAMIGAESHI))                  { sd->spamcount_NJ_TATAMIGAESHI = sd->k_tick_c; return 0; }                  sd->spamcount_NJ_TATAMIGAESHI = 0;                  sd->spamtick_NJ_TATAMIGAESHI = tick + sd->kdelay;                  break;
+			case NJ_KASUMIKIRI:                    if (k_tick_check(sd, sd->spamtick_NJ_KASUMIKIRI,                    sd->spamcount_NJ_KASUMIKIRI,                    battle_config.kd_NJ_KASUMIKIRI,                    battle_config.kdw_NJ_KASUMIKIRI))                    { sd->spamcount_NJ_KASUMIKIRI = sd->k_tick_c; return 0; }                    sd->spamcount_NJ_KASUMIKIRI = 0;                    sd->spamtick_NJ_KASUMIKIRI = tick + sd->kdelay;                    break;
+			case NJ_SHADOWJUMP:                    if (k_tick_check(sd, sd->spamtick_NJ_SHADOWJUMP,                    sd->spamcount_NJ_SHADOWJUMP,                    battle_config.kd_NJ_SHADOWJUMP,                    battle_config.kdw_NJ_SHADOWJUMP))                    { sd->spamcount_NJ_SHADOWJUMP = sd->k_tick_c; return 0; }                    sd->spamcount_NJ_SHADOWJUMP = 0;                    sd->spamtick_NJ_SHADOWJUMP = tick + sd->kdelay;                    break;
+			case NJ_KIRIKAGE:                      if (k_tick_check(sd, sd->spamtick_NJ_KIRIKAGE,                      sd->spamcount_NJ_KIRIKAGE,                      battle_config.kd_NJ_KIRIKAGE,                      battle_config.kdw_NJ_KIRIKAGE))                      { sd->spamcount_NJ_KIRIKAGE = sd->k_tick_c; return 0; }                      sd->spamcount_NJ_KIRIKAGE = 0;                      sd->spamtick_NJ_KIRIKAGE = tick + sd->kdelay;                      break;
+			case NJ_UTSUSEMI:                      if (k_tick_check(sd, sd->spamtick_NJ_UTSUSEMI,                      sd->spamcount_NJ_UTSUSEMI,                      battle_config.kd_NJ_UTSUSEMI,                      battle_config.kdw_NJ_UTSUSEMI))                      { sd->spamcount_NJ_UTSUSEMI = sd->k_tick_c; return 0; }                      sd->spamcount_NJ_UTSUSEMI = 0;                      sd->spamtick_NJ_UTSUSEMI = tick + sd->kdelay;                      break;
+			case NJ_BUNSINJYUTSU:                  if (k_tick_check(sd, sd->spamtick_NJ_BUNSINJYUTSU,                  sd->spamcount_NJ_BUNSINJYUTSU,                  battle_config.kd_NJ_BUNSINJYUTSU,                  battle_config.kdw_NJ_BUNSINJYUTSU))                  { sd->spamcount_NJ_BUNSINJYUTSU = sd->k_tick_c; return 0; }                  sd->spamcount_NJ_BUNSINJYUTSU = 0;                  sd->spamtick_NJ_BUNSINJYUTSU = tick + sd->kdelay;                  break;
+			case NJ_NINPOU:                        if (k_tick_check(sd, sd->spamtick_NJ_NINPOU,                        sd->spamcount_NJ_NINPOU,                        battle_config.kd_NJ_NINPOU,                        battle_config.kdw_NJ_NINPOU))                        { sd->spamcount_NJ_NINPOU = sd->k_tick_c; return 0; }                        sd->spamcount_NJ_NINPOU = 0;                        sd->spamtick_NJ_NINPOU = tick + sd->kdelay;                        break;
+			case NJ_KOUENKA:                       if (k_tick_check(sd, sd->spamtick_NJ_KOUENKA,                       sd->spamcount_NJ_KOUENKA,                       battle_config.kd_NJ_KOUENKA,                       battle_config.kdw_NJ_KOUENKA))                       { sd->spamcount_NJ_KOUENKA = sd->k_tick_c; return 0; }                       sd->spamcount_NJ_KOUENKA = 0;                       sd->spamtick_NJ_KOUENKA = tick + sd->kdelay;                       break;
+			case NJ_KAENSIN:                       if (k_tick_check(sd, sd->spamtick_NJ_KAENSIN,                       sd->spamcount_NJ_KAENSIN,                       battle_config.kd_NJ_KAENSIN,                       battle_config.kdw_NJ_KAENSIN))                       { sd->spamcount_NJ_KAENSIN = sd->k_tick_c; return 0; }                       sd->spamcount_NJ_KAENSIN = 0;                       sd->spamtick_NJ_KAENSIN = tick + sd->kdelay;                       break;
+			case NJ_BAKUENRYU:                     if (k_tick_check(sd, sd->spamtick_NJ_BAKUENRYU,                     sd->spamcount_NJ_BAKUENRYU,                     battle_config.kd_NJ_BAKUENRYU,                     battle_config.kdw_NJ_BAKUENRYU))                     { sd->spamcount_NJ_BAKUENRYU = sd->k_tick_c; return 0; }                     sd->spamcount_NJ_BAKUENRYU = 0;                     sd->spamtick_NJ_BAKUENRYU = tick + sd->kdelay;                     break;
+			case NJ_HYOUSENSOU:                    if (k_tick_check(sd, sd->spamtick_NJ_HYOUSENSOU,                    sd->spamcount_NJ_HYOUSENSOU,                    battle_config.kd_NJ_HYOUSENSOU,                    battle_config.kdw_NJ_HYOUSENSOU))                    { sd->spamcount_NJ_HYOUSENSOU = sd->k_tick_c; return 0; }                    sd->spamcount_NJ_HYOUSENSOU = 0;                    sd->spamtick_NJ_HYOUSENSOU = tick + sd->kdelay;                    break;
+			case NJ_SUITON:                        if (k_tick_check(sd, sd->spamtick_NJ_SUITON,                        sd->spamcount_NJ_SUITON,                        battle_config.kd_NJ_SUITON,                        battle_config.kdw_NJ_SUITON))                        { sd->spamcount_NJ_SUITON = sd->k_tick_c; return 0; }                        sd->spamcount_NJ_SUITON = 0;                        sd->spamtick_NJ_SUITON = tick + sd->kdelay;                        break;
+			case NJ_HYOUSYOURAKU:                  if (k_tick_check(sd, sd->spamtick_NJ_HYOUSYOURAKU,                  sd->spamcount_NJ_HYOUSYOURAKU,                  battle_config.kd_NJ_HYOUSYOURAKU,                  battle_config.kdw_NJ_HYOUSYOURAKU))                  { sd->spamcount_NJ_HYOUSYOURAKU = sd->k_tick_c; return 0; }                  sd->spamcount_NJ_HYOUSYOURAKU = 0;                  sd->spamtick_NJ_HYOUSYOURAKU = tick + sd->kdelay;                  break;
+			case NJ_HUUJIN:                        if (k_tick_check(sd, sd->spamtick_NJ_HUUJIN,                        sd->spamcount_NJ_HUUJIN,                        battle_config.kd_NJ_HUUJIN,                        battle_config.kdw_NJ_HUUJIN))                        { sd->spamcount_NJ_HUUJIN = sd->k_tick_c; return 0; }                        sd->spamcount_NJ_HUUJIN = 0;                        sd->spamtick_NJ_HUUJIN = tick + sd->kdelay;                        break;
+			case NJ_RAIGEKISAI:                    if (k_tick_check(sd, sd->spamtick_NJ_RAIGEKISAI,                    sd->spamcount_NJ_RAIGEKISAI,                    battle_config.kd_NJ_RAIGEKISAI,                    battle_config.kdw_NJ_RAIGEKISAI))                    { sd->spamcount_NJ_RAIGEKISAI = sd->k_tick_c; return 0; }                    sd->spamcount_NJ_RAIGEKISAI = 0;                    sd->spamtick_NJ_RAIGEKISAI = tick + sd->kdelay;                    break;
+			case NJ_KAMAITACHI:                    if (k_tick_check(sd, sd->spamtick_NJ_KAMAITACHI,                    sd->spamcount_NJ_KAMAITACHI,                    battle_config.kd_NJ_KAMAITACHI,                    battle_config.kdw_NJ_KAMAITACHI))                    { sd->spamcount_NJ_KAMAITACHI = sd->k_tick_c; return 0; }                    sd->spamcount_NJ_KAMAITACHI = 0;                    sd->spamtick_NJ_KAMAITACHI = tick + sd->kdelay;                    break;
+			case NJ_NEN:                           if (k_tick_check(sd, sd->spamtick_NJ_NEN,                           sd->spamcount_NJ_NEN,                           battle_config.kd_NJ_NEN,                           battle_config.kdw_NJ_NEN))                           { sd->spamcount_NJ_NEN = sd->k_tick_c; return 0; }                           sd->spamcount_NJ_NEN = 0;                           sd->spamtick_NJ_NEN = tick + sd->kdelay;                           break;
+			case NJ_ISSEN:                         if (k_tick_check(sd, sd->spamtick_NJ_ISSEN,                         sd->spamcount_NJ_ISSEN,                         battle_config.kd_NJ_ISSEN,                         battle_config.kdw_NJ_ISSEN))                         { sd->spamcount_NJ_ISSEN = sd->k_tick_c; return 0; }                         sd->spamcount_NJ_ISSEN = 0;                         sd->spamtick_NJ_ISSEN = tick + sd->kdelay;                         break;
+			case KN_CHARGEATK:                     if (k_tick_check(sd, sd->spamtick_KN_CHARGEATK,                     sd->spamcount_KN_CHARGEATK,                     battle_config.kd_KN_CHARGEATK,                     battle_config.kdw_KN_CHARGEATK))                     { sd->spamcount_KN_CHARGEATK = sd->k_tick_c; return 0; }                     sd->spamcount_KN_CHARGEATK = 0;                     sd->spamtick_KN_CHARGEATK = tick + sd->kdelay;                     break;
+			case AS_VENOMKNIFE:                    if (k_tick_check(sd, sd->spamtick_AS_VENOMKNIFE,                    sd->spamcount_AS_VENOMKNIFE,                    battle_config.kd_AS_VENOMKNIFE,                    battle_config.kdw_AS_VENOMKNIFE))                    { sd->spamcount_AS_VENOMKNIFE = sd->k_tick_c; return 0; }                    sd->spamcount_AS_VENOMKNIFE = 0;                    sd->spamtick_AS_VENOMKNIFE = tick + sd->kdelay;                    break;
+			case RG_CLOSECONFINE:                  if (k_tick_check(sd, sd->spamtick_RG_CLOSECONFINE,                  sd->spamcount_RG_CLOSECONFINE,                  battle_config.kd_RG_CLOSECONFINE,                  battle_config.kdw_RG_CLOSECONFINE))                  { sd->spamcount_RG_CLOSECONFINE = sd->k_tick_c; return 0; }                  sd->spamcount_RG_CLOSECONFINE = 0;                  sd->spamtick_RG_CLOSECONFINE = tick + sd->kdelay;                  break;
+			case WZ_SIGHTBLASTER:                  if (k_tick_check(sd, sd->spamtick_WZ_SIGHTBLASTER,                  sd->spamcount_WZ_SIGHTBLASTER,                  battle_config.kd_WZ_SIGHTBLASTER,                  battle_config.kdw_WZ_SIGHTBLASTER))                  { sd->spamcount_WZ_SIGHTBLASTER = sd->k_tick_c; return 0; }                  sd->spamcount_WZ_SIGHTBLASTER = 0;                  sd->spamtick_WZ_SIGHTBLASTER = tick + sd->kdelay;                  break;
+			case HT_PHANTASMIC:                    if (k_tick_check(sd, sd->spamtick_HT_PHANTASMIC,                    sd->spamcount_HT_PHANTASMIC,                    battle_config.kd_HT_PHANTASMIC,                    battle_config.kdw_HT_PHANTASMIC))                    { sd->spamcount_HT_PHANTASMIC = sd->k_tick_c; return 0; }                    sd->spamcount_HT_PHANTASMIC = 0;                    sd->spamtick_HT_PHANTASMIC = tick + sd->kdelay;                    break;
+			case BA_PANGVOICE:                     if (k_tick_check(sd, sd->spamtick_BA_PANGVOICE,                     sd->spamcount_BA_PANGVOICE,                     battle_config.kd_BA_PANGVOICE,                     battle_config.kdw_BA_PANGVOICE))                     { sd->spamcount_BA_PANGVOICE = sd->k_tick_c; return 0; }                     sd->spamcount_BA_PANGVOICE = 0;                     sd->spamtick_BA_PANGVOICE = tick + sd->kdelay;                     break;
+			case DC_WINKCHARM:                     if (k_tick_check(sd, sd->spamtick_DC_WINKCHARM,                     sd->spamcount_DC_WINKCHARM,                     battle_config.kd_DC_WINKCHARM,                     battle_config.kdw_DC_WINKCHARM))                     { sd->spamcount_DC_WINKCHARM = sd->k_tick_c; return 0; }                     sd->spamcount_DC_WINKCHARM = 0;                     sd->spamtick_DC_WINKCHARM = tick + sd->kdelay;                     break;
+			case PR_REDEMPTIO:                     if (k_tick_check(sd, sd->spamtick_PR_REDEMPTIO,                     sd->spamcount_PR_REDEMPTIO,                     battle_config.kd_PR_REDEMPTIO,                     battle_config.kdw_PR_REDEMPTIO))                     { sd->spamcount_PR_REDEMPTIO = sd->k_tick_c; return 0; }                     sd->spamcount_PR_REDEMPTIO = 0;                     sd->spamtick_PR_REDEMPTIO = tick + sd->kdelay;                     break;
+			case MO_KITRANSLATION:                 if (k_tick_check(sd, sd->spamtick_MO_KITRANSLATION,                 sd->spamcount_MO_KITRANSLATION,                 battle_config.kd_MO_KITRANSLATION,                 battle_config.kdw_MO_KITRANSLATION))                 { sd->spamcount_MO_KITRANSLATION = sd->k_tick_c; return 0; }                 sd->spamcount_MO_KITRANSLATION = 0;                 sd->spamtick_MO_KITRANSLATION = tick + sd->kdelay;                 break;
+			case MO_BALKYOUNG:                     if (k_tick_check(sd, sd->spamtick_MO_BALKYOUNG,                     sd->spamcount_MO_BALKYOUNG,                     battle_config.kd_MO_BALKYOUNG,                     battle_config.kdw_MO_BALKYOUNG))                     { sd->spamcount_MO_BALKYOUNG = sd->k_tick_c; return 0; }                     sd->spamcount_MO_BALKYOUNG = 0;                     sd->spamtick_MO_BALKYOUNG = tick + sd->kdelay;                     break;
+			case RK_SONICWAVE:                     if (k_tick_check(sd, sd->spamtick_RK_SONICWAVE,                     sd->spamcount_RK_SONICWAVE,                     battle_config.kd_RK_SONICWAVE,                     battle_config.kdw_RK_SONICWAVE))                     { sd->spamcount_RK_SONICWAVE = sd->k_tick_c; return 0; }                     sd->spamcount_RK_SONICWAVE = 0;                     sd->spamtick_RK_SONICWAVE = tick + sd->kdelay;                     break;
+			case RK_DEATHBOUND:                    if (k_tick_check(sd, sd->spamtick_RK_DEATHBOUND,                    sd->spamcount_RK_DEATHBOUND,                    battle_config.kd_RK_DEATHBOUND,                    battle_config.kdw_RK_DEATHBOUND))                    { sd->spamcount_RK_DEATHBOUND = sd->k_tick_c; return 0; }                    sd->spamcount_RK_DEATHBOUND = 0;                    sd->spamtick_RK_DEATHBOUND = tick + sd->kdelay;                    break;
+			case RK_HUNDREDSPEAR:                  if (k_tick_check(sd, sd->spamtick_RK_HUNDREDSPEAR,                  sd->spamcount_RK_HUNDREDSPEAR,                  battle_config.kd_RK_HUNDREDSPEAR,                  battle_config.kdw_RK_HUNDREDSPEAR))                  { sd->spamcount_RK_HUNDREDSPEAR = sd->k_tick_c; return 0; }                  sd->spamcount_RK_HUNDREDSPEAR = 0;                  sd->spamtick_RK_HUNDREDSPEAR = tick + sd->kdelay;                  break;
+			case RK_WINDCUTTER:                    if (k_tick_check(sd, sd->spamtick_RK_WINDCUTTER,                    sd->spamcount_RK_WINDCUTTER,                    battle_config.kd_RK_WINDCUTTER,                    battle_config.kdw_RK_WINDCUTTER))                    { sd->spamcount_RK_WINDCUTTER = sd->k_tick_c; return 0; }                    sd->spamcount_RK_WINDCUTTER = 0;                    sd->spamtick_RK_WINDCUTTER = tick + sd->kdelay;                    break;
+			case RK_IGNITIONBREAK:                 if (k_tick_check(sd, sd->spamtick_RK_IGNITIONBREAK,                 sd->spamcount_RK_IGNITIONBREAK,                 battle_config.kd_RK_IGNITIONBREAK,                 battle_config.kdw_RK_IGNITIONBREAK))                 { sd->spamcount_RK_IGNITIONBREAK = sd->k_tick_c; return 0; }                 sd->spamcount_RK_IGNITIONBREAK = 0;                 sd->spamtick_RK_IGNITIONBREAK = tick + sd->kdelay;                 break;
+			case RK_DRAGONBREATH:                  if (k_tick_check(sd, sd->spamtick_RK_DRAGONBREATH,                  sd->spamcount_RK_DRAGONBREATH,                  battle_config.kd_RK_DRAGONBREATH,                  battle_config.kdw_RK_DRAGONBREATH))                  { sd->spamcount_RK_DRAGONBREATH = sd->k_tick_c; return 0; }                  sd->spamcount_RK_DRAGONBREATH = 0;                  sd->spamtick_RK_DRAGONBREATH = tick + sd->kdelay;                  break;
+			case RK_CRUSHSTRIKE:                   if (k_tick_check(sd, sd->spamtick_RK_CRUSHSTRIKE,                   sd->spamcount_RK_CRUSHSTRIKE,                   battle_config.kd_RK_CRUSHSTRIKE,                   battle_config.kdw_RK_CRUSHSTRIKE))                   { sd->spamcount_RK_CRUSHSTRIKE = sd->k_tick_c; return 0; }                   sd->spamcount_RK_CRUSHSTRIKE = 0;                   sd->spamtick_RK_CRUSHSTRIKE = tick + sd->kdelay;                   break;
+			case RK_STORMBLAST:                    if (k_tick_check(sd, sd->spamtick_RK_STORMBLAST,                    sd->spamcount_RK_STORMBLAST,                    battle_config.kd_RK_STORMBLAST,                    battle_config.kdw_RK_STORMBLAST))                    { sd->spamcount_RK_STORMBLAST = sd->k_tick_c; return 0; }                    sd->spamcount_RK_STORMBLAST = 0;                    sd->spamtick_RK_STORMBLAST = tick + sd->kdelay;                    break;
+			case RK_PHANTOMTHRUST:                 if (k_tick_check(sd, sd->spamtick_RK_PHANTOMTHRUST,                 sd->spamcount_RK_PHANTOMTHRUST,                 battle_config.kd_RK_PHANTOMTHRUST,                 battle_config.kdw_RK_PHANTOMTHRUST))                 { sd->spamcount_RK_PHANTOMTHRUST = sd->k_tick_c; return 0; }                 sd->spamcount_RK_PHANTOMTHRUST = 0;                 sd->spamtick_RK_PHANTOMTHRUST = tick + sd->kdelay;                 break;
+			case GC_CROSSIMPACT:                   if (k_tick_check(sd, sd->spamtick_GC_CROSSIMPACT,                   sd->spamcount_GC_CROSSIMPACT,                   battle_config.kd_GC_CROSSIMPACT,                   battle_config.kdw_GC_CROSSIMPACT))                   { sd->spamcount_GC_CROSSIMPACT = sd->k_tick_c; return 0; }                   sd->spamcount_GC_CROSSIMPACT = 0;                   sd->spamtick_GC_CROSSIMPACT = tick + sd->kdelay;                   break;
+			case GC_WEAPONCRUSH:                   if (k_tick_check(sd, sd->spamtick_GC_WEAPONCRUSH,                   sd->spamcount_GC_WEAPONCRUSH,                   battle_config.kd_GC_WEAPONCRUSH,                   battle_config.kdw_GC_WEAPONCRUSH))                   { sd->spamcount_GC_WEAPONCRUSH = sd->k_tick_c; return 0; }                   sd->spamcount_GC_WEAPONCRUSH = 0;                   sd->spamtick_GC_WEAPONCRUSH = tick + sd->kdelay;                   break;
+			case GC_ROLLINGCUTTER:                 if (k_tick_check(sd, sd->spamtick_GC_ROLLINGCUTTER,                 sd->spamcount_GC_ROLLINGCUTTER,                 battle_config.kd_GC_ROLLINGCUTTER,                 battle_config.kdw_GC_ROLLINGCUTTER))                 { sd->spamcount_GC_ROLLINGCUTTER = sd->k_tick_c; return 0; }                 sd->spamcount_GC_ROLLINGCUTTER = 0;                 sd->spamtick_GC_ROLLINGCUTTER = tick + sd->kdelay;                 break;
+			case GC_CROSSRIPPERSLASHER:            if (k_tick_check(sd, sd->spamtick_GC_CROSSRIPPERSLASHER,            sd->spamcount_GC_CROSSRIPPERSLASHER,            battle_config.kd_GC_CROSSRIPPERSLASHER,            battle_config.kdw_GC_CROSSRIPPERSLASHER))            { sd->spamcount_GC_CROSSRIPPERSLASHER = sd->k_tick_c; return 0; }            sd->spamcount_GC_CROSSRIPPERSLASHER = 0;            sd->spamtick_GC_CROSSRIPPERSLASHER = tick + sd->kdelay;            break;
+			case AB_JUDEX:                         if (k_tick_check(sd, sd->spamtick_AB_JUDEX,                         sd->spamcount_AB_JUDEX,                         battle_config.kd_AB_JUDEX,                         battle_config.kdw_AB_JUDEX))                         { sd->spamcount_AB_JUDEX = sd->k_tick_c; return 0; }                         sd->spamcount_AB_JUDEX = 0;                         sd->spamtick_AB_JUDEX = tick + sd->kdelay;                         break;
+			case AB_ADORAMUS:                      if (k_tick_check(sd, sd->spamtick_AB_ADORAMUS,                      sd->spamcount_AB_ADORAMUS,                      battle_config.kd_AB_ADORAMUS,                      battle_config.kdw_AB_ADORAMUS))                      { sd->spamcount_AB_ADORAMUS = sd->k_tick_c; return 0; }                      sd->spamcount_AB_ADORAMUS = 0;                      sd->spamtick_AB_ADORAMUS = tick + sd->kdelay;                      break;
+			case AB_CHEAL:                         if (k_tick_check(sd, sd->spamtick_AB_CHEAL,                         sd->spamcount_AB_CHEAL,                         battle_config.kd_AB_CHEAL,                         battle_config.kdw_AB_CHEAL))                         { sd->spamcount_AB_CHEAL = sd->k_tick_c; return 0; }                         sd->spamcount_AB_CHEAL = 0;                         sd->spamtick_AB_CHEAL = tick + sd->kdelay;                         break;
+			case AB_EPICLESIS:                     if (k_tick_check(sd, sd->spamtick_AB_EPICLESIS,                     sd->spamcount_AB_EPICLESIS,                     battle_config.kd_AB_EPICLESIS,                     battle_config.kdw_AB_EPICLESIS))                     { sd->spamcount_AB_EPICLESIS = sd->k_tick_c; return 0; }                     sd->spamcount_AB_EPICLESIS = 0;                     sd->spamtick_AB_EPICLESIS = tick + sd->kdelay;                     break;
+			case AB_PRAEFATIO:                     if (k_tick_check(sd, sd->spamtick_AB_PRAEFATIO,                     sd->spamcount_AB_PRAEFATIO,                     battle_config.kd_AB_PRAEFATIO,                     battle_config.kdw_AB_PRAEFATIO))                     { sd->spamcount_AB_PRAEFATIO = sd->k_tick_c; return 0; }                     sd->spamcount_AB_PRAEFATIO = 0;                     sd->spamtick_AB_PRAEFATIO = tick + sd->kdelay;                     break;
+			case AB_EUCHARISTICA:                  if (k_tick_check(sd, sd->spamtick_AB_EUCHARISTICA,                  sd->spamcount_AB_EUCHARISTICA,                  battle_config.kd_AB_EUCHARISTICA,                  battle_config.kdw_AB_EUCHARISTICA))                  { sd->spamcount_AB_EUCHARISTICA = sd->k_tick_c; return 0; }                  sd->spamcount_AB_EUCHARISTICA = 0;                  sd->spamtick_AB_EUCHARISTICA = tick + sd->kdelay;                  break;
+			case AB_RENOVATIO:                     if (k_tick_check(sd, sd->spamtick_AB_RENOVATIO,                     sd->spamcount_AB_RENOVATIO,                     battle_config.kd_AB_RENOVATIO,                     battle_config.kdw_AB_RENOVATIO))                     { sd->spamcount_AB_RENOVATIO = sd->k_tick_c; return 0; }                     sd->spamcount_AB_RENOVATIO = 0;                     sd->spamtick_AB_RENOVATIO = tick + sd->kdelay;                     break;
+			case AB_HIGHNESSHEAL:                  if (k_tick_check(sd, sd->spamtick_AB_HIGHNESSHEAL,                  sd->spamcount_AB_HIGHNESSHEAL,                  battle_config.kd_AB_HIGHNESSHEAL,                  battle_config.kdw_AB_HIGHNESSHEAL))                  { sd->spamcount_AB_HIGHNESSHEAL = sd->k_tick_c; return 0; }                  sd->spamcount_AB_HIGHNESSHEAL = 0;                  sd->spamtick_AB_HIGHNESSHEAL = tick + sd->kdelay;                  break;
+			case AB_CLEARANCE:                     if (k_tick_check(sd, sd->spamtick_AB_CLEARANCE,                     sd->spamcount_AB_CLEARANCE,                     battle_config.kd_AB_CLEARANCE,                     battle_config.kdw_AB_CLEARANCE))                     { sd->spamcount_AB_CLEARANCE = sd->k_tick_c; return 0; }                     sd->spamcount_AB_CLEARANCE = 0;                     sd->spamtick_AB_CLEARANCE = tick + sd->kdelay;                     break;
+			case AB_EXPIATIO:                      if (k_tick_check(sd, sd->spamtick_AB_EXPIATIO,                      sd->spamcount_AB_EXPIATIO,                      battle_config.kd_AB_EXPIATIO,                      battle_config.kdw_AB_EXPIATIO))                      { sd->spamcount_AB_EXPIATIO = sd->k_tick_c; return 0; }                      sd->spamcount_AB_EXPIATIO = 0;                      sd->spamtick_AB_EXPIATIO = tick + sd->kdelay;                      break;
+			case AB_DUPLELIGHT:                    if (k_tick_check(sd, sd->spamtick_AB_DUPLELIGHT,                    sd->spamcount_AB_DUPLELIGHT,                    battle_config.kd_AB_DUPLELIGHT,                    battle_config.kdw_AB_DUPLELIGHT))                    { sd->spamcount_AB_DUPLELIGHT = sd->k_tick_c; return 0; }                    sd->spamcount_AB_DUPLELIGHT = 0;                    sd->spamtick_AB_DUPLELIGHT = tick + sd->kdelay;                    break;
+			case AB_DUPLELIGHT_MELEE:              if (k_tick_check(sd, sd->spamtick_AB_DUPLELIGHT_MELEE,              sd->spamcount_AB_DUPLELIGHT_MELEE,              battle_config.kd_AB_DUPLELIGHT_MELEE,              battle_config.kdw_AB_DUPLELIGHT_MELEE))              { sd->spamcount_AB_DUPLELIGHT_MELEE = sd->k_tick_c; return 0; }              sd->spamcount_AB_DUPLELIGHT_MELEE = 0;              sd->spamtick_AB_DUPLELIGHT_MELEE = tick + sd->kdelay;              break;
+			case AB_DUPLELIGHT_MAGIC:              if (k_tick_check(sd, sd->spamtick_AB_DUPLELIGHT_MAGIC,              sd->spamcount_AB_DUPLELIGHT_MAGIC,              battle_config.kd_AB_DUPLELIGHT_MAGIC,              battle_config.kdw_AB_DUPLELIGHT_MAGIC))              { sd->spamcount_AB_DUPLELIGHT_MAGIC = sd->k_tick_c; return 0; }              sd->spamcount_AB_DUPLELIGHT_MAGIC = 0;              sd->spamtick_AB_DUPLELIGHT_MAGIC = tick + sd->kdelay;              break;
+			case AB_SILENTIUM:                     if (k_tick_check(sd, sd->spamtick_AB_SILENTIUM,                     sd->spamcount_AB_SILENTIUM,                     battle_config.kd_AB_SILENTIUM,                     battle_config.kdw_AB_SILENTIUM))                     { sd->spamcount_AB_SILENTIUM = sd->k_tick_c; return 0; }                     sd->spamcount_AB_SILENTIUM = 0;                     sd->spamtick_AB_SILENTIUM = tick + sd->kdelay;                     break;
+			case WL_WHITEIMPRISON:                 if (k_tick_check(sd, sd->spamtick_WL_WHITEIMPRISON,                 sd->spamcount_WL_WHITEIMPRISON,                 battle_config.kd_WL_WHITEIMPRISON,                 battle_config.kdw_WL_WHITEIMPRISON))                 { sd->spamcount_WL_WHITEIMPRISON = sd->k_tick_c; return 0; }                 sd->spamcount_WL_WHITEIMPRISON = 0;                 sd->spamtick_WL_WHITEIMPRISON = tick + sd->kdelay;                 break;
+			case WL_SOULEXPANSION:                 if (k_tick_check(sd, sd->spamtick_WL_SOULEXPANSION,                 sd->spamcount_WL_SOULEXPANSION,                 battle_config.kd_WL_SOULEXPANSION,                 battle_config.kdw_WL_SOULEXPANSION))                 { sd->spamcount_WL_SOULEXPANSION = sd->k_tick_c; return 0; }                 sd->spamcount_WL_SOULEXPANSION = 0;                 sd->spamtick_WL_SOULEXPANSION = tick + sd->kdelay;                 break;
+			case WL_FROSTMISTY:                    if (k_tick_check(sd, sd->spamtick_WL_FROSTMISTY,                    sd->spamcount_WL_FROSTMISTY,                    battle_config.kd_WL_FROSTMISTY,                    battle_config.kdw_WL_FROSTMISTY))                    { sd->spamcount_WL_FROSTMISTY = sd->k_tick_c; return 0; }                    sd->spamcount_WL_FROSTMISTY = 0;                    sd->spamtick_WL_FROSTMISTY = tick + sd->kdelay;                    break;
+			case WL_JACKFROST:                     if (k_tick_check(sd, sd->spamtick_WL_JACKFROST,                     sd->spamcount_WL_JACKFROST,                     battle_config.kd_WL_JACKFROST,                     battle_config.kdw_WL_JACKFROST))                     { sd->spamcount_WL_JACKFROST = sd->k_tick_c; return 0; }                     sd->spamcount_WL_JACKFROST = 0;                     sd->spamtick_WL_JACKFROST = tick + sd->kdelay;                     break;
+			case WL_MARSHOFABYSS:                  if (k_tick_check(sd, sd->spamtick_WL_MARSHOFABYSS,                  sd->spamcount_WL_MARSHOFABYSS,                  battle_config.kd_WL_MARSHOFABYSS,                  battle_config.kdw_WL_MARSHOFABYSS))                  { sd->spamcount_WL_MARSHOFABYSS = sd->k_tick_c; return 0; }                  sd->spamcount_WL_MARSHOFABYSS = 0;                  sd->spamtick_WL_MARSHOFABYSS = tick + sd->kdelay;                  break;
+			case WL_RADIUS:                        if (k_tick_check(sd, sd->spamtick_WL_RADIUS,                        sd->spamcount_WL_RADIUS,                        battle_config.kd_WL_RADIUS,                        battle_config.kdw_WL_RADIUS))                        { sd->spamcount_WL_RADIUS = sd->k_tick_c; return 0; }                        sd->spamcount_WL_RADIUS = 0;                        sd->spamtick_WL_RADIUS = tick + sd->kdelay;                        break;
+			case WL_STASIS:                        if (k_tick_check(sd, sd->spamtick_WL_STASIS,                        sd->spamcount_WL_STASIS,                        battle_config.kd_WL_STASIS,                        battle_config.kdw_WL_STASIS))                        { sd->spamcount_WL_STASIS = sd->k_tick_c; return 0; }                        sd->spamcount_WL_STASIS = 0;                        sd->spamtick_WL_STASIS = tick + sd->kdelay;                        break;
+			case WL_DRAINLIFE:                     if (k_tick_check(sd, sd->spamtick_WL_DRAINLIFE,                     sd->spamcount_WL_DRAINLIFE,                     battle_config.kd_WL_DRAINLIFE,                     battle_config.kdw_WL_DRAINLIFE))                     { sd->spamcount_WL_DRAINLIFE = sd->k_tick_c; return 0; }                     sd->spamcount_WL_DRAINLIFE = 0;                     sd->spamtick_WL_DRAINLIFE = tick + sd->kdelay;                     break;
+			case WL_CRIMSONROCK:                   if (k_tick_check(sd, sd->spamtick_WL_CRIMSONROCK,                   sd->spamcount_WL_CRIMSONROCK,                   battle_config.kd_WL_CRIMSONROCK,                   battle_config.kdw_WL_CRIMSONROCK))                   { sd->spamcount_WL_CRIMSONROCK = sd->k_tick_c; return 0; }                   sd->spamcount_WL_CRIMSONROCK = 0;                   sd->spamtick_WL_CRIMSONROCK = tick + sd->kdelay;                   break;
+			case WL_HELLINFERNO:                   if (k_tick_check(sd, sd->spamtick_WL_HELLINFERNO,                   sd->spamcount_WL_HELLINFERNO,                   battle_config.kd_WL_HELLINFERNO,                   battle_config.kdw_WL_HELLINFERNO))                   { sd->spamcount_WL_HELLINFERNO = sd->k_tick_c; return 0; }                   sd->spamcount_WL_HELLINFERNO = 0;                   sd->spamtick_WL_HELLINFERNO = tick + sd->kdelay;                   break;
+			case WL_COMET:                         if (k_tick_check(sd, sd->spamtick_WL_COMET,                         sd->spamcount_WL_COMET,                         battle_config.kd_WL_COMET,                         battle_config.kdw_WL_COMET))                         { sd->spamcount_WL_COMET = sd->k_tick_c; return 0; }                         sd->spamcount_WL_COMET = 0;                         sd->spamtick_WL_COMET = tick + sd->kdelay;                         break;
+			case WL_CHAINLIGHTNING:                if (k_tick_check(sd, sd->spamtick_WL_CHAINLIGHTNING,                sd->spamcount_WL_CHAINLIGHTNING,                battle_config.kd_WL_CHAINLIGHTNING,                battle_config.kdw_WL_CHAINLIGHTNING))                { sd->spamcount_WL_CHAINLIGHTNING = sd->k_tick_c; return 0; }                sd->spamcount_WL_CHAINLIGHTNING = 0;                sd->spamtick_WL_CHAINLIGHTNING = tick + sd->kdelay;                break;
+			case WL_EARTHSTRAIN:                   if (k_tick_check(sd, sd->spamtick_WL_EARTHSTRAIN,                   sd->spamcount_WL_EARTHSTRAIN,                   battle_config.kd_WL_EARTHSTRAIN,                   battle_config.kdw_WL_EARTHSTRAIN))                   { sd->spamcount_WL_EARTHSTRAIN = sd->k_tick_c; return 0; }                   sd->spamcount_WL_EARTHSTRAIN = 0;                   sd->spamtick_WL_EARTHSTRAIN = tick + sd->kdelay;                   break;
+			case WL_TETRAVORTEX:                   if (k_tick_check(sd, sd->spamtick_WL_TETRAVORTEX,                   sd->spamcount_WL_TETRAVORTEX,                   battle_config.kd_WL_TETRAVORTEX,                   battle_config.kdw_WL_TETRAVORTEX))                   { sd->spamcount_WL_TETRAVORTEX = sd->k_tick_c; return 0; }                   sd->spamcount_WL_TETRAVORTEX = 0;                   sd->spamtick_WL_TETRAVORTEX = tick + sd->kdelay;                   break;
+			case WL_RELEASE:                       if (k_tick_check(sd, sd->spamtick_WL_RELEASE,                       sd->spamcount_WL_RELEASE,                       battle_config.kd_WL_RELEASE,                       battle_config.kdw_WL_RELEASE))                       { sd->spamcount_WL_RELEASE = sd->k_tick_c; return 0; }                       sd->spamcount_WL_RELEASE = 0;                       sd->spamtick_WL_RELEASE = tick + sd->kdelay;                       break;
+			case WL_READING_SB:                    if (k_tick_check(sd, sd->spamtick_WL_READING_SB,                    sd->spamcount_WL_READING_SB,                    battle_config.kd_WL_READING_SB,                    battle_config.kdw_WL_READING_SB))                    { sd->spamcount_WL_READING_SB = sd->k_tick_c; return 0; }                    sd->spamcount_WL_READING_SB = 0;                    sd->spamtick_WL_READING_SB = tick + sd->kdelay;                    break;
+			case WL_FREEZE_SP:                     if (k_tick_check(sd, sd->spamtick_WL_FREEZE_SP,                     sd->spamcount_WL_FREEZE_SP,                     battle_config.kd_WL_FREEZE_SP,                     battle_config.kdw_WL_FREEZE_SP))                     { sd->spamcount_WL_FREEZE_SP = sd->k_tick_c; return 0; }                     sd->spamcount_WL_FREEZE_SP = 0;                     sd->spamtick_WL_FREEZE_SP = tick + sd->kdelay;                     break;
+			case RA_ARROWSTORM:                    if (k_tick_check(sd, sd->spamtick_RA_ARROWSTORM,                    sd->spamcount_RA_ARROWSTORM,                    battle_config.kd_RA_ARROWSTORM,                    battle_config.kdw_RA_ARROWSTORM))                    { sd->spamcount_RA_ARROWSTORM = sd->k_tick_c; return 0; }                    sd->spamcount_RA_ARROWSTORM = 0;                    sd->spamtick_RA_ARROWSTORM = tick + sd->kdelay;                    break;
+			case RA_AIMEDBOLT:                     if (k_tick_check(sd, sd->spamtick_RA_AIMEDBOLT,                     sd->spamcount_RA_AIMEDBOLT,                     battle_config.kd_RA_AIMEDBOLT,                     battle_config.kdw_RA_AIMEDBOLT))                     { sd->spamcount_RA_AIMEDBOLT = sd->k_tick_c; return 0; }                     sd->spamcount_RA_AIMEDBOLT = 0;                     sd->spamtick_RA_AIMEDBOLT = tick + sd->kdelay;                     break;
+			case RA_WUGSTRIKE:                     if (k_tick_check(sd, sd->spamtick_RA_WUGSTRIKE,                     sd->spamcount_RA_WUGSTRIKE,                     battle_config.kd_RA_WUGSTRIKE,                     battle_config.kdw_RA_WUGSTRIKE))                     { sd->spamcount_RA_WUGSTRIKE = sd->k_tick_c; return 0; }                     sd->spamcount_RA_WUGSTRIKE = 0;                     sd->spamtick_RA_WUGSTRIKE = tick + sd->kdelay;                     break;
+			case RA_WUGBITE:                       if (k_tick_check(sd, sd->spamtick_RA_WUGBITE,                       sd->spamcount_RA_WUGBITE,                       battle_config.kd_RA_WUGBITE,                       battle_config.kdw_RA_WUGBITE))                       { sd->spamcount_RA_WUGBITE = sd->k_tick_c; return 0; }                       sd->spamcount_RA_WUGBITE = 0;                       sd->spamtick_RA_WUGBITE = tick + sd->kdelay;                       break;
+			case NC_BOOSTKNUCKLE:                  if (k_tick_check(sd, sd->spamtick_NC_BOOSTKNUCKLE,                  sd->spamcount_NC_BOOSTKNUCKLE,                  battle_config.kd_NC_BOOSTKNUCKLE,                  battle_config.kdw_NC_BOOSTKNUCKLE))                  { sd->spamcount_NC_BOOSTKNUCKLE = sd->k_tick_c; return 0; }                  sd->spamcount_NC_BOOSTKNUCKLE = 0;                  sd->spamtick_NC_BOOSTKNUCKLE = tick + sd->kdelay;                  break;
+			case NC_PILEBUNKER:                    if (k_tick_check(sd, sd->spamtick_NC_PILEBUNKER,                    sd->spamcount_NC_PILEBUNKER,                    battle_config.kd_NC_PILEBUNKER,                    battle_config.kdw_NC_PILEBUNKER))                    { sd->spamcount_NC_PILEBUNKER = sd->k_tick_c; return 0; }                    sd->spamcount_NC_PILEBUNKER = 0;                    sd->spamtick_NC_PILEBUNKER = tick + sd->kdelay;                    break;
+			case NC_VULCANARM:                     if (k_tick_check(sd, sd->spamtick_NC_VULCANARM,                     sd->spamcount_NC_VULCANARM,                     battle_config.kd_NC_VULCANARM,                     battle_config.kdw_NC_VULCANARM))                     { sd->spamcount_NC_VULCANARM = sd->k_tick_c; return 0; }                     sd->spamcount_NC_VULCANARM = 0;                     sd->spamtick_NC_VULCANARM = tick + sd->kdelay;                     break;
+			case NC_FLAMELAUNCHER:                 if (k_tick_check(sd, sd->spamtick_NC_FLAMELAUNCHER,                 sd->spamcount_NC_FLAMELAUNCHER,                 battle_config.kd_NC_FLAMELAUNCHER,                 battle_config.kdw_NC_FLAMELAUNCHER))                 { sd->spamcount_NC_FLAMELAUNCHER = sd->k_tick_c; return 0; }                 sd->spamcount_NC_FLAMELAUNCHER = 0;                 sd->spamtick_NC_FLAMELAUNCHER = tick + sd->kdelay;                 break;
+			case NC_COLDSLOWER:                    if (k_tick_check(sd, sd->spamtick_NC_COLDSLOWER,                    sd->spamcount_NC_COLDSLOWER,                    battle_config.kd_NC_COLDSLOWER,                    battle_config.kdw_NC_COLDSLOWER))                    { sd->spamcount_NC_COLDSLOWER = sd->k_tick_c; return 0; }                    sd->spamcount_NC_COLDSLOWER = 0;                    sd->spamtick_NC_COLDSLOWER = tick + sd->kdelay;                    break;
+			case NC_ARMSCANNON:                    if (k_tick_check(sd, sd->spamtick_NC_ARMSCANNON,                    sd->spamcount_NC_ARMSCANNON,                    battle_config.kd_NC_ARMSCANNON,                    battle_config.kdw_NC_ARMSCANNON))                    { sd->spamcount_NC_ARMSCANNON = sd->k_tick_c; return 0; }                    sd->spamcount_NC_ARMSCANNON = 0;                    sd->spamtick_NC_ARMSCANNON = tick + sd->kdelay;                    break;
+			case NC_ACCELERATION:                  if (k_tick_check(sd, sd->spamtick_NC_ACCELERATION,                  sd->spamcount_NC_ACCELERATION,                  battle_config.kd_NC_ACCELERATION,                  battle_config.kdw_NC_ACCELERATION))                  { sd->spamcount_NC_ACCELERATION = sd->k_tick_c; return 0; }                  sd->spamcount_NC_ACCELERATION = 0;                  sd->spamtick_NC_ACCELERATION = tick + sd->kdelay;                  break;
+			case NC_F_SIDESLIDE:                   if (k_tick_check(sd, sd->spamtick_NC_F_SIDESLIDE,                   sd->spamcount_NC_F_SIDESLIDE,                   battle_config.kd_NC_F_SIDESLIDE,                   battle_config.kdw_NC_F_SIDESLIDE))                   { sd->spamcount_NC_F_SIDESLIDE = sd->k_tick_c; return 0; }                   sd->spamcount_NC_F_SIDESLIDE = 0;                   sd->spamtick_NC_F_SIDESLIDE = tick + sd->kdelay;                   break;
+			case NC_B_SIDESLIDE:                   if (k_tick_check(sd, sd->spamtick_NC_B_SIDESLIDE,                   sd->spamcount_NC_B_SIDESLIDE,                   battle_config.kd_NC_B_SIDESLIDE,                   battle_config.kdw_NC_B_SIDESLIDE))                   { sd->spamcount_NC_B_SIDESLIDE = sd->k_tick_c; return 0; }                   sd->spamcount_NC_B_SIDESLIDE = 0;                   sd->spamtick_NC_B_SIDESLIDE = tick + sd->kdelay;                   break;
+			case NC_MAINFRAME:                     if (k_tick_check(sd, sd->spamtick_NC_MAINFRAME,                     sd->spamcount_NC_MAINFRAME,                     battle_config.kd_NC_MAINFRAME,                     battle_config.kdw_NC_MAINFRAME))                     { sd->spamcount_NC_MAINFRAME = sd->k_tick_c; return 0; }                     sd->spamcount_NC_MAINFRAME = 0;                     sd->spamtick_NC_MAINFRAME = tick + sd->kdelay;                     break;
+			case NC_SHAPESHIFT:                    if (k_tick_check(sd, sd->spamtick_NC_SHAPESHIFT,                    sd->spamcount_NC_SHAPESHIFT,                    battle_config.kd_NC_SHAPESHIFT,                    battle_config.kdw_NC_SHAPESHIFT))                    { sd->spamcount_NC_SHAPESHIFT = sd->k_tick_c; return 0; }                    sd->spamcount_NC_SHAPESHIFT = 0;                    sd->spamtick_NC_SHAPESHIFT = tick + sd->kdelay;                    break;
+			case NC_INFRAREDSCAN:                  if (k_tick_check(sd, sd->spamtick_NC_INFRAREDSCAN,                  sd->spamcount_NC_INFRAREDSCAN,                  battle_config.kd_NC_INFRAREDSCAN,                  battle_config.kdw_NC_INFRAREDSCAN))                  { sd->spamcount_NC_INFRAREDSCAN = sd->k_tick_c; return 0; }                  sd->spamcount_NC_INFRAREDSCAN = 0;                  sd->spamtick_NC_INFRAREDSCAN = tick + sd->kdelay;                  break;
+			case NC_ANALYZE:                       if (k_tick_check(sd, sd->spamtick_NC_ANALYZE,                       sd->spamcount_NC_ANALYZE,                       battle_config.kd_NC_ANALYZE,                       battle_config.kdw_NC_ANALYZE))                       { sd->spamcount_NC_ANALYZE = sd->k_tick_c; return 0; }                       sd->spamcount_NC_ANALYZE = 0;                       sd->spamtick_NC_ANALYZE = tick + sd->kdelay;                       break;
+			case NC_MAGNETICFIELD:                 if (k_tick_check(sd, sd->spamtick_NC_MAGNETICFIELD,                 sd->spamcount_NC_MAGNETICFIELD,                 battle_config.kd_NC_MAGNETICFIELD,                 battle_config.kdw_NC_MAGNETICFIELD))                 { sd->spamcount_NC_MAGNETICFIELD = sd->k_tick_c; return 0; }                 sd->spamcount_NC_MAGNETICFIELD = 0;                 sd->spamtick_NC_MAGNETICFIELD = tick + sd->kdelay;                 break;
+			case NC_NEUTRALBARRIER:                if (k_tick_check(sd, sd->spamtick_NC_NEUTRALBARRIER,                sd->spamcount_NC_NEUTRALBARRIER,                battle_config.kd_NC_NEUTRALBARRIER,                battle_config.kdw_NC_NEUTRALBARRIER))                { sd->spamcount_NC_NEUTRALBARRIER = sd->k_tick_c; return 0; }                sd->spamcount_NC_NEUTRALBARRIER = 0;                sd->spamtick_NC_NEUTRALBARRIER = tick + sd->kdelay;                break;
+			case NC_STEALTHFIELD:                  if (k_tick_check(sd, sd->spamtick_NC_STEALTHFIELD,                  sd->spamcount_NC_STEALTHFIELD,                  battle_config.kd_NC_STEALTHFIELD,                  battle_config.kdw_NC_STEALTHFIELD))                  { sd->spamcount_NC_STEALTHFIELD = sd->k_tick_c; return 0; }                  sd->spamcount_NC_STEALTHFIELD = 0;                  sd->spamtick_NC_STEALTHFIELD = tick + sd->kdelay;                  break;
+			case NC_AXEBOOMERANG:                  if (k_tick_check(sd, sd->spamtick_NC_AXEBOOMERANG,                  sd->spamcount_NC_AXEBOOMERANG,                  battle_config.kd_NC_AXEBOOMERANG,                  battle_config.kdw_NC_AXEBOOMERANG))                  { sd->spamcount_NC_AXEBOOMERANG = sd->k_tick_c; return 0; }                  sd->spamcount_NC_AXEBOOMERANG = 0;                  sd->spamtick_NC_AXEBOOMERANG = tick + sd->kdelay;                  break;
+			case NC_POWERSWING:                    if (k_tick_check(sd, sd->spamtick_NC_POWERSWING,                    sd->spamcount_NC_POWERSWING,                    battle_config.kd_NC_POWERSWING,                    battle_config.kdw_NC_POWERSWING))                    { sd->spamcount_NC_POWERSWING = sd->k_tick_c; return 0; }                    sd->spamcount_NC_POWERSWING = 0;                    sd->spamtick_NC_POWERSWING = tick + sd->kdelay;                    break;
+			case NC_AXETORNADO:                    if (k_tick_check(sd, sd->spamtick_NC_AXETORNADO,                    sd->spamcount_NC_AXETORNADO,                    battle_config.kd_NC_AXETORNADO,                    battle_config.kdw_NC_AXETORNADO))                    { sd->spamcount_NC_AXETORNADO = sd->k_tick_c; return 0; }                    sd->spamcount_NC_AXETORNADO = 0;                    sd->spamtick_NC_AXETORNADO = tick + sd->kdelay;                    break;
+			case NC_SILVERSNIPER:                  if (k_tick_check(sd, sd->spamtick_NC_SILVERSNIPER,                  sd->spamcount_NC_SILVERSNIPER,                  battle_config.kd_NC_SILVERSNIPER,                  battle_config.kdw_NC_SILVERSNIPER))                  { sd->spamcount_NC_SILVERSNIPER = sd->k_tick_c; return 0; }                  sd->spamcount_NC_SILVERSNIPER = 0;                  sd->spamtick_NC_SILVERSNIPER = tick + sd->kdelay;                  break;
+			case NC_MAGICDECOY:                    if (k_tick_check(sd, sd->spamtick_NC_MAGICDECOY,                    sd->spamcount_NC_MAGICDECOY,                    battle_config.kd_NC_MAGICDECOY,                    battle_config.kdw_NC_MAGICDECOY))                    { sd->spamcount_NC_MAGICDECOY = sd->k_tick_c; return 0; }                    sd->spamcount_NC_MAGICDECOY = 0;                    sd->spamtick_NC_MAGICDECOY = tick + sd->kdelay;                    break;
+			case NC_DISJOINT:                      if (k_tick_check(sd, sd->spamtick_NC_DISJOINT,                      sd->spamcount_NC_DISJOINT,                      battle_config.kd_NC_DISJOINT,                      battle_config.kdw_NC_DISJOINT))                      { sd->spamcount_NC_DISJOINT = sd->k_tick_c; return 0; }                      sd->spamcount_NC_DISJOINT = 0;                      sd->spamtick_NC_DISJOINT = tick + sd->kdelay;                      break;
+			case SC_FATALMENACE:                   if (k_tick_check(sd, sd->spamtick_SC_FATALMENACE,                   sd->spamcount_SC_FATALMENACE,                   battle_config.kd_SC_FATALMENACE,                   battle_config.kdw_SC_FATALMENACE))                   { sd->spamcount_SC_FATALMENACE = sd->k_tick_c; return 0; }                   sd->spamcount_SC_FATALMENACE = 0;                   sd->spamtick_SC_FATALMENACE = tick + sd->kdelay;                   break;
+			case SC_TRIANGLESHOT:                  if (k_tick_check(sd, sd->spamtick_SC_TRIANGLESHOT,                  sd->spamcount_SC_TRIANGLESHOT,                  battle_config.kd_SC_TRIANGLESHOT,                  battle_config.kdw_SC_TRIANGLESHOT))                  { sd->spamcount_SC_TRIANGLESHOT = sd->k_tick_c; return 0; }                  sd->spamcount_SC_TRIANGLESHOT = 0;                  sd->spamtick_SC_TRIANGLESHOT = tick + sd->kdelay;                  break;
+			case SC_INVISIBILITY:                  if (k_tick_check(sd, sd->spamtick_SC_INVISIBILITY,                  sd->spamcount_SC_INVISIBILITY,                  battle_config.kd_SC_INVISIBILITY,                  battle_config.kdw_SC_INVISIBILITY))                  { sd->spamcount_SC_INVISIBILITY = sd->k_tick_c; return 0; }                  sd->spamcount_SC_INVISIBILITY = 0;                  sd->spamtick_SC_INVISIBILITY = tick + sd->kdelay;                  break;
+			case SC_ENERVATION:                    if (k_tick_check(sd, sd->spamtick_SC_ENERVATION,                    sd->spamcount_SC_ENERVATION,                    battle_config.kd_SC_ENERVATION,                    battle_config.kdw_SC_ENERVATION))                    { sd->spamcount_SC_ENERVATION = sd->k_tick_c; return 0; }                    sd->spamcount_SC_ENERVATION = 0;                    sd->spamtick_SC_ENERVATION = tick + sd->kdelay;                    break;
+			case SC_GROOMY:                        if (k_tick_check(sd, sd->spamtick_SC_GROOMY,                        sd->spamcount_SC_GROOMY,                        battle_config.kd_SC_GROOMY,                        battle_config.kdw_SC_GROOMY))                        { sd->spamcount_SC_GROOMY = sd->k_tick_c; return 0; }                        sd->spamcount_SC_GROOMY = 0;                        sd->spamtick_SC_GROOMY = tick + sd->kdelay;                        break;
+			case SC_IGNORANCE:                     if (k_tick_check(sd, sd->spamtick_SC_IGNORANCE,                     sd->spamcount_SC_IGNORANCE,                     battle_config.kd_SC_IGNORANCE,                     battle_config.kdw_SC_IGNORANCE))                     { sd->spamcount_SC_IGNORANCE = sd->k_tick_c; return 0; }                     sd->spamcount_SC_IGNORANCE = 0;                     sd->spamtick_SC_IGNORANCE = tick + sd->kdelay;                     break;
+			case SC_LAZINESS:                      if (k_tick_check(sd, sd->spamtick_SC_LAZINESS,                      sd->spamcount_SC_LAZINESS,                      battle_config.kd_SC_LAZINESS,                      battle_config.kdw_SC_LAZINESS))                      { sd->spamcount_SC_LAZINESS = sd->k_tick_c; return 0; }                      sd->spamcount_SC_LAZINESS = 0;                      sd->spamtick_SC_LAZINESS = tick + sd->kdelay;                      break;
+			case SC_UNLUCKY:                       if (k_tick_check(sd, sd->spamtick_SC_UNLUCKY,                       sd->spamcount_SC_UNLUCKY,                       battle_config.kd_SC_UNLUCKY,                       battle_config.kdw_SC_UNLUCKY))                       { sd->spamcount_SC_UNLUCKY = sd->k_tick_c; return 0; }                       sd->spamcount_SC_UNLUCKY = 0;                       sd->spamtick_SC_UNLUCKY = tick + sd->kdelay;                       break;
+			case SC_WEAKNESS:                      if (k_tick_check(sd, sd->spamtick_SC_WEAKNESS,                      sd->spamcount_SC_WEAKNESS,                      battle_config.kd_SC_WEAKNESS,                      battle_config.kdw_SC_WEAKNESS))                      { sd->spamcount_SC_WEAKNESS = sd->k_tick_c; return 0; }                      sd->spamcount_SC_WEAKNESS = 0;                      sd->spamtick_SC_WEAKNESS = tick + sd->kdelay;                      break;
+			case SC_STRIPACCESSARY:                if (k_tick_check(sd, sd->spamtick_SC_STRIPACCESSARY,                sd->spamcount_SC_STRIPACCESSARY,                battle_config.kd_SC_STRIPACCESSARY,                battle_config.kdw_SC_STRIPACCESSARY))                { sd->spamcount_SC_STRIPACCESSARY = sd->k_tick_c; return 0; }                sd->spamcount_SC_STRIPACCESSARY = 0;                sd->spamtick_SC_STRIPACCESSARY = tick + sd->kdelay;                break;
+			case SC_MANHOLE:                       if (k_tick_check(sd, sd->spamtick_SC_MANHOLE,                       sd->spamcount_SC_MANHOLE,                       battle_config.kd_SC_MANHOLE,                       battle_config.kdw_SC_MANHOLE))                       { sd->spamcount_SC_MANHOLE = sd->k_tick_c; return 0; }                       sd->spamcount_SC_MANHOLE = 0;                       sd->spamtick_SC_MANHOLE = tick + sd->kdelay;                       break;
+			case SC_DIMENSIONDOOR:                 if (k_tick_check(sd, sd->spamtick_SC_DIMENSIONDOOR,                 sd->spamcount_SC_DIMENSIONDOOR,                 battle_config.kd_SC_DIMENSIONDOOR,                 battle_config.kdw_SC_DIMENSIONDOOR))                 { sd->spamcount_SC_DIMENSIONDOOR = sd->k_tick_c; return 0; }                 sd->spamcount_SC_DIMENSIONDOOR = 0;                 sd->spamtick_SC_DIMENSIONDOOR = tick + sd->kdelay;                 break;
+			case SC_CHAOSPANIC:                    if (k_tick_check(sd, sd->spamtick_SC_CHAOSPANIC,                    sd->spamcount_SC_CHAOSPANIC,                    battle_config.kd_SC_CHAOSPANIC,                    battle_config.kdw_SC_CHAOSPANIC))                    { sd->spamcount_SC_CHAOSPANIC = sd->k_tick_c; return 0; }                    sd->spamcount_SC_CHAOSPANIC = 0;                    sd->spamtick_SC_CHAOSPANIC = tick + sd->kdelay;                    break;
+			case SC_MAELSTROM:                     if (k_tick_check(sd, sd->spamtick_SC_MAELSTROM,                     sd->spamcount_SC_MAELSTROM,                     battle_config.kd_SC_MAELSTROM,                     battle_config.kdw_SC_MAELSTROM))                     { sd->spamcount_SC_MAELSTROM = sd->k_tick_c; return 0; }                     sd->spamcount_SC_MAELSTROM = 0;                     sd->spamtick_SC_MAELSTROM = tick + sd->kdelay;                     break;
+			case SC_BLOODYLUST:                    if (k_tick_check(sd, sd->spamtick_SC_BLOODYLUST,                    sd->spamcount_SC_BLOODYLUST,                    battle_config.kd_SC_BLOODYLUST,                    battle_config.kdw_SC_BLOODYLUST))                    { sd->spamcount_SC_BLOODYLUST = sd->k_tick_c; return 0; }                    sd->spamcount_SC_BLOODYLUST = 0;                    sd->spamtick_SC_BLOODYLUST = tick + sd->kdelay;                    break;
+			case SC_FEINTBOMB:                     if (k_tick_check(sd, sd->spamtick_SC_FEINTBOMB,                     sd->spamcount_SC_FEINTBOMB,                     battle_config.kd_SC_FEINTBOMB,                     battle_config.kdw_SC_FEINTBOMB))                     { sd->spamcount_SC_FEINTBOMB = sd->k_tick_c; return 0; }                     sd->spamcount_SC_FEINTBOMB = 0;                     sd->spamtick_SC_FEINTBOMB = tick + sd->kdelay;                     break;
+			case LG_CANNONSPEAR:                   if (k_tick_check(sd, sd->spamtick_LG_CANNONSPEAR,                   sd->spamcount_LG_CANNONSPEAR,                   battle_config.kd_LG_CANNONSPEAR,                   battle_config.kdw_LG_CANNONSPEAR))                   { sd->spamcount_LG_CANNONSPEAR = sd->k_tick_c; return 0; }                   sd->spamcount_LG_CANNONSPEAR = 0;                   sd->spamtick_LG_CANNONSPEAR = tick + sd->kdelay;                   break;
+			case LG_BANISHINGPOINT:                if (k_tick_check(sd, sd->spamtick_LG_BANISHINGPOINT,                sd->spamcount_LG_BANISHINGPOINT,                battle_config.kd_LG_BANISHINGPOINT,                battle_config.kdw_LG_BANISHINGPOINT))                { sd->spamcount_LG_BANISHINGPOINT = sd->k_tick_c; return 0; }                sd->spamcount_LG_BANISHINGPOINT = 0;                sd->spamtick_LG_BANISHINGPOINT = tick + sd->kdelay;                break;
+			case LG_TRAMPLE:                       if (k_tick_check(sd, sd->spamtick_LG_TRAMPLE,                       sd->spamcount_LG_TRAMPLE,                       battle_config.kd_LG_TRAMPLE,                       battle_config.kdw_LG_TRAMPLE))                       { sd->spamcount_LG_TRAMPLE = sd->k_tick_c; return 0; }                       sd->spamcount_LG_TRAMPLE = 0;                       sd->spamtick_LG_TRAMPLE = tick + sd->kdelay;                       break;
+			case LG_PINPOINTATTACK:                if (k_tick_check(sd, sd->spamtick_LG_PINPOINTATTACK,                sd->spamcount_LG_PINPOINTATTACK,                battle_config.kd_LG_PINPOINTATTACK,                battle_config.kdw_LG_PINPOINTATTACK))                { sd->spamcount_LG_PINPOINTATTACK = sd->k_tick_c; return 0; }                sd->spamcount_LG_PINPOINTATTACK = 0;                sd->spamtick_LG_PINPOINTATTACK = tick + sd->kdelay;                break;
+			case LG_RAGEBURST:                     if (k_tick_check(sd, sd->spamtick_LG_RAGEBURST,                     sd->spamcount_LG_RAGEBURST,                     battle_config.kd_LG_RAGEBURST,                     battle_config.kdw_LG_RAGEBURST))                     { sd->spamcount_LG_RAGEBURST = sd->k_tick_c; return 0; }                     sd->spamcount_LG_RAGEBURST = 0;                     sd->spamtick_LG_RAGEBURST = tick + sd->kdelay;                     break;
+			case LG_EXEEDBREAK:                    if (k_tick_check(sd, sd->spamtick_LG_EXEEDBREAK,                    sd->spamcount_LG_EXEEDBREAK,                    battle_config.kd_LG_EXEEDBREAK,                    battle_config.kdw_LG_EXEEDBREAK))                    { sd->spamcount_LG_EXEEDBREAK = sd->k_tick_c; return 0; }                    sd->spamcount_LG_EXEEDBREAK = 0;                    sd->spamtick_LG_EXEEDBREAK = tick + sd->kdelay;                    break;
+			case LG_OVERBRAND:                     if (k_tick_check(sd, sd->spamtick_LG_OVERBRAND,                     sd->spamcount_LG_OVERBRAND,                     battle_config.kd_LG_OVERBRAND,                     battle_config.kdw_LG_OVERBRAND))                     { sd->spamcount_LG_OVERBRAND = sd->k_tick_c; return 0; }                     sd->spamcount_LG_OVERBRAND = 0;                     sd->spamtick_LG_OVERBRAND = tick + sd->kdelay;                     break;
+			case LG_BANDING:                       if (k_tick_check(sd, sd->spamtick_LG_BANDING,                       sd->spamcount_LG_BANDING,                       battle_config.kd_LG_BANDING,                       battle_config.kdw_LG_BANDING))                       { sd->spamcount_LG_BANDING = sd->k_tick_c; return 0; }                       sd->spamcount_LG_BANDING = 0;                       sd->spamtick_LG_BANDING = tick + sd->kdelay;                       break;
+			case LG_MOONSLASHER:                   if (k_tick_check(sd, sd->spamtick_LG_MOONSLASHER,                   sd->spamcount_LG_MOONSLASHER,                   battle_config.kd_LG_MOONSLASHER,                   battle_config.kdw_LG_MOONSLASHER))                   { sd->spamcount_LG_MOONSLASHER = sd->k_tick_c; return 0; }                   sd->spamcount_LG_MOONSLASHER = 0;                   sd->spamtick_LG_MOONSLASHER = tick + sd->kdelay;                   break;
+			case LG_RAYOFGENESIS:                  if (k_tick_check(sd, sd->spamtick_LG_RAYOFGENESIS,                  sd->spamcount_LG_RAYOFGENESIS,                  battle_config.kd_LG_RAYOFGENESIS,                  battle_config.kdw_LG_RAYOFGENESIS))                  { sd->spamcount_LG_RAYOFGENESIS = sd->k_tick_c; return 0; }                  sd->spamcount_LG_RAYOFGENESIS = 0;                  sd->spamtick_LG_RAYOFGENESIS = tick + sd->kdelay;                  break;
+			case LG_PIETY:                         if (k_tick_check(sd, sd->spamtick_LG_PIETY,                         sd->spamcount_LG_PIETY,                         battle_config.kd_LG_PIETY,                         battle_config.kdw_LG_PIETY))                         { sd->spamcount_LG_PIETY = sd->k_tick_c; return 0; }                         sd->spamcount_LG_PIETY = 0;                         sd->spamtick_LG_PIETY = tick + sd->kdelay;                         break;
+			case LG_EARTHDRIVE:                    if (k_tick_check(sd, sd->spamtick_LG_EARTHDRIVE,                    sd->spamcount_LG_EARTHDRIVE,                    battle_config.kd_LG_EARTHDRIVE,                    battle_config.kdw_LG_EARTHDRIVE))                    { sd->spamcount_LG_EARTHDRIVE = sd->k_tick_c; return 0; }                    sd->spamcount_LG_EARTHDRIVE = 0;                    sd->spamtick_LG_EARTHDRIVE = tick + sd->kdelay;                    break;
+			case LG_HESPERUSLIT:                   if (k_tick_check(sd, sd->spamtick_LG_HESPERUSLIT,                   sd->spamcount_LG_HESPERUSLIT,                   battle_config.kd_LG_HESPERUSLIT,                   battle_config.kdw_LG_HESPERUSLIT))                   { sd->spamcount_LG_HESPERUSLIT = sd->k_tick_c; return 0; }                   sd->spamcount_LG_HESPERUSLIT = 0;                   sd->spamtick_LG_HESPERUSLIT = tick + sd->kdelay;                   break;
+			case SR_DRAGONCOMBO:                   if (k_tick_check(sd, sd->spamtick_SR_DRAGONCOMBO,                   sd->spamcount_SR_DRAGONCOMBO,                   battle_config.kd_SR_DRAGONCOMBO,                   battle_config.kdw_SR_DRAGONCOMBO))                   { sd->spamcount_SR_DRAGONCOMBO = sd->k_tick_c; return 0; }                   sd->spamcount_SR_DRAGONCOMBO = 0;                   sd->spamtick_SR_DRAGONCOMBO = tick + sd->kdelay;                   break;
+			case SR_SKYNETBLOW:                    if (k_tick_check(sd, sd->spamtick_SR_SKYNETBLOW,                    sd->spamcount_SR_SKYNETBLOW,                    battle_config.kd_SR_SKYNETBLOW,                    battle_config.kdw_SR_SKYNETBLOW))                    { sd->spamcount_SR_SKYNETBLOW = sd->k_tick_c; return 0; }                    sd->spamcount_SR_SKYNETBLOW = 0;                    sd->spamtick_SR_SKYNETBLOW = tick + sd->kdelay;                    break;
+			case SR_EARTHSHAKER:                   if (k_tick_check(sd, sd->spamtick_SR_EARTHSHAKER,                   sd->spamcount_SR_EARTHSHAKER,                   battle_config.kd_SR_EARTHSHAKER,                   battle_config.kdw_SR_EARTHSHAKER))                   { sd->spamcount_SR_EARTHSHAKER = sd->k_tick_c; return 0; }                   sd->spamcount_SR_EARTHSHAKER = 0;                   sd->spamtick_SR_EARTHSHAKER = tick + sd->kdelay;                   break;
+			case SR_FALLENEMPIRE:                  if (k_tick_check(sd, sd->spamtick_SR_FALLENEMPIRE,                  sd->spamcount_SR_FALLENEMPIRE,                  battle_config.kd_SR_FALLENEMPIRE,                  battle_config.kdw_SR_FALLENEMPIRE))                  { sd->spamcount_SR_FALLENEMPIRE = sd->k_tick_c; return 0; }                  sd->spamcount_SR_FALLENEMPIRE = 0;                  sd->spamtick_SR_FALLENEMPIRE = tick + sd->kdelay;                  break;
+			case SR_TIGERCANNON:                   if (k_tick_check(sd, sd->spamtick_SR_TIGERCANNON,                   sd->spamcount_SR_TIGERCANNON,                   battle_config.kd_SR_TIGERCANNON,                   battle_config.kdw_SR_TIGERCANNON))                   { sd->spamcount_SR_TIGERCANNON = sd->k_tick_c; return 0; }                   sd->spamcount_SR_TIGERCANNON = 0;                   sd->spamtick_SR_TIGERCANNON = tick + sd->kdelay;                   break;
+			case SR_HELLGATE:                      if (k_tick_check(sd, sd->spamtick_SR_HELLGATE,                      sd->spamcount_SR_HELLGATE,                      battle_config.kd_SR_HELLGATE,                      battle_config.kdw_SR_HELLGATE))                      { sd->spamcount_SR_HELLGATE = sd->k_tick_c; return 0; }                      sd->spamcount_SR_HELLGATE = 0;                      sd->spamtick_SR_HELLGATE = tick + sd->kdelay;                      break;
+			case SR_RAMPAGEBLASTER:                if (k_tick_check(sd, sd->spamtick_SR_RAMPAGEBLASTER,                sd->spamcount_SR_RAMPAGEBLASTER,                battle_config.kd_SR_RAMPAGEBLASTER,                battle_config.kdw_SR_RAMPAGEBLASTER))                { sd->spamcount_SR_RAMPAGEBLASTER = sd->k_tick_c; return 0; }                sd->spamcount_SR_RAMPAGEBLASTER = 0;                sd->spamtick_SR_RAMPAGEBLASTER = tick + sd->kdelay;                break;
+			case SR_CRESCENTELBOW:                 if (k_tick_check(sd, sd->spamtick_SR_CRESCENTELBOW,                 sd->spamcount_SR_CRESCENTELBOW,                 battle_config.kd_SR_CRESCENTELBOW,                 battle_config.kdw_SR_CRESCENTELBOW))                 { sd->spamcount_SR_CRESCENTELBOW = sd->k_tick_c; return 0; }                 sd->spamcount_SR_CRESCENTELBOW = 0;                 sd->spamtick_SR_CRESCENTELBOW = tick + sd->kdelay;                 break;
+			case SR_CURSEDCIRCLE:                  if (k_tick_check(sd, sd->spamtick_SR_CURSEDCIRCLE,                  sd->spamcount_SR_CURSEDCIRCLE,                  battle_config.kd_SR_CURSEDCIRCLE,                  battle_config.kdw_SR_CURSEDCIRCLE))                  { sd->spamcount_SR_CURSEDCIRCLE = sd->k_tick_c; return 0; }                  sd->spamcount_SR_CURSEDCIRCLE = 0;                  sd->spamtick_SR_CURSEDCIRCLE = tick + sd->kdelay;                  break;
+			case SR_LIGHTNINGWALK:                 if (k_tick_check(sd, sd->spamtick_SR_LIGHTNINGWALK,                 sd->spamcount_SR_LIGHTNINGWALK,                 battle_config.kd_SR_LIGHTNINGWALK,                 battle_config.kdw_SR_LIGHTNINGWALK))                 { sd->spamcount_SR_LIGHTNINGWALK = sd->k_tick_c; return 0; }                 sd->spamcount_SR_LIGHTNINGWALK = 0;                 sd->spamtick_SR_LIGHTNINGWALK = tick + sd->kdelay;                 break;
+			case SR_KNUCKLEARROW:                  if (k_tick_check(sd, sd->spamtick_SR_KNUCKLEARROW,                  sd->spamcount_SR_KNUCKLEARROW,                  battle_config.kd_SR_KNUCKLEARROW,                  battle_config.kdw_SR_KNUCKLEARROW))                  { sd->spamcount_SR_KNUCKLEARROW = sd->k_tick_c; return 0; }                  sd->spamcount_SR_KNUCKLEARROW = 0;                  sd->spamtick_SR_KNUCKLEARROW = tick + sd->kdelay;                  break;
+			case SR_WINDMILL:                      if (k_tick_check(sd, sd->spamtick_SR_WINDMILL,                      sd->spamcount_SR_WINDMILL,                      battle_config.kd_SR_WINDMILL,                      battle_config.kdw_SR_WINDMILL))                      { sd->spamcount_SR_WINDMILL = sd->k_tick_c; return 0; }                      sd->spamcount_SR_WINDMILL = 0;                      sd->spamtick_SR_WINDMILL = tick + sd->kdelay;                      break;
+			case SR_RAISINGDRAGON:                 if (k_tick_check(sd, sd->spamtick_SR_RAISINGDRAGON,                 sd->spamcount_SR_RAISINGDRAGON,                 battle_config.kd_SR_RAISINGDRAGON,                 battle_config.kdw_SR_RAISINGDRAGON))                 { sd->spamcount_SR_RAISINGDRAGON = sd->k_tick_c; return 0; }                 sd->spamcount_SR_RAISINGDRAGON = 0;                 sd->spamtick_SR_RAISINGDRAGON = tick + sd->kdelay;                 break;
+			case SR_GENTLETOUCH:                   if (k_tick_check(sd, sd->spamtick_SR_GENTLETOUCH,                   sd->spamcount_SR_GENTLETOUCH,                   battle_config.kd_SR_GENTLETOUCH,                   battle_config.kdw_SR_GENTLETOUCH))                   { sd->spamcount_SR_GENTLETOUCH = sd->k_tick_c; return 0; }                   sd->spamcount_SR_GENTLETOUCH = 0;                   sd->spamtick_SR_GENTLETOUCH = tick + sd->kdelay;                   break;
+			case SR_ASSIMILATEPOWER:               if (k_tick_check(sd, sd->spamtick_SR_ASSIMILATEPOWER,               sd->spamcount_SR_ASSIMILATEPOWER,               battle_config.kd_SR_ASSIMILATEPOWER,               battle_config.kdw_SR_ASSIMILATEPOWER))               { sd->spamcount_SR_ASSIMILATEPOWER = sd->k_tick_c; return 0; }               sd->spamcount_SR_ASSIMILATEPOWER = 0;               sd->spamtick_SR_ASSIMILATEPOWER = tick + sd->kdelay;               break;
+			case SR_POWERVELOCITY:                 if (k_tick_check(sd, sd->spamtick_SR_POWERVELOCITY,                 sd->spamcount_SR_POWERVELOCITY,                 battle_config.kd_SR_POWERVELOCITY,                 battle_config.kdw_SR_POWERVELOCITY))                 { sd->spamcount_SR_POWERVELOCITY = sd->k_tick_c; return 0; }                 sd->spamcount_SR_POWERVELOCITY = 0;                 sd->spamtick_SR_POWERVELOCITY = tick + sd->kdelay;                 break;
+			case SR_CRESCENTELBOW_AUTOSPELL:       if (k_tick_check(sd, sd->spamtick_SR_CRESCENTELBOW_AUTOSPELL,       sd->spamcount_SR_CRESCENTELBOW_AUTOSPELL,       battle_config.kd_SR_CRESCENTELBOW_AUTOSPELL,       battle_config.kdw_SR_CRESCENTELBOW_AUTOSPELL))       { sd->spamcount_SR_CRESCENTELBOW_AUTOSPELL = sd->k_tick_c; return 0; }       sd->spamcount_SR_CRESCENTELBOW_AUTOSPELL = 0;       sd->spamtick_SR_CRESCENTELBOW_AUTOSPELL = tick + sd->kdelay;       break;
+			case SR_GATEOFHELL:                    if (k_tick_check(sd, sd->spamtick_SR_GATEOFHELL,                    sd->spamcount_SR_GATEOFHELL,                    battle_config.kd_SR_GATEOFHELL,                    battle_config.kdw_SR_GATEOFHELL))                    { sd->spamcount_SR_GATEOFHELL = sd->k_tick_c; return 0; }                    sd->spamcount_SR_GATEOFHELL = 0;                    sd->spamtick_SR_GATEOFHELL = tick + sd->kdelay;                    break;
+			case SR_GENTLETOUCH_QUIET:             if (k_tick_check(sd, sd->spamtick_SR_GENTLETOUCH_QUIET,             sd->spamcount_SR_GENTLETOUCH_QUIET,             battle_config.kd_SR_GENTLETOUCH_QUIET,             battle_config.kdw_SR_GENTLETOUCH_QUIET))             { sd->spamcount_SR_GENTLETOUCH_QUIET = sd->k_tick_c; return 0; }             sd->spamcount_SR_GENTLETOUCH_QUIET = 0;             sd->spamtick_SR_GENTLETOUCH_QUIET = tick + sd->kdelay;             break;
+			case SR_GENTLETOUCH_CURE:              if (k_tick_check(sd, sd->spamtick_SR_GENTLETOUCH_CURE,              sd->spamcount_SR_GENTLETOUCH_CURE,              battle_config.kd_SR_GENTLETOUCH_CURE,              battle_config.kdw_SR_GENTLETOUCH_CURE))              { sd->spamcount_SR_GENTLETOUCH_CURE = sd->k_tick_c; return 0; }              sd->spamcount_SR_GENTLETOUCH_CURE = 0;              sd->spamtick_SR_GENTLETOUCH_CURE = tick + sd->kdelay;              break;
+			case SR_GENTLETOUCH_ENERGYGAIN:        if (k_tick_check(sd, sd->spamtick_SR_GENTLETOUCH_ENERGYGAIN,        sd->spamcount_SR_GENTLETOUCH_ENERGYGAIN,        battle_config.kd_SR_GENTLETOUCH_ENERGYGAIN,        battle_config.kdw_SR_GENTLETOUCH_ENERGYGAIN))        { sd->spamcount_SR_GENTLETOUCH_ENERGYGAIN = sd->k_tick_c; return 0; }        sd->spamcount_SR_GENTLETOUCH_ENERGYGAIN = 0;        sd->spamtick_SR_GENTLETOUCH_ENERGYGAIN = tick + sd->kdelay;        break;
+			case SR_GENTLETOUCH_CHANGE:            if (k_tick_check(sd, sd->spamtick_SR_GENTLETOUCH_CHANGE,            sd->spamcount_SR_GENTLETOUCH_CHANGE,            battle_config.kd_SR_GENTLETOUCH_CHANGE,            battle_config.kdw_SR_GENTLETOUCH_CHANGE))            { sd->spamcount_SR_GENTLETOUCH_CHANGE = sd->k_tick_c; return 0; }            sd->spamcount_SR_GENTLETOUCH_CHANGE = 0;            sd->spamtick_SR_GENTLETOUCH_CHANGE = tick + sd->kdelay;            break;
+			case SR_GENTLETOUCH_REVITALIZE:        if (k_tick_check(sd, sd->spamtick_SR_GENTLETOUCH_REVITALIZE,        sd->spamcount_SR_GENTLETOUCH_REVITALIZE,        battle_config.kd_SR_GENTLETOUCH_REVITALIZE,        battle_config.kdw_SR_GENTLETOUCH_REVITALIZE))        { sd->spamcount_SR_GENTLETOUCH_REVITALIZE = sd->k_tick_c; return 0; }        sd->spamcount_SR_GENTLETOUCH_REVITALIZE = 0;        sd->spamtick_SR_GENTLETOUCH_REVITALIZE = tick + sd->kdelay;        break;
+			case WA_SWING_DANCE:                   if (k_tick_check(sd, sd->spamtick_WA_SWING_DANCE,                   sd->spamcount_WA_SWING_DANCE,                   battle_config.kd_WA_SWING_DANCE,                   battle_config.kdw_WA_SWING_DANCE))                   { sd->spamcount_WA_SWING_DANCE = sd->k_tick_c; return 0; }                   sd->spamcount_WA_SWING_DANCE = 0;                   sd->spamtick_WA_SWING_DANCE = tick + sd->kdelay;                   break;
+			case WA_SYMPHONY_OF_LOVER:             if (k_tick_check(sd, sd->spamtick_WA_SYMPHONY_OF_LOVER,             sd->spamcount_WA_SYMPHONY_OF_LOVER,             battle_config.kd_WA_SYMPHONY_OF_LOVER,             battle_config.kdw_WA_SYMPHONY_OF_LOVER))             { sd->spamcount_WA_SYMPHONY_OF_LOVER = sd->k_tick_c; return 0; }             sd->spamcount_WA_SYMPHONY_OF_LOVER = 0;             sd->spamtick_WA_SYMPHONY_OF_LOVER = tick + sd->kdelay;             break;
+			case WA_MOONLIT_SERENADE:              if (k_tick_check(sd, sd->spamtick_WA_MOONLIT_SERENADE,              sd->spamcount_WA_MOONLIT_SERENADE,              battle_config.kd_WA_MOONLIT_SERENADE,              battle_config.kdw_WA_MOONLIT_SERENADE))              { sd->spamcount_WA_MOONLIT_SERENADE = sd->k_tick_c; return 0; }              sd->spamcount_WA_MOONLIT_SERENADE = 0;              sd->spamtick_WA_MOONLIT_SERENADE = tick + sd->kdelay;              break;
+			case MI_RUSH_WINDMILL:                 if (k_tick_check(sd, sd->spamtick_MI_RUSH_WINDMILL,                 sd->spamcount_MI_RUSH_WINDMILL,                 battle_config.kd_MI_RUSH_WINDMILL,                 battle_config.kdw_MI_RUSH_WINDMILL))                 { sd->spamcount_MI_RUSH_WINDMILL = sd->k_tick_c; return 0; }                 sd->spamcount_MI_RUSH_WINDMILL = 0;                 sd->spamtick_MI_RUSH_WINDMILL = tick + sd->kdelay;                 break;
+			case MI_ECHOSONG:                      if (k_tick_check(sd, sd->spamtick_MI_ECHOSONG,                      sd->spamcount_MI_ECHOSONG,                      battle_config.kd_MI_ECHOSONG,                      battle_config.kdw_MI_ECHOSONG))                      { sd->spamcount_MI_ECHOSONG = sd->k_tick_c; return 0; }                      sd->spamcount_MI_ECHOSONG = 0;                      sd->spamtick_MI_ECHOSONG = tick + sd->kdelay;                      break;
+			case MI_HARMONIZE:                     if (k_tick_check(sd, sd->spamtick_MI_HARMONIZE,                     sd->spamcount_MI_HARMONIZE,                     battle_config.kd_MI_HARMONIZE,                     battle_config.kdw_MI_HARMONIZE))                     { sd->spamcount_MI_HARMONIZE = sd->k_tick_c; return 0; }                     sd->spamcount_MI_HARMONIZE = 0;                     sd->spamtick_MI_HARMONIZE = tick + sd->kdelay;                     break;
+			case WM_LESSON:                        if (k_tick_check(sd, sd->spamtick_WM_LESSON,                        sd->spamcount_WM_LESSON,                        battle_config.kd_WM_LESSON,                        battle_config.kdw_WM_LESSON))                        { sd->spamcount_WM_LESSON = sd->k_tick_c; return 0; }                        sd->spamcount_WM_LESSON = 0;                        sd->spamtick_WM_LESSON = tick + sd->kdelay;                        break;
+			case WM_METALICSOUND:                  if (k_tick_check(sd, sd->spamtick_WM_METALICSOUND,                  sd->spamcount_WM_METALICSOUND,                  battle_config.kd_WM_METALICSOUND,                  battle_config.kdw_WM_METALICSOUND))                  { sd->spamcount_WM_METALICSOUND = sd->k_tick_c; return 0; }                  sd->spamcount_WM_METALICSOUND = 0;                  sd->spamtick_WM_METALICSOUND = tick + sd->kdelay;                  break;
+			case WM_REVERBERATION:                 if (k_tick_check(sd, sd->spamtick_WM_REVERBERATION,                 sd->spamcount_WM_REVERBERATION,                 battle_config.kd_WM_REVERBERATION,                 battle_config.kdw_WM_REVERBERATION))                 { sd->spamcount_WM_REVERBERATION = sd->k_tick_c; return 0; }                 sd->spamcount_WM_REVERBERATION = 0;                 sd->spamtick_WM_REVERBERATION = tick + sd->kdelay;                 break;
+			case WM_REVERBERATION_MELEE:           if (k_tick_check(sd, sd->spamtick_WM_REVERBERATION_MELEE,           sd->spamcount_WM_REVERBERATION_MELEE,           battle_config.kd_WM_REVERBERATION_MELEE,           battle_config.kdw_WM_REVERBERATION_MELEE))           { sd->spamcount_WM_REVERBERATION_MELEE = sd->k_tick_c; return 0; }           sd->spamcount_WM_REVERBERATION_MELEE = 0;           sd->spamtick_WM_REVERBERATION_MELEE = tick + sd->kdelay;           break;
+			case WM_REVERBERATION_MAGIC:           if (k_tick_check(sd, sd->spamtick_WM_REVERBERATION_MAGIC,           sd->spamcount_WM_REVERBERATION_MAGIC,           battle_config.kd_WM_REVERBERATION_MAGIC,           battle_config.kdw_WM_REVERBERATION_MAGIC))           { sd->spamcount_WM_REVERBERATION_MAGIC = sd->k_tick_c; return 0; }           sd->spamcount_WM_REVERBERATION_MAGIC = 0;           sd->spamtick_WM_REVERBERATION_MAGIC = tick + sd->kdelay;           break;
+			case WM_DOMINION_IMPULSE:              if (k_tick_check(sd, sd->spamtick_WM_DOMINION_IMPULSE,              sd->spamcount_WM_DOMINION_IMPULSE,              battle_config.kd_WM_DOMINION_IMPULSE,              battle_config.kdw_WM_DOMINION_IMPULSE))              { sd->spamcount_WM_DOMINION_IMPULSE = sd->k_tick_c; return 0; }              sd->spamcount_WM_DOMINION_IMPULSE = 0;              sd->spamtick_WM_DOMINION_IMPULSE = tick + sd->kdelay;              break;
+			case WM_SEVERE_RAINSTORM:              if (k_tick_check(sd, sd->spamtick_WM_SEVERE_RAINSTORM,              sd->spamcount_WM_SEVERE_RAINSTORM,              battle_config.kd_WM_SEVERE_RAINSTORM,              battle_config.kdw_WM_SEVERE_RAINSTORM))              { sd->spamcount_WM_SEVERE_RAINSTORM = sd->k_tick_c; return 0; }              sd->spamcount_WM_SEVERE_RAINSTORM = 0;              sd->spamtick_WM_SEVERE_RAINSTORM = tick + sd->kdelay;              break;
+			case WM_SEVERE_RAINSTORM_MELEE:        if (k_tick_check(sd, sd->spamtick_WM_SEVERE_RAINSTORM_MELEE,        sd->spamcount_WM_SEVERE_RAINSTORM_MELEE,        battle_config.kd_WM_SEVERE_RAINSTORM_MELEE,        battle_config.kdw_WM_SEVERE_RAINSTORM_MELEE))        { sd->spamcount_WM_SEVERE_RAINSTORM_MELEE = sd->k_tick_c; return 0; }        sd->spamcount_WM_SEVERE_RAINSTORM_MELEE = 0;        sd->spamtick_WM_SEVERE_RAINSTORM_MELEE = tick + sd->kdelay;        break;
+			case WM_POEMOFNETHERWORLD:             if (k_tick_check(sd, sd->spamtick_WM_POEMOFNETHERWORLD,             sd->spamcount_WM_POEMOFNETHERWORLD,             battle_config.kd_WM_POEMOFNETHERWORLD,             battle_config.kdw_WM_POEMOFNETHERWORLD))             { sd->spamcount_WM_POEMOFNETHERWORLD = sd->k_tick_c; return 0; }             sd->spamcount_WM_POEMOFNETHERWORLD = 0;             sd->spamtick_WM_POEMOFNETHERWORLD = tick + sd->kdelay;             break;
+			case WM_VOICEOFSIREN:                  if (k_tick_check(sd, sd->spamtick_WM_VOICEOFSIREN,                  sd->spamcount_WM_VOICEOFSIREN,                  battle_config.kd_WM_VOICEOFSIREN,                  battle_config.kdw_WM_VOICEOFSIREN))                  { sd->spamcount_WM_VOICEOFSIREN = sd->k_tick_c; return 0; }                  sd->spamcount_WM_VOICEOFSIREN = 0;                  sd->spamtick_WM_VOICEOFSIREN = tick + sd->kdelay;                  break;
+			case WM_DEADHILLHERE:                  if (k_tick_check(sd, sd->spamtick_WM_DEADHILLHERE,                  sd->spamcount_WM_DEADHILLHERE,                  battle_config.kd_WM_DEADHILLHERE,                  battle_config.kdw_WM_DEADHILLHERE))                  { sd->spamcount_WM_DEADHILLHERE = sd->k_tick_c; return 0; }                  sd->spamcount_WM_DEADHILLHERE = 0;                  sd->spamtick_WM_DEADHILLHERE = tick + sd->kdelay;                  break;
+			case WM_LULLABY_DEEPSLEEP:             if (k_tick_check(sd, sd->spamtick_WM_LULLABY_DEEPSLEEP,             sd->spamcount_WM_LULLABY_DEEPSLEEP,             battle_config.kd_WM_LULLABY_DEEPSLEEP,             battle_config.kdw_WM_LULLABY_DEEPSLEEP))             { sd->spamcount_WM_LULLABY_DEEPSLEEP = sd->k_tick_c; return 0; }             sd->spamcount_WM_LULLABY_DEEPSLEEP = 0;             sd->spamtick_WM_LULLABY_DEEPSLEEP = tick + sd->kdelay;             break;
+			case WM_SIRCLEOFNATURE:                if (k_tick_check(sd, sd->spamtick_WM_SIRCLEOFNATURE,                sd->spamcount_WM_SIRCLEOFNATURE,                battle_config.kd_WM_SIRCLEOFNATURE,                battle_config.kdw_WM_SIRCLEOFNATURE))                { sd->spamcount_WM_SIRCLEOFNATURE = sd->k_tick_c; return 0; }                sd->spamcount_WM_SIRCLEOFNATURE = 0;                sd->spamtick_WM_SIRCLEOFNATURE = tick + sd->kdelay;                break;
+			case WM_RANDOMIZESPELL:                if (k_tick_check(sd, sd->spamtick_WM_RANDOMIZESPELL,                sd->spamcount_WM_RANDOMIZESPELL,                battle_config.kd_WM_RANDOMIZESPELL,                battle_config.kdw_WM_RANDOMIZESPELL))                { sd->spamcount_WM_RANDOMIZESPELL = sd->k_tick_c; return 0; }                sd->spamcount_WM_RANDOMIZESPELL = 0;                sd->spamtick_WM_RANDOMIZESPELL = tick + sd->kdelay;                break;
+			case WM_GLOOMYDAY:                     if (k_tick_check(sd, sd->spamtick_WM_GLOOMYDAY,                     sd->spamcount_WM_GLOOMYDAY,                     battle_config.kd_WM_GLOOMYDAY,                     battle_config.kdw_WM_GLOOMYDAY))                     { sd->spamcount_WM_GLOOMYDAY = sd->k_tick_c; return 0; }                     sd->spamcount_WM_GLOOMYDAY = 0;                     sd->spamtick_WM_GLOOMYDAY = tick + sd->kdelay;                     break;
+			case WM_GREAT_ECHO:                    if (k_tick_check(sd, sd->spamtick_WM_GREAT_ECHO,                    sd->spamcount_WM_GREAT_ECHO,                    battle_config.kd_WM_GREAT_ECHO,                    battle_config.kdw_WM_GREAT_ECHO))                    { sd->spamcount_WM_GREAT_ECHO = sd->k_tick_c; return 0; }                    sd->spamcount_WM_GREAT_ECHO = 0;                    sd->spamtick_WM_GREAT_ECHO = tick + sd->kdelay;                    break;
+			case WM_SONG_OF_MANA:                  if (k_tick_check(sd, sd->spamtick_WM_SONG_OF_MANA,                  sd->spamcount_WM_SONG_OF_MANA,                  battle_config.kd_WM_SONG_OF_MANA,                  battle_config.kdw_WM_SONG_OF_MANA))                  { sd->spamcount_WM_SONG_OF_MANA = sd->k_tick_c; return 0; }                  sd->spamcount_WM_SONG_OF_MANA = 0;                  sd->spamtick_WM_SONG_OF_MANA = tick + sd->kdelay;                  break;
+			case WM_DANCE_WITH_WUG:                if (k_tick_check(sd, sd->spamtick_WM_DANCE_WITH_WUG,                sd->spamcount_WM_DANCE_WITH_WUG,                battle_config.kd_WM_DANCE_WITH_WUG,                battle_config.kdw_WM_DANCE_WITH_WUG))                { sd->spamcount_WM_DANCE_WITH_WUG = sd->k_tick_c; return 0; }                sd->spamcount_WM_DANCE_WITH_WUG = 0;                sd->spamtick_WM_DANCE_WITH_WUG = tick + sd->kdelay;                break;
+			case WM_SOUND_OF_DESTRUCTION:          if (k_tick_check(sd, sd->spamtick_WM_SOUND_OF_DESTRUCTION,          sd->spamcount_WM_SOUND_OF_DESTRUCTION,          battle_config.kd_WM_SOUND_OF_DESTRUCTION,          battle_config.kdw_WM_SOUND_OF_DESTRUCTION))          { sd->spamcount_WM_SOUND_OF_DESTRUCTION = sd->k_tick_c; return 0; }          sd->spamcount_WM_SOUND_OF_DESTRUCTION = 0;          sd->spamtick_WM_SOUND_OF_DESTRUCTION = tick + sd->kdelay;          break;
+			case WM_SATURDAY_NIGHT_FEVER:          if (k_tick_check(sd, sd->spamtick_WM_SATURDAY_NIGHT_FEVER,          sd->spamcount_WM_SATURDAY_NIGHT_FEVER,          battle_config.kd_WM_SATURDAY_NIGHT_FEVER,          battle_config.kdw_WM_SATURDAY_NIGHT_FEVER))          { sd->spamcount_WM_SATURDAY_NIGHT_FEVER = sd->k_tick_c; return 0; }          sd->spamcount_WM_SATURDAY_NIGHT_FEVER = 0;          sd->spamtick_WM_SATURDAY_NIGHT_FEVER = tick + sd->kdelay;          break;
+			case WM_LERADS_DEW:                    if (k_tick_check(sd, sd->spamtick_WM_LERADS_DEW,                    sd->spamcount_WM_LERADS_DEW,                    battle_config.kd_WM_LERADS_DEW,                    battle_config.kdw_WM_LERADS_DEW))                    { sd->spamcount_WM_LERADS_DEW = sd->k_tick_c; return 0; }                    sd->spamcount_WM_LERADS_DEW = 0;                    sd->spamtick_WM_LERADS_DEW = tick + sd->kdelay;                    break;
+			case WM_MELODYOFSINK:                  if (k_tick_check(sd, sd->spamtick_WM_MELODYOFSINK,                  sd->spamcount_WM_MELODYOFSINK,                  battle_config.kd_WM_MELODYOFSINK,                  battle_config.kdw_WM_MELODYOFSINK))                  { sd->spamcount_WM_MELODYOFSINK = sd->k_tick_c; return 0; }                  sd->spamcount_WM_MELODYOFSINK = 0;                  sd->spamtick_WM_MELODYOFSINK = tick + sd->kdelay;                  break;
+			case WM_BEYOND_OF_WARCRY:              if (k_tick_check(sd, sd->spamtick_WM_BEYOND_OF_WARCRY,              sd->spamcount_WM_BEYOND_OF_WARCRY,              battle_config.kd_WM_BEYOND_OF_WARCRY,              battle_config.kdw_WM_BEYOND_OF_WARCRY))              { sd->spamcount_WM_BEYOND_OF_WARCRY = sd->k_tick_c; return 0; }              sd->spamcount_WM_BEYOND_OF_WARCRY = 0;              sd->spamtick_WM_BEYOND_OF_WARCRY = tick + sd->kdelay;              break;
+			case WM_UNLIMITED_HUMMING_VOICE:       if (k_tick_check(sd, sd->spamtick_WM_UNLIMITED_HUMMING_VOICE,       sd->spamcount_WM_UNLIMITED_HUMMING_VOICE,       battle_config.kd_WM_UNLIMITED_HUMMING_VOICE,       battle_config.kdw_WM_UNLIMITED_HUMMING_VOICE))       { sd->spamcount_WM_UNLIMITED_HUMMING_VOICE = sd->k_tick_c; return 0; }       sd->spamcount_WM_UNLIMITED_HUMMING_VOICE = 0;       sd->spamtick_WM_UNLIMITED_HUMMING_VOICE = tick + sd->kdelay;       break;
+			case SO_FIREWALK:                      if (k_tick_check(sd, sd->spamtick_SO_FIREWALK,                      sd->spamcount_SO_FIREWALK,                      battle_config.kd_SO_FIREWALK,                      battle_config.kdw_SO_FIREWALK))                      { sd->spamcount_SO_FIREWALK = sd->k_tick_c; return 0; }                      sd->spamcount_SO_FIREWALK = 0;                      sd->spamtick_SO_FIREWALK = tick + sd->kdelay;                      break;
+			case SO_ELECTRICWALK:                  if (k_tick_check(sd, sd->spamtick_SO_ELECTRICWALK,                  sd->spamcount_SO_ELECTRICWALK,                  battle_config.kd_SO_ELECTRICWALK,                  battle_config.kdw_SO_ELECTRICWALK))                  { sd->spamcount_SO_ELECTRICWALK = sd->k_tick_c; return 0; }                  sd->spamcount_SO_ELECTRICWALK = 0;                  sd->spamtick_SO_ELECTRICWALK = tick + sd->kdelay;                  break;
+			case SO_SPELLFIST:                     if (k_tick_check(sd, sd->spamtick_SO_SPELLFIST,                     sd->spamcount_SO_SPELLFIST,                     battle_config.kd_SO_SPELLFIST,                     battle_config.kdw_SO_SPELLFIST))                     { sd->spamcount_SO_SPELLFIST = sd->k_tick_c; return 0; }                     sd->spamcount_SO_SPELLFIST = 0;                     sd->spamtick_SO_SPELLFIST = tick + sd->kdelay;                     break;
+			case SO_EARTHGRAVE:                    if (k_tick_check(sd, sd->spamtick_SO_EARTHGRAVE,                    sd->spamcount_SO_EARTHGRAVE,                    battle_config.kd_SO_EARTHGRAVE,                    battle_config.kdw_SO_EARTHGRAVE))                    { sd->spamcount_SO_EARTHGRAVE = sd->k_tick_c; return 0; }                    sd->spamcount_SO_EARTHGRAVE = 0;                    sd->spamtick_SO_EARTHGRAVE = tick + sd->kdelay;                    break;
+			case SO_DIAMONDDUST:                   if (k_tick_check(sd, sd->spamtick_SO_DIAMONDDUST,                   sd->spamcount_SO_DIAMONDDUST,                   battle_config.kd_SO_DIAMONDDUST,                   battle_config.kdw_SO_DIAMONDDUST))                   { sd->spamcount_SO_DIAMONDDUST = sd->k_tick_c; return 0; }                   sd->spamcount_SO_DIAMONDDUST = 0;                   sd->spamtick_SO_DIAMONDDUST = tick + sd->kdelay;                   break;
+			case SO_POISON_BUSTER:                 if (k_tick_check(sd, sd->spamtick_SO_POISON_BUSTER,                 sd->spamcount_SO_POISON_BUSTER,                 battle_config.kd_SO_POISON_BUSTER,                 battle_config.kdw_SO_POISON_BUSTER))                 { sd->spamcount_SO_POISON_BUSTER = sd->k_tick_c; return 0; }                 sd->spamcount_SO_POISON_BUSTER = 0;                 sd->spamtick_SO_POISON_BUSTER = tick + sd->kdelay;                 break;
+			case SO_PSYCHIC_WAVE:                  if (k_tick_check(sd, sd->spamtick_SO_PSYCHIC_WAVE,                  sd->spamcount_SO_PSYCHIC_WAVE,                  battle_config.kd_SO_PSYCHIC_WAVE,                  battle_config.kdw_SO_PSYCHIC_WAVE))                  { sd->spamcount_SO_PSYCHIC_WAVE = sd->k_tick_c; return 0; }                  sd->spamcount_SO_PSYCHIC_WAVE = 0;                  sd->spamtick_SO_PSYCHIC_WAVE = tick + sd->kdelay;                  break;
+			case SO_CLOUD_KILL:                    if (k_tick_check(sd, sd->spamtick_SO_CLOUD_KILL,                    sd->spamcount_SO_CLOUD_KILL,                    battle_config.kd_SO_CLOUD_KILL,                    battle_config.kdw_SO_CLOUD_KILL))                    { sd->spamcount_SO_CLOUD_KILL = sd->k_tick_c; return 0; }                    sd->spamcount_SO_CLOUD_KILL = 0;                    sd->spamtick_SO_CLOUD_KILL = tick + sd->kdelay;                    break;
+			case SO_STRIKING:                      if (k_tick_check(sd, sd->spamtick_SO_STRIKING,                      sd->spamcount_SO_STRIKING,                      battle_config.kd_SO_STRIKING,                      battle_config.kdw_SO_STRIKING))                      { sd->spamcount_SO_STRIKING = sd->k_tick_c; return 0; }                      sd->spamcount_SO_STRIKING = 0;                      sd->spamtick_SO_STRIKING = tick + sd->kdelay;                      break;
+			case SO_WARMER:                        if (k_tick_check(sd, sd->spamtick_SO_WARMER,                        sd->spamcount_SO_WARMER,                        battle_config.kd_SO_WARMER,                        battle_config.kdw_SO_WARMER))                        { sd->spamcount_SO_WARMER = sd->k_tick_c; return 0; }                        sd->spamcount_SO_WARMER = 0;                        sd->spamtick_SO_WARMER = tick + sd->kdelay;                        break;
+			case SO_VACUUM_EXTREME:                if (k_tick_check(sd, sd->spamtick_SO_VACUUM_EXTREME,                sd->spamcount_SO_VACUUM_EXTREME,                battle_config.kd_SO_VACUUM_EXTREME,                battle_config.kdw_SO_VACUUM_EXTREME))                { sd->spamcount_SO_VACUUM_EXTREME = sd->k_tick_c; return 0; }                sd->spamcount_SO_VACUUM_EXTREME = 0;                sd->spamtick_SO_VACUUM_EXTREME = tick + sd->kdelay;                break;
+			case SO_VARETYR_SPEAR:                 if (k_tick_check(sd, sd->spamtick_SO_VARETYR_SPEAR,                 sd->spamcount_SO_VARETYR_SPEAR,                 battle_config.kd_SO_VARETYR_SPEAR,                 battle_config.kdw_SO_VARETYR_SPEAR))                 { sd->spamcount_SO_VARETYR_SPEAR = sd->k_tick_c; return 0; }                 sd->spamcount_SO_VARETYR_SPEAR = 0;                 sd->spamtick_SO_VARETYR_SPEAR = tick + sd->kdelay;                 break;
+			case SO_ARRULLO:                       if (k_tick_check(sd, sd->spamtick_SO_ARRULLO,                       sd->spamcount_SO_ARRULLO,                       battle_config.kd_SO_ARRULLO,                       battle_config.kdw_SO_ARRULLO))                       { sd->spamcount_SO_ARRULLO = sd->k_tick_c; return 0; }                       sd->spamcount_SO_ARRULLO = 0;                       sd->spamtick_SO_ARRULLO = tick + sd->kdelay;                       break;
+			case SO_EL_CONTROL:                    if (k_tick_check(sd, sd->spamtick_SO_EL_CONTROL,                    sd->spamcount_SO_EL_CONTROL,                    battle_config.kd_SO_EL_CONTROL,                    battle_config.kdw_SO_EL_CONTROL))                    { sd->spamcount_SO_EL_CONTROL = sd->k_tick_c; return 0; }                    sd->spamcount_SO_EL_CONTROL = 0;                    sd->spamtick_SO_EL_CONTROL = tick + sd->kdelay;                    break;
+			case SO_EL_ACTION:                     if (k_tick_check(sd, sd->spamtick_SO_EL_ACTION,                     sd->spamcount_SO_EL_ACTION,                     battle_config.kd_SO_EL_ACTION,                     battle_config.kdw_SO_EL_ACTION))                     { sd->spamcount_SO_EL_ACTION = sd->k_tick_c; return 0; }                     sd->spamcount_SO_EL_ACTION = 0;                     sd->spamtick_SO_EL_ACTION = tick + sd->kdelay;                     break;
+			case SO_EL_ANALYSIS:                   if (k_tick_check(sd, sd->spamtick_SO_EL_ANALYSIS,                   sd->spamcount_SO_EL_ANALYSIS,                   battle_config.kd_SO_EL_ANALYSIS,                   battle_config.kdw_SO_EL_ANALYSIS))                   { sd->spamcount_SO_EL_ANALYSIS = sd->k_tick_c; return 0; }                   sd->spamcount_SO_EL_ANALYSIS = 0;                   sd->spamtick_SO_EL_ANALYSIS = tick + sd->kdelay;                   break;
+			case SO_EL_SYMPATHY:                   if (k_tick_check(sd, sd->spamtick_SO_EL_SYMPATHY,                   sd->spamcount_SO_EL_SYMPATHY,                   battle_config.kd_SO_EL_SYMPATHY,                   battle_config.kdw_SO_EL_SYMPATHY))                   { sd->spamcount_SO_EL_SYMPATHY = sd->k_tick_c; return 0; }                   sd->spamcount_SO_EL_SYMPATHY = 0;                   sd->spamtick_SO_EL_SYMPATHY = tick + sd->kdelay;                   break;
+			case SO_EL_CURE:                       if (k_tick_check(sd, sd->spamtick_SO_EL_CURE,                       sd->spamcount_SO_EL_CURE,                       battle_config.kd_SO_EL_CURE,                       battle_config.kdw_SO_EL_CURE))                       { sd->spamcount_SO_EL_CURE = sd->k_tick_c; return 0; }                       sd->spamcount_SO_EL_CURE = 0;                       sd->spamtick_SO_EL_CURE = tick + sd->kdelay;                       break;
+			case GN_CART_TORNADO:                  if (k_tick_check(sd, sd->spamtick_GN_CART_TORNADO,                  sd->spamcount_GN_CART_TORNADO,                  battle_config.kd_GN_CART_TORNADO,                  battle_config.kdw_GN_CART_TORNADO))                  { sd->spamcount_GN_CART_TORNADO = sd->k_tick_c; return 0; }                  sd->spamcount_GN_CART_TORNADO = 0;                  sd->spamtick_GN_CART_TORNADO = tick + sd->kdelay;                  break;
+			case GN_CARTCANNON:                    if (k_tick_check(sd, sd->spamtick_GN_CARTCANNON,                    sd->spamcount_GN_CARTCANNON,                    battle_config.kd_GN_CARTCANNON,                    battle_config.kdw_GN_CARTCANNON))                    { sd->spamcount_GN_CARTCANNON = sd->k_tick_c; return 0; }                    sd->spamcount_GN_CARTCANNON = 0;                    sd->spamtick_GN_CARTCANNON = tick + sd->kdelay;                    break;
+			case GN_THORNS_TRAP:                   if (k_tick_check(sd, sd->spamtick_GN_THORNS_TRAP,                   sd->spamcount_GN_THORNS_TRAP,                   battle_config.kd_GN_THORNS_TRAP,                   battle_config.kdw_GN_THORNS_TRAP))                   { sd->spamcount_GN_THORNS_TRAP = sd->k_tick_c; return 0; }                   sd->spamcount_GN_THORNS_TRAP = 0;                   sd->spamtick_GN_THORNS_TRAP = tick + sd->kdelay;                   break;
+			case GN_BLOOD_SUCKER:                  if (k_tick_check(sd, sd->spamtick_GN_BLOOD_SUCKER,                  sd->spamcount_GN_BLOOD_SUCKER,                  battle_config.kd_GN_BLOOD_SUCKER,                  battle_config.kdw_GN_BLOOD_SUCKER))                  { sd->spamcount_GN_BLOOD_SUCKER = sd->k_tick_c; return 0; }                  sd->spamcount_GN_BLOOD_SUCKER = 0;                  sd->spamtick_GN_BLOOD_SUCKER = tick + sd->kdelay;                  break;
+			case GN_SPORE_EXPLOSION:               if (k_tick_check(sd, sd->spamtick_GN_SPORE_EXPLOSION,               sd->spamcount_GN_SPORE_EXPLOSION,               battle_config.kd_GN_SPORE_EXPLOSION,               battle_config.kdw_GN_SPORE_EXPLOSION))               { sd->spamcount_GN_SPORE_EXPLOSION = sd->k_tick_c; return 0; }               sd->spamcount_GN_SPORE_EXPLOSION = 0;               sd->spamtick_GN_SPORE_EXPLOSION = tick + sd->kdelay;               break;
+			case GN_WALLOFTHORN:                   if (k_tick_check(sd, sd->spamtick_GN_WALLOFTHORN,                   sd->spamcount_GN_WALLOFTHORN,                   battle_config.kd_GN_WALLOFTHORN,                   battle_config.kdw_GN_WALLOFTHORN))                   { sd->spamcount_GN_WALLOFTHORN = sd->k_tick_c; return 0; }                   sd->spamcount_GN_WALLOFTHORN = 0;                   sd->spamtick_GN_WALLOFTHORN = tick + sd->kdelay;                   break;
+			case GN_CRAZYWEED:                     if (k_tick_check(sd, sd->spamtick_GN_CRAZYWEED,                     sd->spamcount_GN_CRAZYWEED,                     battle_config.kd_GN_CRAZYWEED,                     battle_config.kdw_GN_CRAZYWEED))                     { sd->spamcount_GN_CRAZYWEED = sd->k_tick_c; return 0; }                     sd->spamcount_GN_CRAZYWEED = 0;                     sd->spamtick_GN_CRAZYWEED = tick + sd->kdelay;                     break;
+			case GN_DEMONIC_FIRE:                  if (k_tick_check(sd, sd->spamtick_GN_DEMONIC_FIRE,                  sd->spamcount_GN_DEMONIC_FIRE,                  battle_config.kd_GN_DEMONIC_FIRE,                  battle_config.kdw_GN_DEMONIC_FIRE))                  { sd->spamcount_GN_DEMONIC_FIRE = sd->k_tick_c; return 0; }                  sd->spamcount_GN_DEMONIC_FIRE = 0;                  sd->spamtick_GN_DEMONIC_FIRE = tick + sd->kdelay;                  break;
+			case GN_FIRE_EXPANSION:                if (k_tick_check(sd, sd->spamtick_GN_FIRE_EXPANSION,                sd->spamcount_GN_FIRE_EXPANSION,                battle_config.kd_GN_FIRE_EXPANSION,                battle_config.kdw_GN_FIRE_EXPANSION))                { sd->spamcount_GN_FIRE_EXPANSION = sd->k_tick_c; return 0; }                sd->spamcount_GN_FIRE_EXPANSION = 0;                sd->spamtick_GN_FIRE_EXPANSION = tick + sd->kdelay;                break;
+			case GN_HELLS_PLANT:                   if (k_tick_check(sd, sd->spamtick_GN_HELLS_PLANT,                   sd->spamcount_GN_HELLS_PLANT,                   battle_config.kd_GN_HELLS_PLANT,                   battle_config.kdw_GN_HELLS_PLANT))                   { sd->spamcount_GN_HELLS_PLANT = sd->k_tick_c; return 0; }                   sd->spamcount_GN_HELLS_PLANT = 0;                   sd->spamtick_GN_HELLS_PLANT = tick + sd->kdelay;                   break;
+			case GN_MANDRAGORA:                    if (k_tick_check(sd, sd->spamtick_GN_MANDRAGORA,                    sd->spamcount_GN_MANDRAGORA,                    battle_config.kd_GN_MANDRAGORA,                    battle_config.kdw_GN_MANDRAGORA))                    { sd->spamcount_GN_MANDRAGORA = sd->k_tick_c; return 0; }                    sd->spamcount_GN_MANDRAGORA = 0;                    sd->spamtick_GN_MANDRAGORA = tick + sd->kdelay;                    break;
+			case GN_SLINGITEM:                     if (k_tick_check(sd, sd->spamtick_GN_SLINGITEM,                     sd->spamcount_GN_SLINGITEM,                     battle_config.kd_GN_SLINGITEM,                     battle_config.kdw_GN_SLINGITEM))                     { sd->spamcount_GN_SLINGITEM = sd->k_tick_c; return 0; }                     sd->spamcount_GN_SLINGITEM = 0;                     sd->spamtick_GN_SLINGITEM = tick + sd->kdelay;                     break;
+			case GN_CHANGEMATERIAL:                if (k_tick_check(sd, sd->spamtick_GN_CHANGEMATERIAL,                sd->spamcount_GN_CHANGEMATERIAL,                battle_config.kd_GN_CHANGEMATERIAL,                battle_config.kdw_GN_CHANGEMATERIAL))                { sd->spamcount_GN_CHANGEMATERIAL = sd->k_tick_c; return 0; }                sd->spamcount_GN_CHANGEMATERIAL = 0;                sd->spamtick_GN_CHANGEMATERIAL = tick + sd->kdelay;                break;
+			case AB_SECRAMENT:                     if (k_tick_check(sd, sd->spamtick_AB_SECRAMENT,                     sd->spamcount_AB_SECRAMENT,                     battle_config.kd_AB_SECRAMENT,                     battle_config.kdw_AB_SECRAMENT))                     { sd->spamcount_AB_SECRAMENT = sd->k_tick_c; return 0; }                     sd->spamcount_AB_SECRAMENT = 0;                     sd->spamtick_AB_SECRAMENT = tick + sd->kdelay;                     break;
+			case SR_HOWLINGOFLION:                 if (k_tick_check(sd, sd->spamtick_SR_HOWLINGOFLION,                 sd->spamcount_SR_HOWLINGOFLION,                 battle_config.kd_SR_HOWLINGOFLION,                 battle_config.kdw_SR_HOWLINGOFLION))                 { sd->spamcount_SR_HOWLINGOFLION = sd->k_tick_c; return 0; }                 sd->spamcount_SR_HOWLINGOFLION = 0;                 sd->spamtick_SR_HOWLINGOFLION = tick + sd->kdelay;                 break;
+			case SR_RIDEINLIGHTNING:               if (k_tick_check(sd, sd->spamtick_SR_RIDEINLIGHTNING,               sd->spamcount_SR_RIDEINLIGHTNING,               battle_config.kd_SR_RIDEINLIGHTNING,               battle_config.kdw_SR_RIDEINLIGHTNING))               { sd->spamcount_SR_RIDEINLIGHTNING = sd->k_tick_c; return 0; }               sd->spamcount_SR_RIDEINLIGHTNING = 0;               sd->spamtick_SR_RIDEINLIGHTNING = tick + sd->kdelay;               break;
+			case LG_OVERBRAND_BRANDISH:            if (k_tick_check(sd, sd->spamtick_LG_OVERBRAND_BRANDISH,            sd->spamcount_LG_OVERBRAND_BRANDISH,            battle_config.kd_LG_OVERBRAND_BRANDISH,            battle_config.kdw_LG_OVERBRAND_BRANDISH))            { sd->spamcount_LG_OVERBRAND_BRANDISH = sd->k_tick_c; return 0; }            sd->spamcount_LG_OVERBRAND_BRANDISH = 0;            sd->spamtick_LG_OVERBRAND_BRANDISH = tick + sd->kdelay;            break;
+			case RL_GLITTERING_GREED:              if (k_tick_check(sd, sd->spamtick_RL_GLITTERING_GREED,              sd->spamcount_RL_GLITTERING_GREED,              battle_config.kd_RL_GLITTERING_GREED,              battle_config.kdw_RL_GLITTERING_GREED))              { sd->spamcount_RL_GLITTERING_GREED = sd->k_tick_c; return 0; }              sd->spamcount_RL_GLITTERING_GREED = 0;              sd->spamtick_RL_GLITTERING_GREED = tick + sd->kdelay;              break;
+			case RL_RICHS_COIN:                    if (k_tick_check(sd, sd->spamtick_RL_RICHS_COIN,                    sd->spamcount_RL_RICHS_COIN,                    battle_config.kd_RL_RICHS_COIN,                    battle_config.kdw_RL_RICHS_COIN))                    { sd->spamcount_RL_RICHS_COIN = sd->k_tick_c; return 0; }                    sd->spamcount_RL_RICHS_COIN = 0;                    sd->spamtick_RL_RICHS_COIN = tick + sd->kdelay;                    break;
+			case RL_MASS_SPIRAL:                   if (k_tick_check(sd, sd->spamtick_RL_MASS_SPIRAL,                   sd->spamcount_RL_MASS_SPIRAL,                   battle_config.kd_RL_MASS_SPIRAL,                   battle_config.kdw_RL_MASS_SPIRAL))                   { sd->spamcount_RL_MASS_SPIRAL = sd->k_tick_c; return 0; }                   sd->spamcount_RL_MASS_SPIRAL = 0;                   sd->spamtick_RL_MASS_SPIRAL = tick + sd->kdelay;                   break;
+			case RL_BANISHING_BUSTER:              if (k_tick_check(sd, sd->spamtick_RL_BANISHING_BUSTER,              sd->spamcount_RL_BANISHING_BUSTER,              battle_config.kd_RL_BANISHING_BUSTER,              battle_config.kdw_RL_BANISHING_BUSTER))              { sd->spamcount_RL_BANISHING_BUSTER = sd->k_tick_c; return 0; }              sd->spamcount_RL_BANISHING_BUSTER = 0;              sd->spamtick_RL_BANISHING_BUSTER = tick + sd->kdelay;              break;
+			case RL_B_TRAP:                        if (k_tick_check(sd, sd->spamtick_RL_B_TRAP,                        sd->spamcount_RL_B_TRAP,                        battle_config.kd_RL_B_TRAP,                        battle_config.kdw_RL_B_TRAP))                        { sd->spamcount_RL_B_TRAP = sd->k_tick_c; return 0; }                        sd->spamcount_RL_B_TRAP = 0;                        sd->spamtick_RL_B_TRAP = tick + sd->kdelay;                        break;
+			case RL_S_STORM:                       if (k_tick_check(sd, sd->spamtick_RL_S_STORM,                       sd->spamcount_RL_S_STORM,                       battle_config.kd_RL_S_STORM,                       battle_config.kdw_RL_S_STORM))                       { sd->spamcount_RL_S_STORM = sd->k_tick_c; return 0; }                       sd->spamcount_RL_S_STORM = 0;                       sd->spamtick_RL_S_STORM = tick + sd->kdelay;                       break;
+			case RL_E_CHAIN:                       if (k_tick_check(sd, sd->spamtick_RL_E_CHAIN,                       sd->spamcount_RL_E_CHAIN,                       battle_config.kd_RL_E_CHAIN,                       battle_config.kdw_RL_E_CHAIN))                       { sd->spamcount_RL_E_CHAIN = sd->k_tick_c; return 0; }                       sd->spamcount_RL_E_CHAIN = 0;                       sd->spamtick_RL_E_CHAIN = tick + sd->kdelay;                       break;
+			case RL_QD_SHOT:                       if (k_tick_check(sd, sd->spamtick_RL_QD_SHOT,                       sd->spamcount_RL_QD_SHOT,                       battle_config.kd_RL_QD_SHOT,                       battle_config.kdw_RL_QD_SHOT))                       { sd->spamcount_RL_QD_SHOT = sd->k_tick_c; return 0; }                       sd->spamcount_RL_QD_SHOT = 0;                       sd->spamtick_RL_QD_SHOT = tick + sd->kdelay;                       break;
+			case RL_C_MARKER:                      if (k_tick_check(sd, sd->spamtick_RL_C_MARKER,                      sd->spamcount_RL_C_MARKER,                      battle_config.kd_RL_C_MARKER,                      battle_config.kdw_RL_C_MARKER))                      { sd->spamcount_RL_C_MARKER = sd->k_tick_c; return 0; }                      sd->spamcount_RL_C_MARKER = 0;                      sd->spamtick_RL_C_MARKER = tick + sd->kdelay;                      break;
+			case RL_FIREDANCE:                     if (k_tick_check(sd, sd->spamtick_RL_FIREDANCE,                     sd->spamcount_RL_FIREDANCE,                     battle_config.kd_RL_FIREDANCE,                     battle_config.kdw_RL_FIREDANCE))                     { sd->spamcount_RL_FIREDANCE = sd->k_tick_c; return 0; }                     sd->spamcount_RL_FIREDANCE = 0;                     sd->spamtick_RL_FIREDANCE = tick + sd->kdelay;                     break;
+			case RL_H_MINE:                        if (k_tick_check(sd, sd->spamtick_RL_H_MINE,                        sd->spamcount_RL_H_MINE,                        battle_config.kd_RL_H_MINE,                        battle_config.kdw_RL_H_MINE))                        { sd->spamcount_RL_H_MINE = sd->k_tick_c; return 0; }                        sd->spamcount_RL_H_MINE = 0;                        sd->spamtick_RL_H_MINE = tick + sd->kdelay;                        break;
+			case RL_P_ALTER:                       if (k_tick_check(sd, sd->spamtick_RL_P_ALTER,                       sd->spamcount_RL_P_ALTER,                       battle_config.kd_RL_P_ALTER,                       battle_config.kdw_RL_P_ALTER))                       { sd->spamcount_RL_P_ALTER = sd->k_tick_c; return 0; }                       sd->spamcount_RL_P_ALTER = 0;                       sd->spamtick_RL_P_ALTER = tick + sd->kdelay;                       break;
+			case RL_FALLEN_ANGEL:                  if (k_tick_check(sd, sd->spamtick_RL_FALLEN_ANGEL,                  sd->spamcount_RL_FALLEN_ANGEL,                  battle_config.kd_RL_FALLEN_ANGEL,                  battle_config.kdw_RL_FALLEN_ANGEL))                  { sd->spamcount_RL_FALLEN_ANGEL = sd->k_tick_c; return 0; }                  sd->spamcount_RL_FALLEN_ANGEL = 0;                  sd->spamtick_RL_FALLEN_ANGEL = tick + sd->kdelay;                  break;
+			case RL_R_TRIP:                        if (k_tick_check(sd, sd->spamtick_RL_R_TRIP,                        sd->spamcount_RL_R_TRIP,                        battle_config.kd_RL_R_TRIP,                        battle_config.kdw_RL_R_TRIP))                        { sd->spamcount_RL_R_TRIP = sd->k_tick_c; return 0; }                        sd->spamcount_RL_R_TRIP = 0;                        sd->spamtick_RL_R_TRIP = tick + sd->kdelay;                        break;
+			case RL_D_TAIL:                        if (k_tick_check(sd, sd->spamtick_RL_D_TAIL,                        sd->spamcount_RL_D_TAIL,                        battle_config.kd_RL_D_TAIL,                        battle_config.kdw_RL_D_TAIL))                        { sd->spamcount_RL_D_TAIL = sd->k_tick_c; return 0; }                        sd->spamcount_RL_D_TAIL = 0;                        sd->spamtick_RL_D_TAIL = tick + sd->kdelay;                        break;
+			case RL_FIRE_RAIN:                     if (k_tick_check(sd, sd->spamtick_RL_FIRE_RAIN,                     sd->spamcount_RL_FIRE_RAIN,                     battle_config.kd_RL_FIRE_RAIN,                     battle_config.kdw_RL_FIRE_RAIN))                     { sd->spamcount_RL_FIRE_RAIN = sd->k_tick_c; return 0; }                     sd->spamcount_RL_FIRE_RAIN = 0;                     sd->spamtick_RL_FIRE_RAIN = tick + sd->kdelay;                     break;
+			case RL_HEAT_BARREL:                   if (k_tick_check(sd, sd->spamtick_RL_HEAT_BARREL,                   sd->spamcount_RL_HEAT_BARREL,                   battle_config.kd_RL_HEAT_BARREL,                   battle_config.kdw_RL_HEAT_BARREL))                   { sd->spamcount_RL_HEAT_BARREL = sd->k_tick_c; return 0; }                   sd->spamcount_RL_HEAT_BARREL = 0;                   sd->spamtick_RL_HEAT_BARREL = tick + sd->kdelay;                   break;
+			case RL_AM_BLAST:                      if (k_tick_check(sd, sd->spamtick_RL_AM_BLAST,                      sd->spamcount_RL_AM_BLAST,                      battle_config.kd_RL_AM_BLAST,                      battle_config.kdw_RL_AM_BLAST))                      { sd->spamcount_RL_AM_BLAST = sd->k_tick_c; return 0; }                      sd->spamcount_RL_AM_BLAST = 0;                      sd->spamtick_RL_AM_BLAST = tick + sd->kdelay;                      break;
+			case RL_SLUGSHOT:                      if (k_tick_check(sd, sd->spamtick_RL_SLUGSHOT,                      sd->spamcount_RL_SLUGSHOT,                      battle_config.kd_RL_SLUGSHOT,                      battle_config.kdw_RL_SLUGSHOT))                      { sd->spamcount_RL_SLUGSHOT = sd->k_tick_c; return 0; }                      sd->spamcount_RL_SLUGSHOT = 0;                      sd->spamtick_RL_SLUGSHOT = tick + sd->kdelay;                      break;
+			case RL_HAMMER_OF_GOD:                 if (k_tick_check(sd, sd->spamtick_RL_HAMMER_OF_GOD,                 sd->spamcount_RL_HAMMER_OF_GOD,                 battle_config.kd_RL_HAMMER_OF_GOD,                 battle_config.kdw_RL_HAMMER_OF_GOD))                 { sd->spamcount_RL_HAMMER_OF_GOD = sd->k_tick_c; return 0; }                 sd->spamcount_RL_HAMMER_OF_GOD = 0;                 sd->spamtick_RL_HAMMER_OF_GOD = tick + sd->kdelay;                 break;
+			case KO_YAMIKUMO:                      if (k_tick_check(sd, sd->spamtick_KO_YAMIKUMO,                      sd->spamcount_KO_YAMIKUMO,                      battle_config.kd_KO_YAMIKUMO,                      battle_config.kdw_KO_YAMIKUMO))                      { sd->spamcount_KO_YAMIKUMO = sd->k_tick_c; return 0; }                      sd->spamcount_KO_YAMIKUMO = 0;                      sd->spamtick_KO_YAMIKUMO = tick + sd->kdelay;                      break;
+			case KO_JYUMONJIKIRI:                  if (k_tick_check(sd, sd->spamtick_KO_JYUMONJIKIRI,                  sd->spamcount_KO_JYUMONJIKIRI,                  battle_config.kd_KO_JYUMONJIKIRI,                  battle_config.kdw_KO_JYUMONJIKIRI))                  { sd->spamcount_KO_JYUMONJIKIRI = sd->k_tick_c; return 0; }                  sd->spamcount_KO_JYUMONJIKIRI = 0;                  sd->spamtick_KO_JYUMONJIKIRI = tick + sd->kdelay;                  break;
+			case KO_SETSUDAN:                      if (k_tick_check(sd, sd->spamtick_KO_SETSUDAN,                      sd->spamcount_KO_SETSUDAN,                      battle_config.kd_KO_SETSUDAN,                      battle_config.kdw_KO_SETSUDAN))                      { sd->spamcount_KO_SETSUDAN = sd->k_tick_c; return 0; }                      sd->spamcount_KO_SETSUDAN = 0;                      sd->spamtick_KO_SETSUDAN = tick + sd->kdelay;                      break;
+			case KO_BAKURETSU:                     if (k_tick_check(sd, sd->spamtick_KO_BAKURETSU,                     sd->spamcount_KO_BAKURETSU,                     battle_config.kd_KO_BAKURETSU,                     battle_config.kdw_KO_BAKURETSU))                     { sd->spamcount_KO_BAKURETSU = sd->k_tick_c; return 0; }                     sd->spamcount_KO_BAKURETSU = 0;                     sd->spamtick_KO_BAKURETSU = tick + sd->kdelay;                     break;
+			case KO_HAPPOKUNAI:                    if (k_tick_check(sd, sd->spamtick_KO_HAPPOKUNAI,                    sd->spamcount_KO_HAPPOKUNAI,                    battle_config.kd_KO_HAPPOKUNAI,                    battle_config.kdw_KO_HAPPOKUNAI))                    { sd->spamcount_KO_HAPPOKUNAI = sd->k_tick_c; return 0; }                    sd->spamcount_KO_HAPPOKUNAI = 0;                    sd->spamtick_KO_HAPPOKUNAI = tick + sd->kdelay;                    break;
+			case KO_MUCHANAGE:                     if (k_tick_check(sd, sd->spamtick_KO_MUCHANAGE,                     sd->spamcount_KO_MUCHANAGE,                     battle_config.kd_KO_MUCHANAGE,                     battle_config.kdw_KO_MUCHANAGE))                     { sd->spamcount_KO_MUCHANAGE = sd->k_tick_c; return 0; }                     sd->spamcount_KO_MUCHANAGE = 0;                     sd->spamtick_KO_MUCHANAGE = tick + sd->kdelay;                     break;
+			case KO_HUUMARANKA:                    if (k_tick_check(sd, sd->spamtick_KO_HUUMARANKA,                    sd->spamcount_KO_HUUMARANKA,                    battle_config.kd_KO_HUUMARANKA,                    battle_config.kdw_KO_HUUMARANKA))                    { sd->spamcount_KO_HUUMARANKA = sd->k_tick_c; return 0; }                    sd->spamcount_KO_HUUMARANKA = 0;                    sd->spamtick_KO_HUUMARANKA = tick + sd->kdelay;                    break;
+			case KO_MAKIBISHI:                     if (k_tick_check(sd, sd->spamtick_KO_MAKIBISHI,                     sd->spamcount_KO_MAKIBISHI,                     battle_config.kd_KO_MAKIBISHI,                     battle_config.kdw_KO_MAKIBISHI))                     { sd->spamcount_KO_MAKIBISHI = sd->k_tick_c; return 0; }                     sd->spamcount_KO_MAKIBISHI = 0;                     sd->spamtick_KO_MAKIBISHI = tick + sd->kdelay;                     break;
+			case KO_MEIKYOUSISUI:                  if (k_tick_check(sd, sd->spamtick_KO_MEIKYOUSISUI,                  sd->spamcount_KO_MEIKYOUSISUI,                  battle_config.kd_KO_MEIKYOUSISUI,                  battle_config.kdw_KO_MEIKYOUSISUI))                  { sd->spamcount_KO_MEIKYOUSISUI = sd->k_tick_c; return 0; }                  sd->spamcount_KO_MEIKYOUSISUI = 0;                  sd->spamtick_KO_MEIKYOUSISUI = tick + sd->kdelay;                  break;
+			case KO_ZANZOU:                        if (k_tick_check(sd, sd->spamtick_KO_ZANZOU,                        sd->spamcount_KO_ZANZOU,                        battle_config.kd_KO_ZANZOU,                        battle_config.kdw_KO_ZANZOU))                        { sd->spamcount_KO_ZANZOU = sd->k_tick_c; return 0; }                        sd->spamcount_KO_ZANZOU = 0;                        sd->spamtick_KO_ZANZOU = tick + sd->kdelay;                        break;
+			case KO_KYOUGAKU:                      if (k_tick_check(sd, sd->spamtick_KO_KYOUGAKU,                      sd->spamcount_KO_KYOUGAKU,                      battle_config.kd_KO_KYOUGAKU,                      battle_config.kdw_KO_KYOUGAKU))                      { sd->spamcount_KO_KYOUGAKU = sd->k_tick_c; return 0; }                      sd->spamcount_KO_KYOUGAKU = 0;                      sd->spamtick_KO_KYOUGAKU = tick + sd->kdelay;                      break;
+			case KO_JYUSATSU:                      if (k_tick_check(sd, sd->spamtick_KO_JYUSATSU,                      sd->spamcount_KO_JYUSATSU,                      battle_config.kd_KO_JYUSATSU,                      battle_config.kdw_KO_JYUSATSU))                      { sd->spamcount_KO_JYUSATSU = sd->k_tick_c; return 0; }                      sd->spamcount_KO_JYUSATSU = 0;                      sd->spamtick_KO_JYUSATSU = tick + sd->kdelay;                      break;
+			case KO_KAHU_ENTEN:                    if (k_tick_check(sd, sd->spamtick_KO_KAHU_ENTEN,                    sd->spamcount_KO_KAHU_ENTEN,                    battle_config.kd_KO_KAHU_ENTEN,                    battle_config.kdw_KO_KAHU_ENTEN))                    { sd->spamcount_KO_KAHU_ENTEN = sd->k_tick_c; return 0; }                    sd->spamcount_KO_KAHU_ENTEN = 0;                    sd->spamtick_KO_KAHU_ENTEN = tick + sd->kdelay;                    break;
+			case KO_HYOUHU_HUBUKI:                 if (k_tick_check(sd, sd->spamtick_KO_HYOUHU_HUBUKI,                 sd->spamcount_KO_HYOUHU_HUBUKI,                 battle_config.kd_KO_HYOUHU_HUBUKI,                 battle_config.kdw_KO_HYOUHU_HUBUKI))                 { sd->spamcount_KO_HYOUHU_HUBUKI = sd->k_tick_c; return 0; }                 sd->spamcount_KO_HYOUHU_HUBUKI = 0;                 sd->spamtick_KO_HYOUHU_HUBUKI = tick + sd->kdelay;                 break;
+			case KO_KAZEHU_SEIRAN:                 if (k_tick_check(sd, sd->spamtick_KO_KAZEHU_SEIRAN,                 sd->spamcount_KO_KAZEHU_SEIRAN,                 battle_config.kd_KO_KAZEHU_SEIRAN,                 battle_config.kdw_KO_KAZEHU_SEIRAN))                 { sd->spamcount_KO_KAZEHU_SEIRAN = sd->k_tick_c; return 0; }                 sd->spamcount_KO_KAZEHU_SEIRAN = 0;                 sd->spamtick_KO_KAZEHU_SEIRAN = tick + sd->kdelay;                 break;
+			case KO_DOHU_KOUKAI:                   if (k_tick_check(sd, sd->spamtick_KO_DOHU_KOUKAI,                   sd->spamcount_KO_DOHU_KOUKAI,                   battle_config.kd_KO_DOHU_KOUKAI,                   battle_config.kdw_KO_DOHU_KOUKAI))                   { sd->spamcount_KO_DOHU_KOUKAI = sd->k_tick_c; return 0; }                   sd->spamcount_KO_DOHU_KOUKAI = 0;                   sd->spamtick_KO_DOHU_KOUKAI = tick + sd->kdelay;                   break;
+			case KO_KAIHOU:                        if (k_tick_check(sd, sd->spamtick_KO_KAIHOU,                        sd->spamcount_KO_KAIHOU,                        battle_config.kd_KO_KAIHOU,                        battle_config.kdw_KO_KAIHOU))                        { sd->spamcount_KO_KAIHOU = sd->k_tick_c; return 0; }                        sd->spamcount_KO_KAIHOU = 0;                        sd->spamtick_KO_KAIHOU = tick + sd->kdelay;                        break;
+			case KO_ZENKAI:                        if (k_tick_check(sd, sd->spamtick_KO_ZENKAI,                        sd->spamcount_KO_ZENKAI,                        battle_config.kd_KO_ZENKAI,                        battle_config.kdw_KO_ZENKAI))                        { sd->spamcount_KO_ZENKAI = sd->k_tick_c; return 0; }                        sd->spamcount_KO_ZENKAI = 0;                        sd->spamtick_KO_ZENKAI = tick + sd->kdelay;                        break;
+			case KO_GENWAKU:                       if (k_tick_check(sd, sd->spamtick_KO_GENWAKU,                       sd->spamcount_KO_GENWAKU,                       battle_config.kd_KO_GENWAKU,                       battle_config.kdw_KO_GENWAKU))                       { sd->spamcount_KO_GENWAKU = sd->k_tick_c; return 0; }                       sd->spamcount_KO_GENWAKU = 0;                       sd->spamtick_KO_GENWAKU = tick + sd->kdelay;                       break;
+			case KO_IZAYOI:                        if (k_tick_check(sd, sd->spamtick_KO_IZAYOI,                        sd->spamcount_KO_IZAYOI,                        battle_config.kd_KO_IZAYOI,                        battle_config.kdw_KO_IZAYOI))                        { sd->spamcount_KO_IZAYOI = sd->k_tick_c; return 0; }                        sd->spamcount_KO_IZAYOI = 0;                        sd->spamtick_KO_IZAYOI = tick + sd->kdelay;                        break;
+			case KG_KAGEHUMI:                      if (k_tick_check(sd, sd->spamtick_KG_KAGEHUMI,                      sd->spamcount_KG_KAGEHUMI,                      battle_config.kd_KG_KAGEHUMI,                      battle_config.kdw_KG_KAGEHUMI))                      { sd->spamcount_KG_KAGEHUMI = sd->k_tick_c; return 0; }                      sd->spamcount_KG_KAGEHUMI = 0;                      sd->spamtick_KG_KAGEHUMI = tick + sd->kdelay;                      break;
+			case KG_KYOMU:                         if (k_tick_check(sd, sd->spamtick_KG_KYOMU,                         sd->spamcount_KG_KYOMU,                         battle_config.kd_KG_KYOMU,                         battle_config.kdw_KG_KYOMU))                         { sd->spamcount_KG_KYOMU = sd->k_tick_c; return 0; }                         sd->spamcount_KG_KYOMU = 0;                         sd->spamtick_KG_KYOMU = tick + sd->kdelay;                         break;
+			case KG_KAGEMUSYA:                     if (k_tick_check(sd, sd->spamtick_KG_KAGEMUSYA,                     sd->spamcount_KG_KAGEMUSYA,                     battle_config.kd_KG_KAGEMUSYA,                     battle_config.kdw_KG_KAGEMUSYA))                     { sd->spamcount_KG_KAGEMUSYA = sd->k_tick_c; return 0; }                     sd->spamcount_KG_KAGEMUSYA = 0;                     sd->spamtick_KG_KAGEMUSYA = tick + sd->kdelay;                     break;
+			case OB_ZANGETSU:                      if (k_tick_check(sd, sd->spamtick_OB_ZANGETSU,                      sd->spamcount_OB_ZANGETSU,                      battle_config.kd_OB_ZANGETSU,                      battle_config.kdw_OB_ZANGETSU))                      { sd->spamcount_OB_ZANGETSU = sd->k_tick_c; return 0; }                      sd->spamcount_OB_ZANGETSU = 0;                      sd->spamtick_OB_ZANGETSU = tick + sd->kdelay;                      break;
+			case OB_OBOROGENSOU:                   if (k_tick_check(sd, sd->spamtick_OB_OBOROGENSOU,                   sd->spamcount_OB_OBOROGENSOU,                   battle_config.kd_OB_OBOROGENSOU,                   battle_config.kdw_OB_OBOROGENSOU))                   { sd->spamcount_OB_OBOROGENSOU = sd->k_tick_c; return 0; }                   sd->spamcount_OB_OBOROGENSOU = 0;                   sd->spamtick_OB_OBOROGENSOU = tick + sd->kdelay;                   break;
+			case OB_AKAITSUKI:                     if (k_tick_check(sd, sd->spamtick_OB_AKAITSUKI,                     sd->spamcount_OB_AKAITSUKI,                     battle_config.kd_OB_AKAITSUKI,                     battle_config.kdw_OB_AKAITSUKI))                     { sd->spamcount_OB_AKAITSUKI = sd->k_tick_c; return 0; }                     sd->spamcount_OB_AKAITSUKI = 0;                     sd->spamtick_OB_AKAITSUKI = tick + sd->kdelay;                     break;
+			case GC_DARKCROW:                      if (k_tick_check(sd, sd->spamtick_GC_DARKCROW,                      sd->spamcount_GC_DARKCROW,                      battle_config.kd_GC_DARKCROW,                      battle_config.kdw_GC_DARKCROW))                      { sd->spamcount_GC_DARKCROW = sd->k_tick_c; return 0; }                      sd->spamcount_GC_DARKCROW = 0;                      sd->spamtick_GC_DARKCROW = tick + sd->kdelay;                      break;
+			case RA_UNLIMIT:                       if (k_tick_check(sd, sd->spamtick_RA_UNLIMIT,                       sd->spamcount_RA_UNLIMIT,                       battle_config.kd_RA_UNLIMIT,                       battle_config.kdw_RA_UNLIMIT))                       { sd->spamcount_RA_UNLIMIT = sd->k_tick_c; return 0; }                       sd->spamcount_RA_UNLIMIT = 0;                       sd->spamtick_RA_UNLIMIT = tick + sd->kdelay;                       break;
+			case GN_ILLUSIONDOPING:                if (k_tick_check(sd, sd->spamtick_GN_ILLUSIONDOPING,                sd->spamcount_GN_ILLUSIONDOPING,                battle_config.kd_GN_ILLUSIONDOPING,                battle_config.kdw_GN_ILLUSIONDOPING))                { sd->spamcount_GN_ILLUSIONDOPING = sd->k_tick_c; return 0; }                sd->spamcount_GN_ILLUSIONDOPING = 0;                sd->spamtick_GN_ILLUSIONDOPING = tick + sd->kdelay;                break;
+			case RK_DRAGONBREATH_WATER:            if (k_tick_check(sd, sd->spamtick_RK_DRAGONBREATH_WATER,            sd->spamcount_RK_DRAGONBREATH_WATER,            battle_config.kd_RK_DRAGONBREATH_WATER,            battle_config.kdw_RK_DRAGONBREATH_WATER))            { sd->spamcount_RK_DRAGONBREATH_WATER = sd->k_tick_c; return 0; }            sd->spamcount_RK_DRAGONBREATH_WATER = 0;            sd->spamtick_RK_DRAGONBREATH_WATER = tick + sd->kdelay;            break;
+			case RK_LUXANIMA:                      if (k_tick_check(sd, sd->spamtick_RK_LUXANIMA,                      sd->spamcount_RK_LUXANIMA,                      battle_config.kd_RK_LUXANIMA,                      battle_config.kdw_RK_LUXANIMA))                      { sd->spamcount_RK_LUXANIMA = sd->k_tick_c; return 0; }                      sd->spamcount_RK_LUXANIMA = 0;                      sd->spamtick_RK_LUXANIMA = tick + sd->kdelay;                      break;
+			case NC_MAGMA_ERUPTION:                if (k_tick_check(sd, sd->spamtick_NC_MAGMA_ERUPTION,                sd->spamcount_NC_MAGMA_ERUPTION,                battle_config.kd_NC_MAGMA_ERUPTION,                battle_config.kdw_NC_MAGMA_ERUPTION))                { sd->spamcount_NC_MAGMA_ERUPTION = sd->k_tick_c; return 0; }                sd->spamcount_NC_MAGMA_ERUPTION = 0;                sd->spamtick_NC_MAGMA_ERUPTION = tick + sd->kdelay;                break;
+			case WM_FRIGG_SONG:                    if (k_tick_check(sd, sd->spamtick_WM_FRIGG_SONG,                    sd->spamcount_WM_FRIGG_SONG,                    battle_config.kd_WM_FRIGG_SONG,                    battle_config.kdw_WM_FRIGG_SONG))                    { sd->spamcount_WM_FRIGG_SONG = sd->k_tick_c; return 0; }                    sd->spamcount_WM_FRIGG_SONG = 0;                    sd->spamtick_WM_FRIGG_SONG = tick + sd->kdelay;                    break;
+			case SO_ELEMENTAL_SHIELD:              if (k_tick_check(sd, sd->spamtick_SO_ELEMENTAL_SHIELD,              sd->spamcount_SO_ELEMENTAL_SHIELD,              battle_config.kd_SO_ELEMENTAL_SHIELD,              battle_config.kdw_SO_ELEMENTAL_SHIELD))              { sd->spamcount_SO_ELEMENTAL_SHIELD = sd->k_tick_c; return 0; }              sd->spamcount_SO_ELEMENTAL_SHIELD = 0;              sd->spamtick_SO_ELEMENTAL_SHIELD = tick + sd->kdelay;              break;
+			case SR_FLASHCOMBO:                    if (k_tick_check(sd, sd->spamtick_SR_FLASHCOMBO,                    sd->spamcount_SR_FLASHCOMBO,                    battle_config.kd_SR_FLASHCOMBO,                    battle_config.kdw_SR_FLASHCOMBO))                    { sd->spamcount_SR_FLASHCOMBO = sd->k_tick_c; return 0; }                    sd->spamcount_SR_FLASHCOMBO = 0;                    sd->spamtick_SR_FLASHCOMBO = tick + sd->kdelay;                    break;
+			case SC_ESCAPE:                        if (k_tick_check(sd, sd->spamtick_SC_ESCAPE,                        sd->spamcount_SC_ESCAPE,                        battle_config.kd_SC_ESCAPE,                        battle_config.kdw_SC_ESCAPE))                        { sd->spamcount_SC_ESCAPE = sd->k_tick_c; return 0; }                        sd->spamcount_SC_ESCAPE = 0;                        sd->spamtick_SC_ESCAPE = tick + sd->kdelay;                        break;
+			case AB_OFFERTORIUM:                   if (k_tick_check(sd, sd->spamtick_AB_OFFERTORIUM,                   sd->spamcount_AB_OFFERTORIUM,                   battle_config.kd_AB_OFFERTORIUM,                   battle_config.kdw_AB_OFFERTORIUM))                   { sd->spamcount_AB_OFFERTORIUM = sd->k_tick_c; return 0; }                   sd->spamcount_AB_OFFERTORIUM = 0;                   sd->spamtick_AB_OFFERTORIUM = tick + sd->kdelay;                   break;
+			case WL_TELEKINESIS_INTENSE:           if (k_tick_check(sd, sd->spamtick_WL_TELEKINESIS_INTENSE,           sd->spamcount_WL_TELEKINESIS_INTENSE,           battle_config.kd_WL_TELEKINESIS_INTENSE,           battle_config.kdw_WL_TELEKINESIS_INTENSE))           { sd->spamcount_WL_TELEKINESIS_INTENSE = sd->k_tick_c; return 0; }           sd->spamcount_WL_TELEKINESIS_INTENSE = 0;           sd->spamtick_WL_TELEKINESIS_INTENSE = tick + sd->kdelay;           break;
+			case ALL_FULL_THROTTLE:                if (k_tick_check(sd, sd->spamtick_ALL_FULL_THROTTLE,                sd->spamcount_ALL_FULL_THROTTLE,                battle_config.kd_ALL_FULL_THROTTLE,                battle_config.kdw_ALL_FULL_THROTTLE))                { sd->spamcount_ALL_FULL_THROTTLE = sd->k_tick_c; return 0; }                sd->spamcount_ALL_FULL_THROTTLE = 0;                sd->spamtick_ALL_FULL_THROTTLE = tick + sd->kdelay;                break;
+			case SU_BITE:                          if (k_tick_check(sd, sd->spamtick_SU_BITE,                          sd->spamcount_SU_BITE,                          battle_config.kd_SU_BITE,                          battle_config.kdw_SU_BITE))                          { sd->spamcount_SU_BITE = sd->k_tick_c; return 0; }                          sd->spamcount_SU_BITE = 0;                          sd->spamtick_SU_BITE = tick + sd->kdelay;                          break;
+			case SU_SCRATCH:                       if (k_tick_check(sd, sd->spamtick_SU_SCRATCH,                       sd->spamcount_SU_SCRATCH,                       battle_config.kd_SU_SCRATCH,                       battle_config.kdw_SU_SCRATCH))                       { sd->spamcount_SU_SCRATCH = sd->k_tick_c; return 0; }                       sd->spamcount_SU_SCRATCH = 0;                       sd->spamtick_SU_SCRATCH = tick + sd->kdelay;                       break;
+			case SU_STOOP:                         if (k_tick_check(sd, sd->spamtick_SU_STOOP,                         sd->spamcount_SU_STOOP,                         battle_config.kd_SU_STOOP,                         battle_config.kdw_SU_STOOP))                         { sd->spamcount_SU_STOOP = sd->k_tick_c; return 0; }                         sd->spamcount_SU_STOOP = 0;                         sd->spamtick_SU_STOOP = tick + sd->kdelay;                         break;
+			case SU_LOPE:                          if (k_tick_check(sd, sd->spamtick_SU_LOPE,                          sd->spamcount_SU_LOPE,                          battle_config.kd_SU_LOPE,                          battle_config.kdw_SU_LOPE))                          { sd->spamcount_SU_LOPE = sd->k_tick_c; return 0; }                          sd->spamcount_SU_LOPE = 0;                          sd->spamtick_SU_LOPE = tick + sd->kdelay;                          break;
+			case SU_SPRITEMABLE:                   if (k_tick_check(sd, sd->spamtick_SU_SPRITEMABLE,                   sd->spamcount_SU_SPRITEMABLE,                   battle_config.kd_SU_SPRITEMABLE,                   battle_config.kdw_SU_SPRITEMABLE))                   { sd->spamcount_SU_SPRITEMABLE = sd->k_tick_c; return 0; }                   sd->spamcount_SU_SPRITEMABLE = 0;                   sd->spamtick_SU_SPRITEMABLE = tick + sd->kdelay;                   break;
+			case SU_POWEROFLAND:                   if (k_tick_check(sd, sd->spamtick_SU_POWEROFLAND,                   sd->spamcount_SU_POWEROFLAND,                   battle_config.kd_SU_POWEROFLAND,                   battle_config.kdw_SU_POWEROFLAND))                   { sd->spamcount_SU_POWEROFLAND = sd->k_tick_c; return 0; }                   sd->spamcount_SU_POWEROFLAND = 0;                   sd->spamtick_SU_POWEROFLAND = tick + sd->kdelay;                   break;
+			case SU_SV_STEMSPEAR:                  if (k_tick_check(sd, sd->spamtick_SU_SV_STEMSPEAR,                  sd->spamcount_SU_SV_STEMSPEAR,                  battle_config.kd_SU_SV_STEMSPEAR,                  battle_config.kdw_SU_SV_STEMSPEAR))                  { sd->spamcount_SU_SV_STEMSPEAR = sd->k_tick_c; return 0; }                  sd->spamcount_SU_SV_STEMSPEAR = 0;                  sd->spamtick_SU_SV_STEMSPEAR = tick + sd->kdelay;                  break;
+			case SU_CN_POWDERING:                  if (k_tick_check(sd, sd->spamtick_SU_CN_POWDERING,                  sd->spamcount_SU_CN_POWDERING,                  battle_config.kd_SU_CN_POWDERING,                  battle_config.kdw_SU_CN_POWDERING))                  { sd->spamcount_SU_CN_POWDERING = sd->k_tick_c; return 0; }                  sd->spamcount_SU_CN_POWDERING = 0;                  sd->spamtick_SU_CN_POWDERING = tick + sd->kdelay;                  break;
+			case SU_CN_METEOR:                     if (k_tick_check(sd, sd->spamtick_SU_CN_METEOR,                     sd->spamcount_SU_CN_METEOR,                     battle_config.kd_SU_CN_METEOR,                     battle_config.kdw_SU_CN_METEOR))                     { sd->spamcount_SU_CN_METEOR = sd->k_tick_c; return 0; }                     sd->spamcount_SU_CN_METEOR = 0;                     sd->spamtick_SU_CN_METEOR = tick + sd->kdelay;                     break;
+			case SU_SV_ROOTTWIST:                  if (k_tick_check(sd, sd->spamtick_SU_SV_ROOTTWIST,                  sd->spamcount_SU_SV_ROOTTWIST,                  battle_config.kd_SU_SV_ROOTTWIST,                  battle_config.kdw_SU_SV_ROOTTWIST))                  { sd->spamcount_SU_SV_ROOTTWIST = sd->k_tick_c; return 0; }                  sd->spamcount_SU_SV_ROOTTWIST = 0;                  sd->spamtick_SU_SV_ROOTTWIST = tick + sd->kdelay;                  break;
+			case SU_POWEROFLIFE:                   if (k_tick_check(sd, sd->spamtick_SU_POWEROFLIFE,                   sd->spamcount_SU_POWEROFLIFE,                   battle_config.kd_SU_POWEROFLIFE,                   battle_config.kdw_SU_POWEROFLIFE))                   { sd->spamcount_SU_POWEROFLIFE = sd->k_tick_c; return 0; }                   sd->spamcount_SU_POWEROFLIFE = 0;                   sd->spamtick_SU_POWEROFLIFE = tick + sd->kdelay;                   break;
+			case SU_SCAROFTAROU:                   if (k_tick_check(sd, sd->spamtick_SU_SCAROFTAROU,                   sd->spamcount_SU_SCAROFTAROU,                   battle_config.kd_SU_SCAROFTAROU,                   battle_config.kdw_SU_SCAROFTAROU))                   { sd->spamcount_SU_SCAROFTAROU = sd->k_tick_c; return 0; }                   sd->spamcount_SU_SCAROFTAROU = 0;                   sd->spamtick_SU_SCAROFTAROU = tick + sd->kdelay;                   break;
+			case SU_PICKYPECK:                     if (k_tick_check(sd, sd->spamtick_SU_PICKYPECK,                     sd->spamcount_SU_PICKYPECK,                     battle_config.kd_SU_PICKYPECK,                     battle_config.kdw_SU_PICKYPECK))                     { sd->spamcount_SU_PICKYPECK = sd->k_tick_c; return 0; }                     sd->spamcount_SU_PICKYPECK = 0;                     sd->spamtick_SU_PICKYPECK = tick + sd->kdelay;                     break;
+			case SU_ARCLOUSEDASH:                  if (k_tick_check(sd, sd->spamtick_SU_ARCLOUSEDASH,                  sd->spamcount_SU_ARCLOUSEDASH,                  battle_config.kd_SU_ARCLOUSEDASH,                  battle_config.kdw_SU_ARCLOUSEDASH))                  { sd->spamcount_SU_ARCLOUSEDASH = sd->k_tick_c; return 0; }                  sd->spamcount_SU_ARCLOUSEDASH = 0;                  sd->spamtick_SU_ARCLOUSEDASH = tick + sd->kdelay;                  break;
+			case SU_LUNATICCARROTBEAT:             if (k_tick_check(sd, sd->spamtick_SU_LUNATICCARROTBEAT,             sd->spamcount_SU_LUNATICCARROTBEAT,             battle_config.kd_SU_LUNATICCARROTBEAT,             battle_config.kdw_SU_LUNATICCARROTBEAT))             { sd->spamcount_SU_LUNATICCARROTBEAT = sd->k_tick_c; return 0; }             sd->spamcount_SU_LUNATICCARROTBEAT = 0;             sd->spamtick_SU_LUNATICCARROTBEAT = tick + sd->kdelay;             break;
+			case SU_POWEROFSEA:                    if (k_tick_check(sd, sd->spamtick_SU_POWEROFSEA,                    sd->spamcount_SU_POWEROFSEA,                    battle_config.kd_SU_POWEROFSEA,                    battle_config.kdw_SU_POWEROFSEA))                    { sd->spamcount_SU_POWEROFSEA = sd->k_tick_c; return 0; }                    sd->spamcount_SU_POWEROFSEA = 0;                    sd->spamtick_SU_POWEROFSEA = tick + sd->kdelay;                    break;
+			case SU_TUNABELLY:                     if (k_tick_check(sd, sd->spamtick_SU_TUNABELLY,                     sd->spamcount_SU_TUNABELLY,                     battle_config.kd_SU_TUNABELLY,                     battle_config.kdw_SU_TUNABELLY))                     { sd->spamcount_SU_TUNABELLY = sd->k_tick_c; return 0; }                     sd->spamcount_SU_TUNABELLY = 0;                     sd->spamtick_SU_TUNABELLY = tick + sd->kdelay;                     break;
+			case SU_TUNAPARTY:                     if (k_tick_check(sd, sd->spamtick_SU_TUNAPARTY,                     sd->spamcount_SU_TUNAPARTY,                     battle_config.kd_SU_TUNAPARTY,                     battle_config.kdw_SU_TUNAPARTY))                     { sd->spamcount_SU_TUNAPARTY = sd->k_tick_c; return 0; }                     sd->spamcount_SU_TUNAPARTY = 0;                     sd->spamtick_SU_TUNAPARTY = tick + sd->kdelay;                     break;
+			case SU_BUNCHOFSHRIMP:                 if (k_tick_check(sd, sd->spamtick_SU_BUNCHOFSHRIMP,                 sd->spamcount_SU_BUNCHOFSHRIMP,                 battle_config.kd_SU_BUNCHOFSHRIMP,                 battle_config.kdw_SU_BUNCHOFSHRIMP))                 { sd->spamcount_SU_BUNCHOFSHRIMP = sd->k_tick_c; return 0; }                 sd->spamcount_SU_BUNCHOFSHRIMP = 0;                 sd->spamtick_SU_BUNCHOFSHRIMP = tick + sd->kdelay;                 break;
+			case SU_FRESHSHRIMP:                   if (k_tick_check(sd, sd->spamtick_SU_FRESHSHRIMP,                   sd->spamcount_SU_FRESHSHRIMP,                   battle_config.kd_SU_FRESHSHRIMP,                   battle_config.kdw_SU_FRESHSHRIMP))                   { sd->spamcount_SU_FRESHSHRIMP = sd->k_tick_c; return 0; }                   sd->spamcount_SU_FRESHSHRIMP = 0;                   sd->spamtick_SU_FRESHSHRIMP = tick + sd->kdelay;                   break;
+			case SU_CN_METEOR2:                    if (k_tick_check(sd, sd->spamtick_SU_CN_METEOR2,                    sd->spamcount_SU_CN_METEOR2,                    battle_config.kd_SU_CN_METEOR2,                    battle_config.kdw_SU_CN_METEOR2))                    { sd->spamcount_SU_CN_METEOR2 = sd->k_tick_c; return 0; }                    sd->spamcount_SU_CN_METEOR2 = 0;                    sd->spamtick_SU_CN_METEOR2 = tick + sd->kdelay;                    break;
+			case SU_LUNATICCARROTBEAT2:            if (k_tick_check(sd, sd->spamtick_SU_LUNATICCARROTBEAT2,            sd->spamcount_SU_LUNATICCARROTBEAT2,            battle_config.kd_SU_LUNATICCARROTBEAT2,            battle_config.kdw_SU_LUNATICCARROTBEAT2))            { sd->spamcount_SU_LUNATICCARROTBEAT2 = sd->k_tick_c; return 0; }            sd->spamcount_SU_LUNATICCARROTBEAT2 = 0;            sd->spamtick_SU_LUNATICCARROTBEAT2 = tick + sd->kdelay;            break;
+			case SU_SOULATTACK:                    if (k_tick_check(sd, sd->spamtick_SU_SOULATTACK,                    sd->spamcount_SU_SOULATTACK,                    battle_config.kd_SU_SOULATTACK,                    battle_config.kdw_SU_SOULATTACK))                    { sd->spamcount_SU_SOULATTACK = sd->k_tick_c; return 0; }                    sd->spamcount_SU_SOULATTACK = 0;                    sd->spamtick_SU_SOULATTACK = tick + sd->kdelay;                    break;
+			case SU_POWEROFFLOCK:                  if (k_tick_check(sd, sd->spamtick_SU_POWEROFFLOCK,                  sd->spamcount_SU_POWEROFFLOCK,                  battle_config.kd_SU_POWEROFFLOCK,                  battle_config.kdw_SU_POWEROFFLOCK))                  { sd->spamcount_SU_POWEROFFLOCK = sd->k_tick_c; return 0; }                  sd->spamcount_SU_POWEROFFLOCK = 0;                  sd->spamtick_SU_POWEROFFLOCK = tick + sd->kdelay;                  break;
+			case SU_SVG_SPIRIT:                    if (k_tick_check(sd, sd->spamtick_SU_SVG_SPIRIT,                    sd->spamcount_SU_SVG_SPIRIT,                    battle_config.kd_SU_SVG_SPIRIT,                    battle_config.kdw_SU_SVG_SPIRIT))                    { sd->spamcount_SU_SVG_SPIRIT = sd->k_tick_c; return 0; }                    sd->spamcount_SU_SVG_SPIRIT = 0;                    sd->spamtick_SU_SVG_SPIRIT = tick + sd->kdelay;                    break;
+			case SU_HISS:                          if (k_tick_check(sd, sd->spamtick_SU_HISS,                          sd->spamcount_SU_HISS,                          battle_config.kd_SU_HISS,                          battle_config.kdw_SU_HISS))                          { sd->spamcount_SU_HISS = sd->k_tick_c; return 0; }                          sd->spamcount_SU_HISS = 0;                          sd->spamtick_SU_HISS = tick + sd->kdelay;                          break;
+			case SU_NYANGGRASS:                    if (k_tick_check(sd, sd->spamtick_SU_NYANGGRASS,                    sd->spamcount_SU_NYANGGRASS,                    battle_config.kd_SU_NYANGGRASS,                    battle_config.kdw_SU_NYANGGRASS))                    { sd->spamcount_SU_NYANGGRASS = sd->k_tick_c; return 0; }                    sd->spamcount_SU_NYANGGRASS = 0;                    sd->spamtick_SU_NYANGGRASS = tick + sd->kdelay;                    break;
+			case SU_GROOMING:                      if (k_tick_check(sd, sd->spamtick_SU_GROOMING,                      sd->spamcount_SU_GROOMING,                      battle_config.kd_SU_GROOMING,                      battle_config.kdw_SU_GROOMING))                      { sd->spamcount_SU_GROOMING = sd->k_tick_c; return 0; }                      sd->spamcount_SU_GROOMING = 0;                      sd->spamtick_SU_GROOMING = tick + sd->kdelay;                      break;
+			case SU_PURRING:                       if (k_tick_check(sd, sd->spamtick_SU_PURRING,                       sd->spamcount_SU_PURRING,                       battle_config.kd_SU_PURRING,                       battle_config.kdw_SU_PURRING))                       { sd->spamcount_SU_PURRING = sd->k_tick_c; return 0; }                       sd->spamcount_SU_PURRING = 0;                       sd->spamtick_SU_PURRING = tick + sd->kdelay;                       break;
+			case SU_SHRIMPARTY:                    if (k_tick_check(sd, sd->spamtick_SU_SHRIMPARTY,                    sd->spamcount_SU_SHRIMPARTY,                    battle_config.kd_SU_SHRIMPARTY,                    battle_config.kdw_SU_SHRIMPARTY))                    { sd->spamcount_SU_SHRIMPARTY = sd->k_tick_c; return 0; }                    sd->spamcount_SU_SHRIMPARTY = 0;                    sd->spamtick_SU_SHRIMPARTY = tick + sd->kdelay;                    break;
+			case SU_SPIRITOFLIFE:                  if (k_tick_check(sd, sd->spamtick_SU_SPIRITOFLIFE,                  sd->spamcount_SU_SPIRITOFLIFE,                  battle_config.kd_SU_SPIRITOFLIFE,                  battle_config.kdw_SU_SPIRITOFLIFE))                  { sd->spamcount_SU_SPIRITOFLIFE = sd->k_tick_c; return 0; }                  sd->spamcount_SU_SPIRITOFLIFE = 0;                  sd->spamtick_SU_SPIRITOFLIFE = tick + sd->kdelay;                  break;
+			case SU_MEOWMEOW:                      if (k_tick_check(sd, sd->spamtick_SU_MEOWMEOW,                      sd->spamcount_SU_MEOWMEOW,                      battle_config.kd_SU_MEOWMEOW,                      battle_config.kdw_SU_MEOWMEOW))                      { sd->spamcount_SU_MEOWMEOW = sd->k_tick_c; return 0; }                      sd->spamcount_SU_MEOWMEOW = 0;                      sd->spamtick_SU_MEOWMEOW = tick + sd->kdelay;                      break;
+			case SU_SPIRITOFLAND:                  if (k_tick_check(sd, sd->spamtick_SU_SPIRITOFLAND,                  sd->spamcount_SU_SPIRITOFLAND,                  battle_config.kd_SU_SPIRITOFLAND,                  battle_config.kdw_SU_SPIRITOFLAND))                  { sd->spamcount_SU_SPIRITOFLAND = sd->k_tick_c; return 0; }                  sd->spamcount_SU_SPIRITOFLAND = 0;                  sd->spamtick_SU_SPIRITOFLAND = tick + sd->kdelay;                  break;
+			case SU_CHATTERING:                    if (k_tick_check(sd, sd->spamtick_SU_CHATTERING,                    sd->spamcount_SU_CHATTERING,                    battle_config.kd_SU_CHATTERING,                    battle_config.kdw_SU_CHATTERING))                    { sd->spamcount_SU_CHATTERING = sd->k_tick_c; return 0; }                    sd->spamcount_SU_CHATTERING = 0;                    sd->spamtick_SU_CHATTERING = tick + sd->kdelay;                    break;
+			case SU_SPIRITOFSEA:                   if (k_tick_check(sd, sd->spamtick_SU_SPIRITOFSEA,                   sd->spamcount_SU_SPIRITOFSEA,                   battle_config.kd_SU_SPIRITOFSEA,                   battle_config.kdw_SU_SPIRITOFSEA))                   { sd->spamcount_SU_SPIRITOFSEA = sd->k_tick_c; return 0; }                   sd->spamcount_SU_SPIRITOFSEA = 0;                   sd->spamtick_SU_SPIRITOFSEA = tick + sd->kdelay;                   break;
+			case CG_SPECIALSINGER:                 if (k_tick_check(sd, sd->spamtick_CG_SPECIALSINGER,                 sd->spamcount_CG_SPECIALSINGER,                 battle_config.kd_CG_SPECIALSINGER,                 battle_config.kdw_CG_SPECIALSINGER))                 { sd->spamcount_CG_SPECIALSINGER = sd->k_tick_c; return 0; }                 sd->spamcount_CG_SPECIALSINGER = 0;                 sd->spamtick_CG_SPECIALSINGER = tick + sd->kdelay;                 break;
+			case AB_VITUPERATUM:                   if (k_tick_check(sd, sd->spamtick_AB_VITUPERATUM,                   sd->spamcount_AB_VITUPERATUM,                   battle_config.kd_AB_VITUPERATUM,                   battle_config.kdw_AB_VITUPERATUM))                   { sd->spamcount_AB_VITUPERATUM = sd->k_tick_c; return 0; }                   sd->spamcount_AB_VITUPERATUM = 0;                   sd->spamtick_AB_VITUPERATUM = tick + sd->kdelay;                   break;
+			case AB_CONVENIO:                      if (k_tick_check(sd, sd->spamtick_AB_CONVENIO,                      sd->spamcount_AB_CONVENIO,                      battle_config.kd_AB_CONVENIO,                      battle_config.kdw_AB_CONVENIO))                      { sd->spamcount_AB_CONVENIO = sd->k_tick_c; return 0; }                      sd->spamcount_AB_CONVENIO = 0;                      sd->spamtick_AB_CONVENIO = tick + sd->kdelay;                      break;
+			case DK_SERVANTWEAPON:                 if (k_tick_check(sd, sd->spamtick_DK_SERVANTWEAPON,                 sd->spamcount_DK_SERVANTWEAPON,                 battle_config.kd_DK_SERVANTWEAPON,                 battle_config.kdw_DK_SERVANTWEAPON))                 { sd->spamcount_DK_SERVANTWEAPON = sd->k_tick_c; return 0; }                 sd->spamcount_DK_SERVANTWEAPON = 0;                 sd->spamtick_DK_SERVANTWEAPON = tick + sd->kdelay;                 break;
+			case DK_SERVANT_W_SIGN:                if (k_tick_check(sd, sd->spamtick_DK_SERVANT_W_SIGN,                sd->spamcount_DK_SERVANT_W_SIGN,                battle_config.kd_DK_SERVANT_W_SIGN,                battle_config.kdw_DK_SERVANT_W_SIGN))                { sd->spamcount_DK_SERVANT_W_SIGN = sd->k_tick_c; return 0; }                sd->spamcount_DK_SERVANT_W_SIGN = 0;                sd->spamtick_DK_SERVANT_W_SIGN = tick + sd->kdelay;                break;
+			case DK_SERVANT_W_PHANTOM:             if (k_tick_check(sd, sd->spamtick_DK_SERVANT_W_PHANTOM,             sd->spamcount_DK_SERVANT_W_PHANTOM,             battle_config.kd_DK_SERVANT_W_PHANTOM,             battle_config.kdw_DK_SERVANT_W_PHANTOM))             { sd->spamcount_DK_SERVANT_W_PHANTOM = sd->k_tick_c; return 0; }             sd->spamcount_DK_SERVANT_W_PHANTOM = 0;             sd->spamtick_DK_SERVANT_W_PHANTOM = tick + sd->kdelay;             break;
+			case DK_SERVANT_W_DEMOL:               if (k_tick_check(sd, sd->spamtick_DK_SERVANT_W_DEMOL,               sd->spamcount_DK_SERVANT_W_DEMOL,               battle_config.kd_DK_SERVANT_W_DEMOL,               battle_config.kdw_DK_SERVANT_W_DEMOL))               { sd->spamcount_DK_SERVANT_W_DEMOL = sd->k_tick_c; return 0; }               sd->spamcount_DK_SERVANT_W_DEMOL = 0;               sd->spamtick_DK_SERVANT_W_DEMOL = tick + sd->kdelay;               break;
+			case DK_CHARGINGPIERCE:                if (k_tick_check(sd, sd->spamtick_DK_CHARGINGPIERCE,                sd->spamcount_DK_CHARGINGPIERCE,                battle_config.kd_DK_CHARGINGPIERCE,                battle_config.kdw_DK_CHARGINGPIERCE))                { sd->spamcount_DK_CHARGINGPIERCE = sd->k_tick_c; return 0; }                sd->spamcount_DK_CHARGINGPIERCE = 0;                sd->spamtick_DK_CHARGINGPIERCE = tick + sd->kdelay;                break;
+			case DK_HACKANDSLASHER:                if (k_tick_check(sd, sd->spamtick_DK_HACKANDSLASHER,                sd->spamcount_DK_HACKANDSLASHER,                battle_config.kd_DK_HACKANDSLASHER,                battle_config.kdw_DK_HACKANDSLASHER))                { sd->spamcount_DK_HACKANDSLASHER = sd->k_tick_c; return 0; }                sd->spamcount_DK_HACKANDSLASHER = 0;                sd->spamtick_DK_HACKANDSLASHER = tick + sd->kdelay;                break;
+			case DK_DRAGONIC_AURA:                 if (k_tick_check(sd, sd->spamtick_DK_DRAGONIC_AURA,                 sd->spamcount_DK_DRAGONIC_AURA,                 battle_config.kd_DK_DRAGONIC_AURA,                 battle_config.kdw_DK_DRAGONIC_AURA))                 { sd->spamcount_DK_DRAGONIC_AURA = sd->k_tick_c; return 0; }                 sd->spamcount_DK_DRAGONIC_AURA = 0;                 sd->spamtick_DK_DRAGONIC_AURA = tick + sd->kdelay;                 break;
+			case DK_MADNESS_CRUSHER:               if (k_tick_check(sd, sd->spamtick_DK_MADNESS_CRUSHER,               sd->spamcount_DK_MADNESS_CRUSHER,               battle_config.kd_DK_MADNESS_CRUSHER,               battle_config.kdw_DK_MADNESS_CRUSHER))               { sd->spamcount_DK_MADNESS_CRUSHER = sd->k_tick_c; return 0; }               sd->spamcount_DK_MADNESS_CRUSHER = 0;               sd->spamtick_DK_MADNESS_CRUSHER = tick + sd->kdelay;               break;
+			case DK_VIGOR:                         if (k_tick_check(sd, sd->spamtick_DK_VIGOR,                         sd->spamcount_DK_VIGOR,                         battle_config.kd_DK_VIGOR,                         battle_config.kdw_DK_VIGOR))                         { sd->spamcount_DK_VIGOR = sd->k_tick_c; return 0; }                         sd->spamcount_DK_VIGOR = 0;                         sd->spamtick_DK_VIGOR = tick + sd->kdelay;                         break;
+			case DK_STORMSLASH:                    if (k_tick_check(sd, sd->spamtick_DK_STORMSLASH,                    sd->spamcount_DK_STORMSLASH,                    battle_config.kd_DK_STORMSLASH,                    battle_config.kdw_DK_STORMSLASH))                    { sd->spamcount_DK_STORMSLASH = sd->k_tick_c; return 0; }                    sd->spamcount_DK_STORMSLASH = 0;                    sd->spamtick_DK_STORMSLASH = tick + sd->kdelay;                    break;
+			case AG_DEADLY_PROJECTION:             if (k_tick_check(sd, sd->spamtick_AG_DEADLY_PROJECTION,             sd->spamcount_AG_DEADLY_PROJECTION,             battle_config.kd_AG_DEADLY_PROJECTION,             battle_config.kdw_AG_DEADLY_PROJECTION))             { sd->spamcount_AG_DEADLY_PROJECTION = sd->k_tick_c; return 0; }             sd->spamcount_AG_DEADLY_PROJECTION = 0;             sd->spamtick_AG_DEADLY_PROJECTION = tick + sd->kdelay;             break;
+			case AG_DESTRUCTIVE_HURRICANE:         if (k_tick_check(sd, sd->spamtick_AG_DESTRUCTIVE_HURRICANE,         sd->spamcount_AG_DESTRUCTIVE_HURRICANE,         battle_config.kd_AG_DESTRUCTIVE_HURRICANE,         battle_config.kdw_AG_DESTRUCTIVE_HURRICANE))         { sd->spamcount_AG_DESTRUCTIVE_HURRICANE = sd->k_tick_c; return 0; }         sd->spamcount_AG_DESTRUCTIVE_HURRICANE = 0;         sd->spamtick_AG_DESTRUCTIVE_HURRICANE = tick + sd->kdelay;         break;
+			case AG_RAIN_OF_CRYSTAL:               if (k_tick_check(sd, sd->spamtick_AG_RAIN_OF_CRYSTAL,               sd->spamcount_AG_RAIN_OF_CRYSTAL,               battle_config.kd_AG_RAIN_OF_CRYSTAL,               battle_config.kdw_AG_RAIN_OF_CRYSTAL))               { sd->spamcount_AG_RAIN_OF_CRYSTAL = sd->k_tick_c; return 0; }               sd->spamcount_AG_RAIN_OF_CRYSTAL = 0;               sd->spamtick_AG_RAIN_OF_CRYSTAL = tick + sd->kdelay;               break;
+			case AG_MYSTERY_ILLUSION:              if (k_tick_check(sd, sd->spamtick_AG_MYSTERY_ILLUSION,              sd->spamcount_AG_MYSTERY_ILLUSION,              battle_config.kd_AG_MYSTERY_ILLUSION,              battle_config.kdw_AG_MYSTERY_ILLUSION))              { sd->spamcount_AG_MYSTERY_ILLUSION = sd->k_tick_c; return 0; }              sd->spamcount_AG_MYSTERY_ILLUSION = 0;              sd->spamtick_AG_MYSTERY_ILLUSION = tick + sd->kdelay;              break;
+			case AG_VIOLENT_QUAKE:                 if (k_tick_check(sd, sd->spamtick_AG_VIOLENT_QUAKE,                 sd->spamcount_AG_VIOLENT_QUAKE,                 battle_config.kd_AG_VIOLENT_QUAKE,                 battle_config.kdw_AG_VIOLENT_QUAKE))                 { sd->spamcount_AG_VIOLENT_QUAKE = sd->k_tick_c; return 0; }                 sd->spamcount_AG_VIOLENT_QUAKE = 0;                 sd->spamtick_AG_VIOLENT_QUAKE = tick + sd->kdelay;                 break;
+			case AG_SOUL_VC_STRIKE:                if (k_tick_check(sd, sd->spamtick_AG_SOUL_VC_STRIKE,                sd->spamcount_AG_SOUL_VC_STRIKE,                battle_config.kd_AG_SOUL_VC_STRIKE,                battle_config.kdw_AG_SOUL_VC_STRIKE))                { sd->spamcount_AG_SOUL_VC_STRIKE = sd->k_tick_c; return 0; }                sd->spamcount_AG_SOUL_VC_STRIKE = 0;                sd->spamtick_AG_SOUL_VC_STRIKE = tick + sd->kdelay;                break;
+			case AG_STRANTUM_TREMOR:               if (k_tick_check(sd, sd->spamtick_AG_STRANTUM_TREMOR,               sd->spamcount_AG_STRANTUM_TREMOR,               battle_config.kd_AG_STRANTUM_TREMOR,               battle_config.kdw_AG_STRANTUM_TREMOR))               { sd->spamcount_AG_STRANTUM_TREMOR = sd->k_tick_c; return 0; }               sd->spamcount_AG_STRANTUM_TREMOR = 0;               sd->spamtick_AG_STRANTUM_TREMOR = tick + sd->kdelay;               break;
+			case AG_ALL_BLOOM:                     if (k_tick_check(sd, sd->spamtick_AG_ALL_BLOOM,                     sd->spamcount_AG_ALL_BLOOM,                     battle_config.kd_AG_ALL_BLOOM,                     battle_config.kdw_AG_ALL_BLOOM))                     { sd->spamcount_AG_ALL_BLOOM = sd->k_tick_c; return 0; }                     sd->spamcount_AG_ALL_BLOOM = 0;                     sd->spamtick_AG_ALL_BLOOM = tick + sd->kdelay;                     break;
+			case AG_CRYSTAL_IMPACT:                if (k_tick_check(sd, sd->spamtick_AG_CRYSTAL_IMPACT,                sd->spamcount_AG_CRYSTAL_IMPACT,                battle_config.kd_AG_CRYSTAL_IMPACT,                battle_config.kdw_AG_CRYSTAL_IMPACT))                { sd->spamcount_AG_CRYSTAL_IMPACT = sd->k_tick_c; return 0; }                sd->spamcount_AG_CRYSTAL_IMPACT = 0;                sd->spamtick_AG_CRYSTAL_IMPACT = tick + sd->kdelay;                break;
+			case AG_TORNADO_STORM:                 if (k_tick_check(sd, sd->spamtick_AG_TORNADO_STORM,                 sd->spamcount_AG_TORNADO_STORM,                 battle_config.kd_AG_TORNADO_STORM,                 battle_config.kdw_AG_TORNADO_STORM))                 { sd->spamcount_AG_TORNADO_STORM = sd->k_tick_c; return 0; }                 sd->spamcount_AG_TORNADO_STORM = 0;                 sd->spamtick_AG_TORNADO_STORM = tick + sd->kdelay;                 break;
+			case AG_FLORAL_FLARE_ROAD:             if (k_tick_check(sd, sd->spamtick_AG_FLORAL_FLARE_ROAD,             sd->spamcount_AG_FLORAL_FLARE_ROAD,             battle_config.kd_AG_FLORAL_FLARE_ROAD,             battle_config.kdw_AG_FLORAL_FLARE_ROAD))             { sd->spamcount_AG_FLORAL_FLARE_ROAD = sd->k_tick_c; return 0; }             sd->spamcount_AG_FLORAL_FLARE_ROAD = 0;             sd->spamtick_AG_FLORAL_FLARE_ROAD = tick + sd->kdelay;             break;
+			case AG_ASTRAL_STRIKE:                 if (k_tick_check(sd, sd->spamtick_AG_ASTRAL_STRIKE,                 sd->spamcount_AG_ASTRAL_STRIKE,                 battle_config.kd_AG_ASTRAL_STRIKE,                 battle_config.kdw_AG_ASTRAL_STRIKE))                 { sd->spamcount_AG_ASTRAL_STRIKE = sd->k_tick_c; return 0; }                 sd->spamcount_AG_ASTRAL_STRIKE = 0;                 sd->spamtick_AG_ASTRAL_STRIKE = tick + sd->kdelay;                 break;
+			case AG_CLIMAX:                        if (k_tick_check(sd, sd->spamtick_AG_CLIMAX,                        sd->spamcount_AG_CLIMAX,                        battle_config.kd_AG_CLIMAX,                        battle_config.kdw_AG_CLIMAX))                        { sd->spamcount_AG_CLIMAX = sd->k_tick_c; return 0; }                        sd->spamcount_AG_CLIMAX = 0;                        sd->spamtick_AG_CLIMAX = tick + sd->kdelay;                        break;
+			case AG_ROCK_DOWN:                     if (k_tick_check(sd, sd->spamtick_AG_ROCK_DOWN,                     sd->spamcount_AG_ROCK_DOWN,                     battle_config.kd_AG_ROCK_DOWN,                     battle_config.kdw_AG_ROCK_DOWN))                     { sd->spamcount_AG_ROCK_DOWN = sd->k_tick_c; return 0; }                     sd->spamcount_AG_ROCK_DOWN = 0;                     sd->spamtick_AG_ROCK_DOWN = tick + sd->kdelay;                     break;
+			case AG_STORM_CANNON:                  if (k_tick_check(sd, sd->spamtick_AG_STORM_CANNON,                  sd->spamcount_AG_STORM_CANNON,                  battle_config.kd_AG_STORM_CANNON,                  battle_config.kdw_AG_STORM_CANNON))                  { sd->spamcount_AG_STORM_CANNON = sd->k_tick_c; return 0; }                  sd->spamcount_AG_STORM_CANNON = 0;                  sd->spamtick_AG_STORM_CANNON = tick + sd->kdelay;                  break;
+			case AG_CRIMSON_ARROW:                 if (k_tick_check(sd, sd->spamtick_AG_CRIMSON_ARROW,                 sd->spamcount_AG_CRIMSON_ARROW,                 battle_config.kd_AG_CRIMSON_ARROW,                 battle_config.kdw_AG_CRIMSON_ARROW))                 { sd->spamcount_AG_CRIMSON_ARROW = sd->k_tick_c; return 0; }                 sd->spamcount_AG_CRIMSON_ARROW = 0;                 sd->spamtick_AG_CRIMSON_ARROW = tick + sd->kdelay;                 break;
+			case AG_FROZEN_SLASH:                  if (k_tick_check(sd, sd->spamtick_AG_FROZEN_SLASH,                  sd->spamcount_AG_FROZEN_SLASH,                  battle_config.kd_AG_FROZEN_SLASH,                  battle_config.kdw_AG_FROZEN_SLASH))                  { sd->spamcount_AG_FROZEN_SLASH = sd->k_tick_c; return 0; }                  sd->spamcount_AG_FROZEN_SLASH = 0;                  sd->spamtick_AG_FROZEN_SLASH = tick + sd->kdelay;                  break;
+			case IQ_POWERFUL_FAITH:                if (k_tick_check(sd, sd->spamtick_IQ_POWERFUL_FAITH,                sd->spamcount_IQ_POWERFUL_FAITH,                battle_config.kd_IQ_POWERFUL_FAITH,                battle_config.kdw_IQ_POWERFUL_FAITH))                { sd->spamcount_IQ_POWERFUL_FAITH = sd->k_tick_c; return 0; }                sd->spamcount_IQ_POWERFUL_FAITH = 0;                sd->spamtick_IQ_POWERFUL_FAITH = tick + sd->kdelay;                break;
+			case IQ_FIRM_FAITH:                    if (k_tick_check(sd, sd->spamtick_IQ_FIRM_FAITH,                    sd->spamcount_IQ_FIRM_FAITH,                    battle_config.kd_IQ_FIRM_FAITH,                    battle_config.kdw_IQ_FIRM_FAITH))                    { sd->spamcount_IQ_FIRM_FAITH = sd->k_tick_c; return 0; }                    sd->spamcount_IQ_FIRM_FAITH = 0;                    sd->spamtick_IQ_FIRM_FAITH = tick + sd->kdelay;                    break;
+			case IQ_WILL_OF_FAITH:                 if (k_tick_check(sd, sd->spamtick_IQ_WILL_OF_FAITH,                 sd->spamcount_IQ_WILL_OF_FAITH,                 battle_config.kd_IQ_WILL_OF_FAITH,                 battle_config.kdw_IQ_WILL_OF_FAITH))                 { sd->spamcount_IQ_WILL_OF_FAITH = sd->k_tick_c; return 0; }                 sd->spamcount_IQ_WILL_OF_FAITH = 0;                 sd->spamtick_IQ_WILL_OF_FAITH = tick + sd->kdelay;                 break;
+			case IQ_OLEUM_SANCTUM:                 if (k_tick_check(sd, sd->spamtick_IQ_OLEUM_SANCTUM,                 sd->spamcount_IQ_OLEUM_SANCTUM,                 battle_config.kd_IQ_OLEUM_SANCTUM,                 battle_config.kdw_IQ_OLEUM_SANCTUM))                 { sd->spamcount_IQ_OLEUM_SANCTUM = sd->k_tick_c; return 0; }                 sd->spamcount_IQ_OLEUM_SANCTUM = 0;                 sd->spamtick_IQ_OLEUM_SANCTUM = tick + sd->kdelay;                 break;
+			case IQ_SINCERE_FAITH:                 if (k_tick_check(sd, sd->spamtick_IQ_SINCERE_FAITH,                 sd->spamcount_IQ_SINCERE_FAITH,                 battle_config.kd_IQ_SINCERE_FAITH,                 battle_config.kdw_IQ_SINCERE_FAITH))                 { sd->spamcount_IQ_SINCERE_FAITH = sd->k_tick_c; return 0; }                 sd->spamcount_IQ_SINCERE_FAITH = 0;                 sd->spamtick_IQ_SINCERE_FAITH = tick + sd->kdelay;                 break;
+			case IQ_MASSIVE_F_BLASTER:             if (k_tick_check(sd, sd->spamtick_IQ_MASSIVE_F_BLASTER,             sd->spamcount_IQ_MASSIVE_F_BLASTER,             battle_config.kd_IQ_MASSIVE_F_BLASTER,             battle_config.kdw_IQ_MASSIVE_F_BLASTER))             { sd->spamcount_IQ_MASSIVE_F_BLASTER = sd->k_tick_c; return 0; }             sd->spamcount_IQ_MASSIVE_F_BLASTER = 0;             sd->spamtick_IQ_MASSIVE_F_BLASTER = tick + sd->kdelay;             break;
+			case IQ_EXPOSION_BLASTER:              if (k_tick_check(sd, sd->spamtick_IQ_EXPOSION_BLASTER,              sd->spamcount_IQ_EXPOSION_BLASTER,              battle_config.kd_IQ_EXPOSION_BLASTER,              battle_config.kdw_IQ_EXPOSION_BLASTER))              { sd->spamcount_IQ_EXPOSION_BLASTER = sd->k_tick_c; return 0; }              sd->spamcount_IQ_EXPOSION_BLASTER = 0;              sd->spamtick_IQ_EXPOSION_BLASTER = tick + sd->kdelay;              break;
+			case IQ_FIRST_BRAND:                   if (k_tick_check(sd, sd->spamtick_IQ_FIRST_BRAND,                   sd->spamcount_IQ_FIRST_BRAND,                   battle_config.kd_IQ_FIRST_BRAND,                   battle_config.kdw_IQ_FIRST_BRAND))                   { sd->spamcount_IQ_FIRST_BRAND = sd->k_tick_c; return 0; }                   sd->spamcount_IQ_FIRST_BRAND = 0;                   sd->spamtick_IQ_FIRST_BRAND = tick + sd->kdelay;                   break;
+			case IQ_FIRST_FAITH_POWER:             if (k_tick_check(sd, sd->spamtick_IQ_FIRST_FAITH_POWER,             sd->spamcount_IQ_FIRST_FAITH_POWER,             battle_config.kd_IQ_FIRST_FAITH_POWER,             battle_config.kdw_IQ_FIRST_FAITH_POWER))             { sd->spamcount_IQ_FIRST_FAITH_POWER = sd->k_tick_c; return 0; }             sd->spamcount_IQ_FIRST_FAITH_POWER = 0;             sd->spamtick_IQ_FIRST_FAITH_POWER = tick + sd->kdelay;             break;
+			case IQ_JUDGE:                         if (k_tick_check(sd, sd->spamtick_IQ_JUDGE,                         sd->spamcount_IQ_JUDGE,                         battle_config.kd_IQ_JUDGE,                         battle_config.kdw_IQ_JUDGE))                         { sd->spamcount_IQ_JUDGE = sd->k_tick_c; return 0; }                         sd->spamcount_IQ_JUDGE = 0;                         sd->spamtick_IQ_JUDGE = tick + sd->kdelay;                         break;
+			case IQ_SECOND_FLAME:                  if (k_tick_check(sd, sd->spamtick_IQ_SECOND_FLAME,                  sd->spamcount_IQ_SECOND_FLAME,                  battle_config.kd_IQ_SECOND_FLAME,                  battle_config.kdw_IQ_SECOND_FLAME))                  { sd->spamcount_IQ_SECOND_FLAME = sd->k_tick_c; return 0; }                  sd->spamcount_IQ_SECOND_FLAME = 0;                  sd->spamtick_IQ_SECOND_FLAME = tick + sd->kdelay;                  break;
+			case IQ_SECOND_FAITH:                  if (k_tick_check(sd, sd->spamtick_IQ_SECOND_FAITH,                  sd->spamcount_IQ_SECOND_FAITH,                  battle_config.kd_IQ_SECOND_FAITH,                  battle_config.kdw_IQ_SECOND_FAITH))                  { sd->spamcount_IQ_SECOND_FAITH = sd->k_tick_c; return 0; }                  sd->spamcount_IQ_SECOND_FAITH = 0;                  sd->spamtick_IQ_SECOND_FAITH = tick + sd->kdelay;                  break;
+			case IQ_SECOND_JUDGEMENT:              if (k_tick_check(sd, sd->spamtick_IQ_SECOND_JUDGEMENT,              sd->spamcount_IQ_SECOND_JUDGEMENT,              battle_config.kd_IQ_SECOND_JUDGEMENT,              battle_config.kdw_IQ_SECOND_JUDGEMENT))              { sd->spamcount_IQ_SECOND_JUDGEMENT = sd->k_tick_c; return 0; }              sd->spamcount_IQ_SECOND_JUDGEMENT = 0;              sd->spamtick_IQ_SECOND_JUDGEMENT = tick + sd->kdelay;              break;
+			case IQ_THIRD_PUNISH:                  if (k_tick_check(sd, sd->spamtick_IQ_THIRD_PUNISH,                  sd->spamcount_IQ_THIRD_PUNISH,                  battle_config.kd_IQ_THIRD_PUNISH,                  battle_config.kdw_IQ_THIRD_PUNISH))                  { sd->spamcount_IQ_THIRD_PUNISH = sd->k_tick_c; return 0; }                  sd->spamcount_IQ_THIRD_PUNISH = 0;                  sd->spamtick_IQ_THIRD_PUNISH = tick + sd->kdelay;                  break;
+			case IQ_THIRD_FLAME_BOMB:              if (k_tick_check(sd, sd->spamtick_IQ_THIRD_FLAME_BOMB,              sd->spamcount_IQ_THIRD_FLAME_BOMB,              battle_config.kd_IQ_THIRD_FLAME_BOMB,              battle_config.kdw_IQ_THIRD_FLAME_BOMB))              { sd->spamcount_IQ_THIRD_FLAME_BOMB = sd->k_tick_c; return 0; }              sd->spamcount_IQ_THIRD_FLAME_BOMB = 0;              sd->spamtick_IQ_THIRD_FLAME_BOMB = tick + sd->kdelay;              break;
+			case IQ_THIRD_CONSECRATION:            if (k_tick_check(sd, sd->spamtick_IQ_THIRD_CONSECRATION,            sd->spamcount_IQ_THIRD_CONSECRATION,            battle_config.kd_IQ_THIRD_CONSECRATION,            battle_config.kdw_IQ_THIRD_CONSECRATION))            { sd->spamcount_IQ_THIRD_CONSECRATION = sd->k_tick_c; return 0; }            sd->spamcount_IQ_THIRD_CONSECRATION = 0;            sd->spamtick_IQ_THIRD_CONSECRATION = tick + sd->kdelay;            break;
+			case IQ_THIRD_EXOR_FLAME:              if (k_tick_check(sd, sd->spamtick_IQ_THIRD_EXOR_FLAME,              sd->spamcount_IQ_THIRD_EXOR_FLAME,              battle_config.kd_IQ_THIRD_EXOR_FLAME,              battle_config.kdw_IQ_THIRD_EXOR_FLAME))              { sd->spamcount_IQ_THIRD_EXOR_FLAME = sd->k_tick_c; return 0; }              sd->spamcount_IQ_THIRD_EXOR_FLAME = 0;              sd->spamtick_IQ_THIRD_EXOR_FLAME = tick + sd->kdelay;              break;
+			case IG_GUARD_STANCE:                  if (k_tick_check(sd, sd->spamtick_IG_GUARD_STANCE,                  sd->spamcount_IG_GUARD_STANCE,                  battle_config.kd_IG_GUARD_STANCE,                  battle_config.kdw_IG_GUARD_STANCE))                  { sd->spamcount_IG_GUARD_STANCE = sd->k_tick_c; return 0; }                  sd->spamcount_IG_GUARD_STANCE = 0;                  sd->spamtick_IG_GUARD_STANCE = tick + sd->kdelay;                  break;
+			case IG_GUARDIAN_SHIELD:               if (k_tick_check(sd, sd->spamtick_IG_GUARDIAN_SHIELD,               sd->spamcount_IG_GUARDIAN_SHIELD,               battle_config.kd_IG_GUARDIAN_SHIELD,               battle_config.kdw_IG_GUARDIAN_SHIELD))               { sd->spamcount_IG_GUARDIAN_SHIELD = sd->k_tick_c; return 0; }               sd->spamcount_IG_GUARDIAN_SHIELD = 0;               sd->spamtick_IG_GUARDIAN_SHIELD = tick + sd->kdelay;               break;
+			case IG_REBOUND_SHIELD:                if (k_tick_check(sd, sd->spamtick_IG_REBOUND_SHIELD,                sd->spamcount_IG_REBOUND_SHIELD,                battle_config.kd_IG_REBOUND_SHIELD,                battle_config.kdw_IG_REBOUND_SHIELD))                { sd->spamcount_IG_REBOUND_SHIELD = sd->k_tick_c; return 0; }                sd->spamcount_IG_REBOUND_SHIELD = 0;                sd->spamtick_IG_REBOUND_SHIELD = tick + sd->kdelay;                break;
+			case IG_ATTACK_STANCE:                 if (k_tick_check(sd, sd->spamtick_IG_ATTACK_STANCE,                 sd->spamcount_IG_ATTACK_STANCE,                 battle_config.kd_IG_ATTACK_STANCE,                 battle_config.kdw_IG_ATTACK_STANCE))                 { sd->spamcount_IG_ATTACK_STANCE = sd->k_tick_c; return 0; }                 sd->spamcount_IG_ATTACK_STANCE = 0;                 sd->spamtick_IG_ATTACK_STANCE = tick + sd->kdelay;                 break;
+			case IG_ULTIMATE_SACRIFICE:            if (k_tick_check(sd, sd->spamtick_IG_ULTIMATE_SACRIFICE,            sd->spamcount_IG_ULTIMATE_SACRIFICE,            battle_config.kd_IG_ULTIMATE_SACRIFICE,            battle_config.kdw_IG_ULTIMATE_SACRIFICE))            { sd->spamcount_IG_ULTIMATE_SACRIFICE = sd->k_tick_c; return 0; }            sd->spamcount_IG_ULTIMATE_SACRIFICE = 0;            sd->spamtick_IG_ULTIMATE_SACRIFICE = tick + sd->kdelay;            break;
+			case IG_HOLY_SHIELD:                   if (k_tick_check(sd, sd->spamtick_IG_HOLY_SHIELD,                   sd->spamcount_IG_HOLY_SHIELD,                   battle_config.kd_IG_HOLY_SHIELD,                   battle_config.kdw_IG_HOLY_SHIELD))                   { sd->spamcount_IG_HOLY_SHIELD = sd->k_tick_c; return 0; }                   sd->spamcount_IG_HOLY_SHIELD = 0;                   sd->spamtick_IG_HOLY_SHIELD = tick + sd->kdelay;                   break;
+			case IG_GRAND_JUDGEMENT:               if (k_tick_check(sd, sd->spamtick_IG_GRAND_JUDGEMENT,               sd->spamcount_IG_GRAND_JUDGEMENT,               battle_config.kd_IG_GRAND_JUDGEMENT,               battle_config.kdw_IG_GRAND_JUDGEMENT))               { sd->spamcount_IG_GRAND_JUDGEMENT = sd->k_tick_c; return 0; }               sd->spamcount_IG_GRAND_JUDGEMENT = 0;               sd->spamtick_IG_GRAND_JUDGEMENT = tick + sd->kdelay;               break;
+			case IG_JUDGEMENT_CROSS:               if (k_tick_check(sd, sd->spamtick_IG_JUDGEMENT_CROSS,               sd->spamcount_IG_JUDGEMENT_CROSS,               battle_config.kd_IG_JUDGEMENT_CROSS,               battle_config.kdw_IG_JUDGEMENT_CROSS))               { sd->spamcount_IG_JUDGEMENT_CROSS = sd->k_tick_c; return 0; }               sd->spamcount_IG_JUDGEMENT_CROSS = 0;               sd->spamtick_IG_JUDGEMENT_CROSS = tick + sd->kdelay;               break;
+			case IG_SHIELD_SHOOTING:               if (k_tick_check(sd, sd->spamtick_IG_SHIELD_SHOOTING,               sd->spamcount_IG_SHIELD_SHOOTING,               battle_config.kd_IG_SHIELD_SHOOTING,               battle_config.kdw_IG_SHIELD_SHOOTING))               { sd->spamcount_IG_SHIELD_SHOOTING = sd->k_tick_c; return 0; }               sd->spamcount_IG_SHIELD_SHOOTING = 0;               sd->spamtick_IG_SHIELD_SHOOTING = tick + sd->kdelay;               break;
+			case IG_OVERSLASH:                     if (k_tick_check(sd, sd->spamtick_IG_OVERSLASH,                     sd->spamcount_IG_OVERSLASH,                     battle_config.kd_IG_OVERSLASH,                     battle_config.kdw_IG_OVERSLASH))                     { sd->spamcount_IG_OVERSLASH = sd->k_tick_c; return 0; }                     sd->spamcount_IG_OVERSLASH = 0;                     sd->spamtick_IG_OVERSLASH = tick + sd->kdelay;                     break;
+			case IG_CROSS_RAIN:                    if (k_tick_check(sd, sd->spamtick_IG_CROSS_RAIN,                    sd->spamcount_IG_CROSS_RAIN,                    battle_config.kd_IG_CROSS_RAIN,                    battle_config.kdw_IG_CROSS_RAIN))                    { sd->spamcount_IG_CROSS_RAIN = sd->k_tick_c; return 0; }                    sd->spamcount_IG_CROSS_RAIN = 0;                    sd->spamtick_IG_CROSS_RAIN = tick + sd->kdelay;                    break;
+			case CD_REPARATIO:                     if (k_tick_check(sd, sd->spamtick_CD_REPARATIO,                     sd->spamcount_CD_REPARATIO,                     battle_config.kd_CD_REPARATIO,                     battle_config.kdw_CD_REPARATIO))                     { sd->spamcount_CD_REPARATIO = sd->k_tick_c; return 0; }                     sd->spamcount_CD_REPARATIO = 0;                     sd->spamtick_CD_REPARATIO = tick + sd->kdelay;                     break;
+			case CD_MEDIALE_VOTUM:                 if (k_tick_check(sd, sd->spamtick_CD_MEDIALE_VOTUM,                 sd->spamcount_CD_MEDIALE_VOTUM,                 battle_config.kd_CD_MEDIALE_VOTUM,                 battle_config.kdw_CD_MEDIALE_VOTUM))                 { sd->spamcount_CD_MEDIALE_VOTUM = sd->k_tick_c; return 0; }                 sd->spamcount_CD_MEDIALE_VOTUM = 0;                 sd->spamtick_CD_MEDIALE_VOTUM = tick + sd->kdelay;                 break;
+			case CD_ARGUTUS_VITA:                  if (k_tick_check(sd, sd->spamtick_CD_ARGUTUS_VITA,                  sd->spamcount_CD_ARGUTUS_VITA,                  battle_config.kd_CD_ARGUTUS_VITA,                  battle_config.kdw_CD_ARGUTUS_VITA))                  { sd->spamcount_CD_ARGUTUS_VITA = sd->k_tick_c; return 0; }                  sd->spamcount_CD_ARGUTUS_VITA = 0;                  sd->spamtick_CD_ARGUTUS_VITA = tick + sd->kdelay;                  break;
+			case CD_ARGUTUS_TELUM:                 if (k_tick_check(sd, sd->spamtick_CD_ARGUTUS_TELUM,                 sd->spamcount_CD_ARGUTUS_TELUM,                 battle_config.kd_CD_ARGUTUS_TELUM,                 battle_config.kdw_CD_ARGUTUS_TELUM))                 { sd->spamcount_CD_ARGUTUS_TELUM = sd->k_tick_c; return 0; }                 sd->spamcount_CD_ARGUTUS_TELUM = 0;                 sd->spamtick_CD_ARGUTUS_TELUM = tick + sd->kdelay;                 break;
+			case CD_ARBITRIUM:                     if (k_tick_check(sd, sd->spamtick_CD_ARBITRIUM,                     sd->spamcount_CD_ARBITRIUM,                     battle_config.kd_CD_ARBITRIUM,                     battle_config.kdw_CD_ARBITRIUM))                     { sd->spamcount_CD_ARBITRIUM = sd->k_tick_c; return 0; }                     sd->spamcount_CD_ARBITRIUM = 0;                     sd->spamtick_CD_ARBITRIUM = tick + sd->kdelay;                     break;
+			case CD_PRESENS_ACIES:                 if (k_tick_check(sd, sd->spamtick_CD_PRESENS_ACIES,                 sd->spamcount_CD_PRESENS_ACIES,                 battle_config.kd_CD_PRESENS_ACIES,                 battle_config.kdw_CD_PRESENS_ACIES))                 { sd->spamcount_CD_PRESENS_ACIES = sd->k_tick_c; return 0; }                 sd->spamcount_CD_PRESENS_ACIES = 0;                 sd->spamtick_CD_PRESENS_ACIES = tick + sd->kdelay;                 break;
+			case CD_EFFLIGO:                       if (k_tick_check(sd, sd->spamtick_CD_EFFLIGO,                       sd->spamcount_CD_EFFLIGO,                       battle_config.kd_CD_EFFLIGO,                       battle_config.kdw_CD_EFFLIGO))                       { sd->spamcount_CD_EFFLIGO = sd->k_tick_c; return 0; }                       sd->spamcount_CD_EFFLIGO = 0;                       sd->spamtick_CD_EFFLIGO = tick + sd->kdelay;                       break;
+			case CD_COMPETENTIA:                   if (k_tick_check(sd, sd->spamtick_CD_COMPETENTIA,                   sd->spamcount_CD_COMPETENTIA,                   battle_config.kd_CD_COMPETENTIA,                   battle_config.kdw_CD_COMPETENTIA))                   { sd->spamcount_CD_COMPETENTIA = sd->k_tick_c; return 0; }                   sd->spamcount_CD_COMPETENTIA = 0;                   sd->spamtick_CD_COMPETENTIA = tick + sd->kdelay;                   break;
+			case CD_PNEUMATICUS_PROCELLA:          if (k_tick_check(sd, sd->spamtick_CD_PNEUMATICUS_PROCELLA,          sd->spamcount_CD_PNEUMATICUS_PROCELLA,          battle_config.kd_CD_PNEUMATICUS_PROCELLA,          battle_config.kdw_CD_PNEUMATICUS_PROCELLA))          { sd->spamcount_CD_PNEUMATICUS_PROCELLA = sd->k_tick_c; return 0; }          sd->spamcount_CD_PNEUMATICUS_PROCELLA = 0;          sd->spamtick_CD_PNEUMATICUS_PROCELLA = tick + sd->kdelay;          break;
+			case CD_DILECTIO_HEAL:                 if (k_tick_check(sd, sd->spamtick_CD_DILECTIO_HEAL,                 sd->spamcount_CD_DILECTIO_HEAL,                 battle_config.kd_CD_DILECTIO_HEAL,                 battle_config.kdw_CD_DILECTIO_HEAL))                 { sd->spamcount_CD_DILECTIO_HEAL = sd->k_tick_c; return 0; }                 sd->spamcount_CD_DILECTIO_HEAL = 0;                 sd->spamtick_CD_DILECTIO_HEAL = tick + sd->kdelay;                 break;
+			case CD_RELIGIO:                       if (k_tick_check(sd, sd->spamtick_CD_RELIGIO,                       sd->spamcount_CD_RELIGIO,                       battle_config.kd_CD_RELIGIO,                       battle_config.kdw_CD_RELIGIO))                       { sd->spamcount_CD_RELIGIO = sd->k_tick_c; return 0; }                       sd->spamcount_CD_RELIGIO = 0;                       sd->spamtick_CD_RELIGIO = tick + sd->kdelay;                       break;
+			case CD_BENEDICTUM:                    if (k_tick_check(sd, sd->spamtick_CD_BENEDICTUM,                    sd->spamcount_CD_BENEDICTUM,                    battle_config.kd_CD_BENEDICTUM,                    battle_config.kdw_CD_BENEDICTUM))                    { sd->spamcount_CD_BENEDICTUM = sd->k_tick_c; return 0; }                    sd->spamcount_CD_BENEDICTUM = 0;                    sd->spamtick_CD_BENEDICTUM = tick + sd->kdelay;                    break;
+			case CD_PETITIO:                       if (k_tick_check(sd, sd->spamtick_CD_PETITIO,                       sd->spamcount_CD_PETITIO,                       battle_config.kd_CD_PETITIO,                       battle_config.kdw_CD_PETITIO))                       { sd->spamcount_CD_PETITIO = sd->k_tick_c; return 0; }                       sd->spamcount_CD_PETITIO = 0;                       sd->spamtick_CD_PETITIO = tick + sd->kdelay;                       break;
+			case CD_FRAMEN:                        if (k_tick_check(sd, sd->spamtick_CD_FRAMEN,                        sd->spamcount_CD_FRAMEN,                        battle_config.kd_CD_FRAMEN,                        battle_config.kdw_CD_FRAMEN))                        { sd->spamcount_CD_FRAMEN = sd->k_tick_c; return 0; }                        sd->spamcount_CD_FRAMEN = 0;                        sd->spamtick_CD_FRAMEN = tick + sd->kdelay;                        break;
+			case SHC_SHADOW_EXCEED:                if (k_tick_check(sd, sd->spamtick_SHC_SHADOW_EXCEED,                sd->spamcount_SHC_SHADOW_EXCEED,                battle_config.kd_SHC_SHADOW_EXCEED,                battle_config.kdw_SHC_SHADOW_EXCEED))                { sd->spamcount_SHC_SHADOW_EXCEED = sd->k_tick_c; return 0; }                sd->spamcount_SHC_SHADOW_EXCEED = 0;                sd->spamtick_SHC_SHADOW_EXCEED = tick + sd->kdelay;                break;
+			case SHC_DANCING_KNIFE:                if (k_tick_check(sd, sd->spamtick_SHC_DANCING_KNIFE,                sd->spamcount_SHC_DANCING_KNIFE,                battle_config.kd_SHC_DANCING_KNIFE,                battle_config.kdw_SHC_DANCING_KNIFE))                { sd->spamcount_SHC_DANCING_KNIFE = sd->k_tick_c; return 0; }                sd->spamcount_SHC_DANCING_KNIFE = 0;                sd->spamtick_SHC_DANCING_KNIFE = tick + sd->kdelay;                break;
+			case SHC_SAVAGE_IMPACT:                if (k_tick_check(sd, sd->spamtick_SHC_SAVAGE_IMPACT,                sd->spamcount_SHC_SAVAGE_IMPACT,                battle_config.kd_SHC_SAVAGE_IMPACT,                battle_config.kdw_SHC_SAVAGE_IMPACT))                { sd->spamcount_SHC_SAVAGE_IMPACT = sd->k_tick_c; return 0; }                sd->spamcount_SHC_SAVAGE_IMPACT = 0;                sd->spamtick_SHC_SAVAGE_IMPACT = tick + sd->kdelay;                break;
+			case SHC_ETERNAL_SLASH:                if (k_tick_check(sd, sd->spamtick_SHC_ETERNAL_SLASH,                sd->spamcount_SHC_ETERNAL_SLASH,                battle_config.kd_SHC_ETERNAL_SLASH,                battle_config.kdw_SHC_ETERNAL_SLASH))                { sd->spamcount_SHC_ETERNAL_SLASH = sd->k_tick_c; return 0; }                sd->spamcount_SHC_ETERNAL_SLASH = 0;                sd->spamtick_SHC_ETERNAL_SLASH = tick + sd->kdelay;                break;
+			case SHC_POTENT_VENOM:                 if (k_tick_check(sd, sd->spamtick_SHC_POTENT_VENOM,                 sd->spamcount_SHC_POTENT_VENOM,                 battle_config.kd_SHC_POTENT_VENOM,                 battle_config.kdw_SHC_POTENT_VENOM))                 { sd->spamcount_SHC_POTENT_VENOM = sd->k_tick_c; return 0; }                 sd->spamcount_SHC_POTENT_VENOM = 0;                 sd->spamtick_SHC_POTENT_VENOM = tick + sd->kdelay;                 break;
+			case SHC_SHADOW_STAB:                  if (k_tick_check(sd, sd->spamtick_SHC_SHADOW_STAB,                  sd->spamcount_SHC_SHADOW_STAB,                  battle_config.kd_SHC_SHADOW_STAB,                  battle_config.kdw_SHC_SHADOW_STAB))                  { sd->spamcount_SHC_SHADOW_STAB = sd->k_tick_c; return 0; }                  sd->spamcount_SHC_SHADOW_STAB = 0;                  sd->spamtick_SHC_SHADOW_STAB = tick + sd->kdelay;                  break;
+			case SHC_IMPACT_CRATER:                if (k_tick_check(sd, sd->spamtick_SHC_IMPACT_CRATER,                sd->spamcount_SHC_IMPACT_CRATER,                battle_config.kd_SHC_IMPACT_CRATER,                battle_config.kdw_SHC_IMPACT_CRATER))                { sd->spamcount_SHC_IMPACT_CRATER = sd->k_tick_c; return 0; }                sd->spamcount_SHC_IMPACT_CRATER = 0;                sd->spamtick_SHC_IMPACT_CRATER = tick + sd->kdelay;                break;
+			case SHC_ENCHANTING_SHADOW:            if (k_tick_check(sd, sd->spamtick_SHC_ENCHANTING_SHADOW,            sd->spamcount_SHC_ENCHANTING_SHADOW,            battle_config.kd_SHC_ENCHANTING_SHADOW,            battle_config.kdw_SHC_ENCHANTING_SHADOW))            { sd->spamcount_SHC_ENCHANTING_SHADOW = sd->k_tick_c; return 0; }            sd->spamcount_SHC_ENCHANTING_SHADOW = 0;            sd->spamtick_SHC_ENCHANTING_SHADOW = tick + sd->kdelay;            break;
+			case SHC_FATAL_SHADOW_CROW:            if (k_tick_check(sd, sd->spamtick_SHC_FATAL_SHADOW_CROW,            sd->spamcount_SHC_FATAL_SHADOW_CROW,            battle_config.kd_SHC_FATAL_SHADOW_CROW,            battle_config.kdw_SHC_FATAL_SHADOW_CROW))            { sd->spamcount_SHC_FATAL_SHADOW_CROW = sd->k_tick_c; return 0; }            sd->spamcount_SHC_FATAL_SHADOW_CROW = 0;            sd->spamtick_SHC_FATAL_SHADOW_CROW = tick + sd->kdelay;            break;
+			case MT_AXE_STOMP:                     if (k_tick_check(sd, sd->spamtick_MT_AXE_STOMP,                     sd->spamcount_MT_AXE_STOMP,                     battle_config.kd_MT_AXE_STOMP,                     battle_config.kdw_MT_AXE_STOMP))                     { sd->spamcount_MT_AXE_STOMP = sd->k_tick_c; return 0; }                     sd->spamcount_MT_AXE_STOMP = 0;                     sd->spamtick_MT_AXE_STOMP = tick + sd->kdelay;                     break;
+			case MT_RUSH_QUAKE:                    if (k_tick_check(sd, sd->spamtick_MT_RUSH_QUAKE,                    sd->spamcount_MT_RUSH_QUAKE,                    battle_config.kd_MT_RUSH_QUAKE,                    battle_config.kdw_MT_RUSH_QUAKE))                    { sd->spamcount_MT_RUSH_QUAKE = sd->k_tick_c; return 0; }                    sd->spamcount_MT_RUSH_QUAKE = 0;                    sd->spamtick_MT_RUSH_QUAKE = tick + sd->kdelay;                    break;
+			case MT_M_MACHINE:                     if (k_tick_check(sd, sd->spamtick_MT_M_MACHINE,                     sd->spamcount_MT_M_MACHINE,                     battle_config.kd_MT_M_MACHINE,                     battle_config.kdw_MT_M_MACHINE))                     { sd->spamcount_MT_M_MACHINE = sd->k_tick_c; return 0; }                     sd->spamcount_MT_M_MACHINE = 0;                     sd->spamtick_MT_M_MACHINE = tick + sd->kdelay;                     break;
+			case MT_A_MACHINE:                     if (k_tick_check(sd, sd->spamtick_MT_A_MACHINE,                     sd->spamcount_MT_A_MACHINE,                     battle_config.kd_MT_A_MACHINE,                     battle_config.kdw_MT_A_MACHINE))                     { sd->spamcount_MT_A_MACHINE = sd->k_tick_c; return 0; }                     sd->spamcount_MT_A_MACHINE = 0;                     sd->spamtick_MT_A_MACHINE = tick + sd->kdelay;                     break;
+			case MT_D_MACHINE:                     if (k_tick_check(sd, sd->spamtick_MT_D_MACHINE,                     sd->spamcount_MT_D_MACHINE,                     battle_config.kd_MT_D_MACHINE,                     battle_config.kdw_MT_D_MACHINE))                     { sd->spamcount_MT_D_MACHINE = sd->k_tick_c; return 0; }                     sd->spamcount_MT_D_MACHINE = 0;                     sd->spamtick_MT_D_MACHINE = tick + sd->kdelay;                     break;
+			case MT_TWOAXEDEF:                     if (k_tick_check(sd, sd->spamtick_MT_TWOAXEDEF,                     sd->spamcount_MT_TWOAXEDEF,                     battle_config.kd_MT_TWOAXEDEF,                     battle_config.kdw_MT_TWOAXEDEF))                     { sd->spamcount_MT_TWOAXEDEF = sd->k_tick_c; return 0; }                     sd->spamcount_MT_TWOAXEDEF = 0;                     sd->spamtick_MT_TWOAXEDEF = tick + sd->kdelay;                     break;
+			case MT_ABR_M:                         if (k_tick_check(sd, sd->spamtick_MT_ABR_M,                         sd->spamcount_MT_ABR_M,                         battle_config.kd_MT_ABR_M,                         battle_config.kdw_MT_ABR_M))                         { sd->spamcount_MT_ABR_M = sd->k_tick_c; return 0; }                         sd->spamcount_MT_ABR_M = 0;                         sd->spamtick_MT_ABR_M = tick + sd->kdelay;                         break;
+			case MT_SUMMON_ABR_BATTLE_WARIOR:      if (k_tick_check(sd, sd->spamtick_MT_SUMMON_ABR_BATTLE_WARIOR,      sd->spamcount_MT_SUMMON_ABR_BATTLE_WARIOR,      battle_config.kd_MT_SUMMON_ABR_BATTLE_WARIOR,      battle_config.kdw_MT_SUMMON_ABR_BATTLE_WARIOR))      { sd->spamcount_MT_SUMMON_ABR_BATTLE_WARIOR = sd->k_tick_c; return 0; }      sd->spamcount_MT_SUMMON_ABR_BATTLE_WARIOR = 0;      sd->spamtick_MT_SUMMON_ABR_BATTLE_WARIOR = tick + sd->kdelay;      break;
+			case MT_SUMMON_ABR_DUAL_CANNON:        if (k_tick_check(sd, sd->spamtick_MT_SUMMON_ABR_DUAL_CANNON,        sd->spamcount_MT_SUMMON_ABR_DUAL_CANNON,        battle_config.kd_MT_SUMMON_ABR_DUAL_CANNON,        battle_config.kdw_MT_SUMMON_ABR_DUAL_CANNON))        { sd->spamcount_MT_SUMMON_ABR_DUAL_CANNON = sd->k_tick_c; return 0; }        sd->spamcount_MT_SUMMON_ABR_DUAL_CANNON = 0;        sd->spamtick_MT_SUMMON_ABR_DUAL_CANNON = tick + sd->kdelay;        break;
+			case MT_SUMMON_ABR_MOTHER_NET:         if (k_tick_check(sd, sd->spamtick_MT_SUMMON_ABR_MOTHER_NET,         sd->spamcount_MT_SUMMON_ABR_MOTHER_NET,         battle_config.kd_MT_SUMMON_ABR_MOTHER_NET,         battle_config.kdw_MT_SUMMON_ABR_MOTHER_NET))         { sd->spamcount_MT_SUMMON_ABR_MOTHER_NET = sd->k_tick_c; return 0; }         sd->spamcount_MT_SUMMON_ABR_MOTHER_NET = 0;         sd->spamtick_MT_SUMMON_ABR_MOTHER_NET = tick + sd->kdelay;         break;
+			case MT_SUMMON_ABR_INFINITY:           if (k_tick_check(sd, sd->spamtick_MT_SUMMON_ABR_INFINITY,           sd->spamcount_MT_SUMMON_ABR_INFINITY,           battle_config.kd_MT_SUMMON_ABR_INFINITY,           battle_config.kdw_MT_SUMMON_ABR_INFINITY))           { sd->spamcount_MT_SUMMON_ABR_INFINITY = sd->k_tick_c; return 0; }           sd->spamcount_MT_SUMMON_ABR_INFINITY = 0;           sd->spamtick_MT_SUMMON_ABR_INFINITY = tick + sd->kdelay;           break;
+			case AG_DESTRUCTIVE_HURRICANE_CLIMAX:  if (k_tick_check(sd, sd->spamtick_AG_DESTRUCTIVE_HURRICANE_CLIMAX,  sd->spamcount_AG_DESTRUCTIVE_HURRICANE_CLIMAX,  battle_config.kd_AG_DESTRUCTIVE_HURRICANE_CLIMAX,  battle_config.kdw_AG_DESTRUCTIVE_HURRICANE_CLIMAX))  { sd->spamcount_AG_DESTRUCTIVE_HURRICANE_CLIMAX = sd->k_tick_c; return 0; }  sd->spamcount_AG_DESTRUCTIVE_HURRICANE_CLIMAX = 0;  sd->spamtick_AG_DESTRUCTIVE_HURRICANE_CLIMAX = tick + sd->kdelay;  break;
+			case ABC_STRIP_SHADOW:                 if (k_tick_check(sd, sd->spamtick_ABC_STRIP_SHADOW,                 sd->spamcount_ABC_STRIP_SHADOW,                 battle_config.kd_ABC_STRIP_SHADOW,                 battle_config.kdw_ABC_STRIP_SHADOW))                 { sd->spamcount_ABC_STRIP_SHADOW = sd->k_tick_c; return 0; }                 sd->spamcount_ABC_STRIP_SHADOW = 0;                 sd->spamtick_ABC_STRIP_SHADOW = tick + sd->kdelay;                 break;
+			case ABC_ABYSS_DAGGER:                 if (k_tick_check(sd, sd->spamtick_ABC_ABYSS_DAGGER,                 sd->spamcount_ABC_ABYSS_DAGGER,                 battle_config.kd_ABC_ABYSS_DAGGER,                 battle_config.kdw_ABC_ABYSS_DAGGER))                 { sd->spamcount_ABC_ABYSS_DAGGER = sd->k_tick_c; return 0; }                 sd->spamcount_ABC_ABYSS_DAGGER = 0;                 sd->spamtick_ABC_ABYSS_DAGGER = tick + sd->kdelay;                 break;
+			case ABC_UNLUCKY_RUSH:                 if (k_tick_check(sd, sd->spamtick_ABC_UNLUCKY_RUSH,                 sd->spamcount_ABC_UNLUCKY_RUSH,                 battle_config.kd_ABC_UNLUCKY_RUSH,                 battle_config.kdw_ABC_UNLUCKY_RUSH))                 { sd->spamcount_ABC_UNLUCKY_RUSH = sd->k_tick_c; return 0; }                 sd->spamcount_ABC_UNLUCKY_RUSH = 0;                 sd->spamtick_ABC_UNLUCKY_RUSH = tick + sd->kdelay;                 break;
+			case ABC_CHAIN_REACTION_SHOT:          if (k_tick_check(sd, sd->spamtick_ABC_CHAIN_REACTION_SHOT,          sd->spamcount_ABC_CHAIN_REACTION_SHOT,          battle_config.kd_ABC_CHAIN_REACTION_SHOT,          battle_config.kdw_ABC_CHAIN_REACTION_SHOT))          { sd->spamcount_ABC_CHAIN_REACTION_SHOT = sd->k_tick_c; return 0; }          sd->spamcount_ABC_CHAIN_REACTION_SHOT = 0;          sd->spamtick_ABC_CHAIN_REACTION_SHOT = tick + sd->kdelay;          break;
+			case ABC_FROM_THE_ABYSS:               if (k_tick_check(sd, sd->spamtick_ABC_FROM_THE_ABYSS,               sd->spamcount_ABC_FROM_THE_ABYSS,               battle_config.kd_ABC_FROM_THE_ABYSS,               battle_config.kdw_ABC_FROM_THE_ABYSS))               { sd->spamcount_ABC_FROM_THE_ABYSS = sd->k_tick_c; return 0; }               sd->spamcount_ABC_FROM_THE_ABYSS = 0;               sd->spamtick_ABC_FROM_THE_ABYSS = tick + sd->kdelay;               break;
+			case ABC_ABYSS_SLAYER:                 if (k_tick_check(sd, sd->spamtick_ABC_ABYSS_SLAYER,                 sd->spamcount_ABC_ABYSS_SLAYER,                 battle_config.kd_ABC_ABYSS_SLAYER,                 battle_config.kdw_ABC_ABYSS_SLAYER))                 { sd->spamcount_ABC_ABYSS_SLAYER = sd->k_tick_c; return 0; }                 sd->spamcount_ABC_ABYSS_SLAYER = 0;                 sd->spamtick_ABC_ABYSS_SLAYER = tick + sd->kdelay;                 break;
+			case ABC_ABYSS_STRIKE:                 if (k_tick_check(sd, sd->spamtick_ABC_ABYSS_STRIKE,                 sd->spamcount_ABC_ABYSS_STRIKE,                 battle_config.kd_ABC_ABYSS_STRIKE,                 battle_config.kdw_ABC_ABYSS_STRIKE))                 { sd->spamcount_ABC_ABYSS_STRIKE = sd->k_tick_c; return 0; }                 sd->spamcount_ABC_ABYSS_STRIKE = 0;                 sd->spamtick_ABC_ABYSS_STRIKE = tick + sd->kdelay;                 break;
+			case ABC_DEFT_STAB:                    if (k_tick_check(sd, sd->spamtick_ABC_DEFT_STAB,                    sd->spamcount_ABC_DEFT_STAB,                    battle_config.kd_ABC_DEFT_STAB,                    battle_config.kdw_ABC_DEFT_STAB))                    { sd->spamcount_ABC_DEFT_STAB = sd->k_tick_c; return 0; }                    sd->spamcount_ABC_DEFT_STAB = 0;                    sd->spamtick_ABC_DEFT_STAB = tick + sd->kdelay;                    break;
+			case ABC_ABYSS_SQUARE:                 if (k_tick_check(sd, sd->spamtick_ABC_ABYSS_SQUARE,                 sd->spamcount_ABC_ABYSS_SQUARE,                 battle_config.kd_ABC_ABYSS_SQUARE,                 battle_config.kdw_ABC_ABYSS_SQUARE))                 { sd->spamcount_ABC_ABYSS_SQUARE = sd->k_tick_c; return 0; }                 sd->spamcount_ABC_ABYSS_SQUARE = 0;                 sd->spamtick_ABC_ABYSS_SQUARE = tick + sd->kdelay;                 break;
+			case ABC_FRENZY_SHOT:                  if (k_tick_check(sd, sd->spamtick_ABC_FRENZY_SHOT,                  sd->spamcount_ABC_FRENZY_SHOT,                  battle_config.kd_ABC_FRENZY_SHOT,                  battle_config.kdw_ABC_FRENZY_SHOT))                  { sd->spamcount_ABC_FRENZY_SHOT = sd->k_tick_c; return 0; }                  sd->spamcount_ABC_FRENZY_SHOT = 0;                  sd->spamtick_ABC_FRENZY_SHOT = tick + sd->kdelay;                  break;
+			case WH_NATUREFRIENDLY:                if (k_tick_check(sd, sd->spamtick_WH_NATUREFRIENDLY,                sd->spamcount_WH_NATUREFRIENDLY,                battle_config.kd_WH_NATUREFRIENDLY,                battle_config.kdw_WH_NATUREFRIENDLY))                { sd->spamcount_WH_NATUREFRIENDLY = sd->k_tick_c; return 0; }                sd->spamcount_WH_NATUREFRIENDLY = 0;                sd->spamtick_WH_NATUREFRIENDLY = tick + sd->kdelay;                break;
+			case WH_HAWKRUSH:                      if (k_tick_check(sd, sd->spamtick_WH_HAWKRUSH,                      sd->spamcount_WH_HAWKRUSH,                      battle_config.kd_WH_HAWKRUSH,                      battle_config.kdw_WH_HAWKRUSH))                      { sd->spamcount_WH_HAWKRUSH = sd->k_tick_c; return 0; }                      sd->spamcount_WH_HAWKRUSH = 0;                      sd->spamtick_WH_HAWKRUSH = tick + sd->kdelay;                      break;
+			case WH_HAWKBOOMERANG:                 if (k_tick_check(sd, sd->spamtick_WH_HAWKBOOMERANG,                 sd->spamcount_WH_HAWKBOOMERANG,                 battle_config.kd_WH_HAWKBOOMERANG,                 battle_config.kdw_WH_HAWKBOOMERANG))                 { sd->spamcount_WH_HAWKBOOMERANG = sd->k_tick_c; return 0; }                 sd->spamcount_WH_HAWKBOOMERANG = 0;                 sd->spamtick_WH_HAWKBOOMERANG = tick + sd->kdelay;                 break;
+			case WH_GALESTORM:                     if (k_tick_check(sd, sd->spamtick_WH_GALESTORM,                     sd->spamcount_WH_GALESTORM,                     battle_config.kd_WH_GALESTORM,                     battle_config.kdw_WH_GALESTORM))                     { sd->spamcount_WH_GALESTORM = sd->k_tick_c; return 0; }                     sd->spamcount_WH_GALESTORM = 0;                     sd->spamtick_WH_GALESTORM = tick + sd->kdelay;                     break;
+			case WH_DEEPBLINDTRAP:                 if (k_tick_check(sd, sd->spamtick_WH_DEEPBLINDTRAP,                 sd->spamcount_WH_DEEPBLINDTRAP,                 battle_config.kd_WH_DEEPBLINDTRAP,                 battle_config.kdw_WH_DEEPBLINDTRAP))                 { sd->spamcount_WH_DEEPBLINDTRAP = sd->k_tick_c; return 0; }                 sd->spamcount_WH_DEEPBLINDTRAP = 0;                 sd->spamtick_WH_DEEPBLINDTRAP = tick + sd->kdelay;                 break;
+			case WH_SOLIDTRAP:                     if (k_tick_check(sd, sd->spamtick_WH_SOLIDTRAP,                     sd->spamcount_WH_SOLIDTRAP,                     battle_config.kd_WH_SOLIDTRAP,                     battle_config.kdw_WH_SOLIDTRAP))                     { sd->spamcount_WH_SOLIDTRAP = sd->k_tick_c; return 0; }                     sd->spamcount_WH_SOLIDTRAP = 0;                     sd->spamtick_WH_SOLIDTRAP = tick + sd->kdelay;                     break;
+			case WH_SWIFTTRAP:                     if (k_tick_check(sd, sd->spamtick_WH_SWIFTTRAP,                     sd->spamcount_WH_SWIFTTRAP,                     battle_config.kd_WH_SWIFTTRAP,                     battle_config.kdw_WH_SWIFTTRAP))                     { sd->spamcount_WH_SWIFTTRAP = sd->k_tick_c; return 0; }                     sd->spamcount_WH_SWIFTTRAP = 0;                     sd->spamtick_WH_SWIFTTRAP = tick + sd->kdelay;                     break;
+			case WH_CRESCIVE_BOLT:                 if (k_tick_check(sd, sd->spamtick_WH_CRESCIVE_BOLT,                 sd->spamcount_WH_CRESCIVE_BOLT,                 battle_config.kd_WH_CRESCIVE_BOLT,                 battle_config.kdw_WH_CRESCIVE_BOLT))                 { sd->spamcount_WH_CRESCIVE_BOLT = sd->k_tick_c; return 0; }                 sd->spamcount_WH_CRESCIVE_BOLT = 0;                 sd->spamtick_WH_CRESCIVE_BOLT = tick + sd->kdelay;                 break;
+			case WH_FLAMETRAP:                     if (k_tick_check(sd, sd->spamtick_WH_FLAMETRAP,                     sd->spamcount_WH_FLAMETRAP,                     battle_config.kd_WH_FLAMETRAP,                     battle_config.kdw_WH_FLAMETRAP))                     { sd->spamcount_WH_FLAMETRAP = sd->k_tick_c; return 0; }                     sd->spamcount_WH_FLAMETRAP = 0;                     sd->spamtick_WH_FLAMETRAP = tick + sd->kdelay;                     break;
+			case BO_ACIDIFIED_ZONE_WATER:          if (k_tick_check(sd, sd->spamtick_BO_ACIDIFIED_ZONE_WATER,          sd->spamcount_BO_ACIDIFIED_ZONE_WATER,          battle_config.kd_BO_ACIDIFIED_ZONE_WATER,          battle_config.kdw_BO_ACIDIFIED_ZONE_WATER))          { sd->spamcount_BO_ACIDIFIED_ZONE_WATER = sd->k_tick_c; return 0; }          sd->spamcount_BO_ACIDIFIED_ZONE_WATER = 0;          sd->spamtick_BO_ACIDIFIED_ZONE_WATER = tick + sd->kdelay;          break;
+			case BO_ACIDIFIED_ZONE_GROUND:         if (k_tick_check(sd, sd->spamtick_BO_ACIDIFIED_ZONE_GROUND,         sd->spamcount_BO_ACIDIFIED_ZONE_GROUND,         battle_config.kd_BO_ACIDIFIED_ZONE_GROUND,         battle_config.kdw_BO_ACIDIFIED_ZONE_GROUND))         { sd->spamcount_BO_ACIDIFIED_ZONE_GROUND = sd->k_tick_c; return 0; }         sd->spamcount_BO_ACIDIFIED_ZONE_GROUND = 0;         sd->spamtick_BO_ACIDIFIED_ZONE_GROUND = tick + sd->kdelay;         break;
+			case BO_ACIDIFIED_ZONE_WIND:           if (k_tick_check(sd, sd->spamtick_BO_ACIDIFIED_ZONE_WIND,           sd->spamcount_BO_ACIDIFIED_ZONE_WIND,           battle_config.kd_BO_ACIDIFIED_ZONE_WIND,           battle_config.kdw_BO_ACIDIFIED_ZONE_WIND))           { sd->spamcount_BO_ACIDIFIED_ZONE_WIND = sd->k_tick_c; return 0; }           sd->spamcount_BO_ACIDIFIED_ZONE_WIND = 0;           sd->spamtick_BO_ACIDIFIED_ZONE_WIND = tick + sd->kdelay;           break;
+			case BO_ACIDIFIED_ZONE_FIRE:           if (k_tick_check(sd, sd->spamtick_BO_ACIDIFIED_ZONE_FIRE,           sd->spamcount_BO_ACIDIFIED_ZONE_FIRE,           battle_config.kd_BO_ACIDIFIED_ZONE_FIRE,           battle_config.kdw_BO_ACIDIFIED_ZONE_FIRE))           { sd->spamcount_BO_ACIDIFIED_ZONE_FIRE = sd->k_tick_c; return 0; }           sd->spamcount_BO_ACIDIFIED_ZONE_FIRE = 0;           sd->spamtick_BO_ACIDIFIED_ZONE_FIRE = tick + sd->kdelay;           break;
+			case TR_STAGE_MANNER:                  if (k_tick_check(sd, sd->spamtick_TR_STAGE_MANNER,                  sd->spamcount_TR_STAGE_MANNER,                  battle_config.kd_TR_STAGE_MANNER,                  battle_config.kdw_TR_STAGE_MANNER))                  { sd->spamcount_TR_STAGE_MANNER = sd->k_tick_c; return 0; }                  sd->spamcount_TR_STAGE_MANNER = 0;                  sd->spamtick_TR_STAGE_MANNER = tick + sd->kdelay;                  break;
+			case TR_ROSEBLOSSOM:                   if (k_tick_check(sd, sd->spamtick_TR_ROSEBLOSSOM,                   sd->spamcount_TR_ROSEBLOSSOM,                   battle_config.kd_TR_ROSEBLOSSOM,                   battle_config.kdw_TR_ROSEBLOSSOM))                   { sd->spamcount_TR_ROSEBLOSSOM = sd->k_tick_c; return 0; }                   sd->spamcount_TR_ROSEBLOSSOM = 0;                   sd->spamtick_TR_ROSEBLOSSOM = tick + sd->kdelay;                   break;
+			case TR_RHYTHMSHOOTING:                if (k_tick_check(sd, sd->spamtick_TR_RHYTHMSHOOTING,                sd->spamcount_TR_RHYTHMSHOOTING,                battle_config.kd_TR_RHYTHMSHOOTING,                battle_config.kdw_TR_RHYTHMSHOOTING))                { sd->spamcount_TR_RHYTHMSHOOTING = sd->k_tick_c; return 0; }                sd->spamcount_TR_RHYTHMSHOOTING = 0;                sd->spamtick_TR_RHYTHMSHOOTING = tick + sd->kdelay;                break;
+			case TR_METALIC_FURY:                  if (k_tick_check(sd, sd->spamtick_TR_METALIC_FURY,                  sd->spamcount_TR_METALIC_FURY,                  battle_config.kd_TR_METALIC_FURY,                  battle_config.kdw_TR_METALIC_FURY))                  { sd->spamcount_TR_METALIC_FURY = sd->k_tick_c; return 0; }                  sd->spamcount_TR_METALIC_FURY = 0;                  sd->spamtick_TR_METALIC_FURY = tick + sd->kdelay;                  break;
+			case EM_DIAMOND_STORM:                 if (k_tick_check(sd, sd->spamtick_EM_DIAMOND_STORM,                 sd->spamcount_EM_DIAMOND_STORM,                 battle_config.kd_EM_DIAMOND_STORM,                 battle_config.kdw_EM_DIAMOND_STORM))                 { sd->spamcount_EM_DIAMOND_STORM = sd->k_tick_c; return 0; }                 sd->spamcount_EM_DIAMOND_STORM = 0;                 sd->spamtick_EM_DIAMOND_STORM = tick + sd->kdelay;                 break;
+			case EM_LIGHTNING_LAND:                if (k_tick_check(sd, sd->spamtick_EM_LIGHTNING_LAND,                sd->spamcount_EM_LIGHTNING_LAND,                battle_config.kd_EM_LIGHTNING_LAND,                battle_config.kdw_EM_LIGHTNING_LAND))                { sd->spamcount_EM_LIGHTNING_LAND = sd->k_tick_c; return 0; }                sd->spamcount_EM_LIGHTNING_LAND = 0;                sd->spamtick_EM_LIGHTNING_LAND = tick + sd->kdelay;                break;
+			case EM_VENOM_SWAMP:                   if (k_tick_check(sd, sd->spamtick_EM_VENOM_SWAMP,                   sd->spamcount_EM_VENOM_SWAMP,                   battle_config.kd_EM_VENOM_SWAMP,                   battle_config.kdw_EM_VENOM_SWAMP))                   { sd->spamcount_EM_VENOM_SWAMP = sd->k_tick_c; return 0; }                   sd->spamcount_EM_VENOM_SWAMP = 0;                   sd->spamtick_EM_VENOM_SWAMP = tick + sd->kdelay;                   break;
+			case EM_CONFLAGRATION:                 if (k_tick_check(sd, sd->spamtick_EM_CONFLAGRATION,                 sd->spamcount_EM_CONFLAGRATION,                 battle_config.kd_EM_CONFLAGRATION,                 battle_config.kdw_EM_CONFLAGRATION))                 { sd->spamcount_EM_CONFLAGRATION = sd->k_tick_c; return 0; }                 sd->spamcount_EM_CONFLAGRATION = 0;                 sd->spamtick_EM_CONFLAGRATION = tick + sd->kdelay;                 break;
+			case EM_TERRA_DRIVE:                   if (k_tick_check(sd, sd->spamtick_EM_TERRA_DRIVE,                   sd->spamcount_EM_TERRA_DRIVE,                   battle_config.kd_EM_TERRA_DRIVE,                   battle_config.kdw_EM_TERRA_DRIVE))                   { sd->spamcount_EM_TERRA_DRIVE = sd->k_tick_c; return 0; }                   sd->spamcount_EM_TERRA_DRIVE = 0;                   sd->spamtick_EM_TERRA_DRIVE = tick + sd->kdelay;                   break;
+			case EM_ELEMENTAL_BUSTER:              if (k_tick_check(sd, sd->spamtick_EM_ELEMENTAL_BUSTER,              sd->spamcount_EM_ELEMENTAL_BUSTER,              battle_config.kd_EM_ELEMENTAL_BUSTER,              battle_config.kdw_EM_ELEMENTAL_BUSTER))              { sd->spamcount_EM_ELEMENTAL_BUSTER = sd->k_tick_c; return 0; }              sd->spamcount_EM_ELEMENTAL_BUSTER = 0;              sd->spamtick_EM_ELEMENTAL_BUSTER = tick + sd->kdelay;              break;
+			case BO_WOODEN_THROWROCK:              if (k_tick_check(sd, sd->spamtick_BO_WOODEN_THROWROCK,              sd->spamcount_BO_WOODEN_THROWROCK,              battle_config.kd_BO_WOODEN_THROWROCK,              battle_config.kdw_BO_WOODEN_THROWROCK))              { sd->spamcount_BO_WOODEN_THROWROCK = sd->k_tick_c; return 0; }              sd->spamcount_BO_WOODEN_THROWROCK = 0;              sd->spamtick_BO_WOODEN_THROWROCK = tick + sd->kdelay;              break;
+			case BO_WOODEN_ATTACK:                 if (k_tick_check(sd, sd->spamtick_BO_WOODEN_ATTACK,                 sd->spamcount_BO_WOODEN_ATTACK,                 battle_config.kd_BO_WOODEN_ATTACK,                 battle_config.kdw_BO_WOODEN_ATTACK))                 { sd->spamcount_BO_WOODEN_ATTACK = sd->k_tick_c; return 0; }                 sd->spamcount_BO_WOODEN_ATTACK = 0;                 sd->spamtick_BO_WOODEN_ATTACK = tick + sd->kdelay;                 break;
+			case BO_HELL_HOWLING:                  if (k_tick_check(sd, sd->spamtick_BO_HELL_HOWLING,                  sd->spamcount_BO_HELL_HOWLING,                  battle_config.kd_BO_HELL_HOWLING,                  battle_config.kdw_BO_HELL_HOWLING))                  { sd->spamcount_BO_HELL_HOWLING = sd->k_tick_c; return 0; }                  sd->spamcount_BO_HELL_HOWLING = 0;                  sd->spamtick_BO_HELL_HOWLING = tick + sd->kdelay;                  break;
+			case BO_HELL_DUSTY:                    if (k_tick_check(sd, sd->spamtick_BO_HELL_DUSTY,                    sd->spamcount_BO_HELL_DUSTY,                    battle_config.kd_BO_HELL_DUSTY,                    battle_config.kdw_BO_HELL_DUSTY))                    { sd->spamcount_BO_HELL_DUSTY = sd->k_tick_c; return 0; }                    sd->spamcount_BO_HELL_DUSTY = 0;                    sd->spamtick_BO_HELL_DUSTY = tick + sd->kdelay;                    break;
+			case BO_FAIRY_DUSTY:                   if (k_tick_check(sd, sd->spamtick_BO_FAIRY_DUSTY,                   sd->spamcount_BO_FAIRY_DUSTY,                   battle_config.kd_BO_FAIRY_DUSTY,                   battle_config.kdw_BO_FAIRY_DUSTY))                   { sd->spamcount_BO_FAIRY_DUSTY = sd->k_tick_c; return 0; }                   sd->spamcount_BO_FAIRY_DUSTY = 0;                   sd->spamtick_BO_FAIRY_DUSTY = tick + sd->kdelay;                   break;
+			case EM_ELEMENTAL_BUSTER_FIRE:         if (k_tick_check(sd, sd->spamtick_EM_ELEMENTAL_BUSTER_FIRE,         sd->spamcount_EM_ELEMENTAL_BUSTER_FIRE,         battle_config.kd_EM_ELEMENTAL_BUSTER_FIRE,         battle_config.kdw_EM_ELEMENTAL_BUSTER_FIRE))         { sd->spamcount_EM_ELEMENTAL_BUSTER_FIRE = sd->k_tick_c; return 0; }         sd->spamcount_EM_ELEMENTAL_BUSTER_FIRE = 0;         sd->spamtick_EM_ELEMENTAL_BUSTER_FIRE = tick + sd->kdelay;         break;
+			case EM_ELEMENTAL_BUSTER_WATER:        if (k_tick_check(sd, sd->spamtick_EM_ELEMENTAL_BUSTER_WATER,        sd->spamcount_EM_ELEMENTAL_BUSTER_WATER,        battle_config.kd_EM_ELEMENTAL_BUSTER_WATER,        battle_config.kdw_EM_ELEMENTAL_BUSTER_WATER))        { sd->spamcount_EM_ELEMENTAL_BUSTER_WATER = sd->k_tick_c; return 0; }        sd->spamcount_EM_ELEMENTAL_BUSTER_WATER = 0;        sd->spamtick_EM_ELEMENTAL_BUSTER_WATER = tick + sd->kdelay;        break;
+			case EM_ELEMENTAL_BUSTER_WIND:         if (k_tick_check(sd, sd->spamtick_EM_ELEMENTAL_BUSTER_WIND,         sd->spamcount_EM_ELEMENTAL_BUSTER_WIND,         battle_config.kd_EM_ELEMENTAL_BUSTER_WIND,         battle_config.kdw_EM_ELEMENTAL_BUSTER_WIND))         { sd->spamcount_EM_ELEMENTAL_BUSTER_WIND = sd->k_tick_c; return 0; }         sd->spamcount_EM_ELEMENTAL_BUSTER_WIND = 0;         sd->spamtick_EM_ELEMENTAL_BUSTER_WIND = tick + sd->kdelay;         break;
+			case EM_ELEMENTAL_BUSTER_GROUND:       if (k_tick_check(sd, sd->spamtick_EM_ELEMENTAL_BUSTER_GROUND,       sd->spamcount_EM_ELEMENTAL_BUSTER_GROUND,       battle_config.kd_EM_ELEMENTAL_BUSTER_GROUND,       battle_config.kdw_EM_ELEMENTAL_BUSTER_GROUND))       { sd->spamcount_EM_ELEMENTAL_BUSTER_GROUND = sd->k_tick_c; return 0; }       sd->spamcount_EM_ELEMENTAL_BUSTER_GROUND = 0;       sd->spamtick_EM_ELEMENTAL_BUSTER_GROUND = tick + sd->kdelay;       break;
+			case EM_ELEMENTAL_BUSTER_POISON:       if (k_tick_check(sd, sd->spamtick_EM_ELEMENTAL_BUSTER_POISON,       sd->spamcount_EM_ELEMENTAL_BUSTER_POISON,       battle_config.kd_EM_ELEMENTAL_BUSTER_POISON,       battle_config.kdw_EM_ELEMENTAL_BUSTER_POISON))       { sd->spamcount_EM_ELEMENTAL_BUSTER_POISON = sd->k_tick_c; return 0; }       sd->spamcount_EM_ELEMENTAL_BUSTER_POISON = 0;       sd->spamtick_EM_ELEMENTAL_BUSTER_POISON = tick + sd->kdelay;       break;
+			default:
+				if (k_tick_check(sd, sd->spamtick_DEFAULT, sd->spamcount_DEFAULT, battle_config.kd_DEFAULT, battle_config.kdw_DEFAULT)) {
+					sd->spamcount_DEFAULT = sd->k_tick_c;
+					return 0;
+				}
+				sd->spamcount_DEFAULT = 0;
+				sd->spamtick_DEFAULT = tick + sd->kdelay;
+				break;
+			}
+		}
+
+		skill_castend_id(ud->skilltimer, tick, src->id, 0);
+	}
+
 	if( sd && battle_config.prevent_logout_trigger&PLT_SKILL )
 		sd->canlog_tick = gettick();
 
